{"version":3,"file":"dir.js","names":["_slash","data","require","_path","_fs","util","watcher","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","FILE_TYPE","Object","freeze","NON_COMPILABLE","COMPILED","IGNORED","ERR_COMPILATION","outputFileSync","filePath","v","w","split","process","versions","node","mkdirSync","sync","dirname","recursive","writeFileSync","_default","_x","_ref","_ref2","cliOptions","babelOptions","_regeneratorRuntime","mark","_callee5","write","_write","getDest","handleFile","_handleFile","handle","_handle","compiledFiles","startTime","logSuccess","_iterator2","_step2","filename","processing","filenames","getBase","base","absoluteBase","filenameToBaseMap","absoluteFilenames","_path2","sep","wrap","_callee5$","_context5","prev","next","_handle3","_callee3","filenameOrDir","stat","count","files","_iterator","_step","src","written","_filename","_written","_callee3$","_context3","existsSync","abrupt","statSync","isDirectory","readdir","includeDotfiles","_createForOfIteratorHelper","s","n","join","sent","t0","e","f","finish","stop","_handle2","_x6","_handleFile3","_callee2","dest","_callee2$","_context2","copyFiles","copyIgnored","relative","readFileSync","chmod","_handleFile2","_x4","_x5","_getDest","outDir","_write3","_callee","res","outputMap","mapLoc","_callee$","_context","isCompilableExtension","extensions","withExtension","keepFileExtension","extname","outFileExtension","compile","assign","sourceFileName","map","sourceMaps","hasDataSourcemap","code","addSourceMappingUrl","file","basename","JSON","stringify","verbose","console","log","cwd","watch","_write2","_x2","_x3","debounce","diff","hrtime","concat","Math","round","enable","enableGlobbing","skipInitialBuild","deleteDirOnStart","deleteDir","t1","quiet","flush","length","Map","absoluteFilename","get","_iterator3","_step3","_step3$value","_slicedToArray","absoluteFilenameOrDir","startsWith","set","forEach","startWatcher","onFilesChange","_callee4","_callee4$","_context4","all","filter","Boolean"],"sources":["../../src/babel/dir.ts"],"sourcesContent":["import slash from \"slash\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport * as util from \"./util.ts\";\nimport * as watcher from \"./watcher.ts\";\nimport type { CmdOptions } from \"./options.ts\";\n\nconst FILE_TYPE = Object.freeze({\n  NON_COMPILABLE: \"NON_COMPILABLE\",\n  COMPILED: \"COMPILED\",\n  IGNORED: \"IGNORED\",\n  ERR_COMPILATION: \"ERR_COMPILATION\",\n} as const);\n\nfunction outputFileSync(filePath: string, data: string | Buffer): void {\n  fs.mkdirSync(path.dirname(filePath), { recursive: true });\n  fs.writeFileSync(filePath, data);\n}\n\nexport default async function ({\n  cliOptions,\n  babelOptions,\n}: CmdOptions): Promise<void> {\n  async function write(\n    src: string,\n    base: string,\n  ): Promise<keyof typeof FILE_TYPE> {\n    let relative = path.relative(base, src);\n\n    if (!util.isCompilableExtension(relative, cliOptions.extensions)) {\n      return FILE_TYPE.NON_COMPILABLE;\n    }\n\n    relative = util.withExtension(\n      relative,\n      cliOptions.keepFileExtension\n        ? path.extname(relative)\n        : cliOptions.outFileExtension,\n    );\n\n    const dest = getDest(relative, base);\n\n    try {\n      const res = await util.compile(src, {\n        ...babelOptions,\n        sourceFileName: slash(path.relative(dest + \"/..\", src)),\n      });\n\n      if (!res) return FILE_TYPE.IGNORED;\n\n      if (res.map) {\n        let outputMap: \"both\" | \"external\" | false = false;\n        if (babelOptions.sourceMaps && babelOptions.sourceMaps !== \"inline\") {\n          outputMap = \"external\";\n        } else if (babelOptions.sourceMaps == undefined) {\n          outputMap = util.hasDataSourcemap(res.code) ? \"external\" : \"both\";\n        }\n\n        if (outputMap) {\n          const mapLoc = dest + \".map\";\n          if (outputMap === \"external\") {\n            res.code = util.addSourceMappingUrl(res.code, mapLoc);\n          }\n          res.map.file = path.basename(relative);\n          outputFileSync(mapLoc, JSON.stringify(res.map));\n        }\n      }\n\n      outputFileSync(dest, res.code);\n      util.chmod(src, dest);\n\n      if (cliOptions.verbose) {\n        console.log(path.relative(process.cwd(), src) + \" -> \" + dest);\n      }\n\n      return FILE_TYPE.COMPILED;\n    } catch (err) {\n      if (cliOptions.watch) {\n        console.error(err);\n        return FILE_TYPE.ERR_COMPILATION;\n      }\n\n      throw err;\n    }\n  }\n\n  function getDest(filename: string, base: string): string {\n    if (cliOptions.relative) {\n      return path.join(base, cliOptions.outDir, filename);\n    }\n    return path.join(cliOptions.outDir, filename);\n  }\n\n  async function handleFile(src: string, base: string): Promise<boolean> {\n    const written = await write(src, base);\n\n    if (\n      (cliOptions.copyFiles && written === FILE_TYPE.NON_COMPILABLE) ||\n      (cliOptions.copyIgnored && written === FILE_TYPE.IGNORED)\n    ) {\n      const filename = path.relative(base, src);\n      const dest = getDest(filename, base);\n      outputFileSync(dest, fs.readFileSync(src));\n      util.chmod(src, dest);\n    }\n    return written === FILE_TYPE.COMPILED;\n  }\n\n  async function handle(filenameOrDir: string): Promise<number> {\n    if (!fs.existsSync(filenameOrDir)) return 0;\n\n    const stat = fs.statSync(filenameOrDir);\n\n    if (stat.isDirectory()) {\n      const dirname = filenameOrDir;\n\n      let count = 0;\n\n      const files = util.readdir(dirname, cliOptions.includeDotfiles);\n      for (const filename of files) {\n        const src = path.join(dirname, filename);\n\n        const written = await handleFile(src, dirname);\n        if (written) count += 1;\n      }\n\n      return count;\n    } else {\n      const filename = filenameOrDir;\n      const written = await handleFile(filename, path.dirname(filename));\n\n      return written ? 1 : 0;\n    }\n  }\n\n  let compiledFiles = 0;\n  let startTime: [number, number] | null = null;\n\n  const logSuccess = util.debounce(function () {\n    if (startTime === null) {\n      // This should never happen, but just in case it's better\n      // to ignore the log message rather than making @babel/cli crash.\n      return;\n    }\n\n    const diff = process.hrtime(startTime);\n\n    console.log(\n      `Successfully compiled ${compiledFiles} ${\n        compiledFiles !== 1 ? \"files\" : \"file\"\n      } with Babel (${diff[0] * 1e3 + Math.round(diff[1] / 1e6)}ms).`,\n    );\n    compiledFiles = 0;\n    startTime = null;\n  }, 100);\n\n  if (cliOptions.watch) watcher.enable({ enableGlobbing: true });\n\n  if (!cliOptions.skipInitialBuild) {\n    if (cliOptions.deleteDirOnStart) {\n      util.deleteDir(cliOptions.outDir);\n    }\n\n    fs.mkdirSync(cliOptions.outDir, { recursive: true });\n\n    startTime = process.hrtime();\n\n    for (const filename of cliOptions.filenames) {\n      // compiledFiles is just incremented without reading its value, so we\n      // don't risk race conditions.\n      // eslint-disable-next-line require-atomic-updates\n      compiledFiles += await handle(filename);\n    }\n\n    if (!cliOptions.quiet) {\n      logSuccess();\n      logSuccess.flush();\n    }\n  }\n\n  if (cliOptions.watch) {\n    // This, alongside with debounce, allows us to only log\n    // when we are sure that all the files have been compiled.\n    let processing = 0;\n    const { filenames } = cliOptions;\n    let getBase: (filename: string) => string | null;\n    if (filenames.length === 1) {\n      // fast path: If there is only one filenames, we know it must be the base\n      const base = filenames[0];\n      const absoluteBase = path.resolve(base);\n      getBase = filename => {\n        return filename === absoluteBase ? path.dirname(base) : base;\n      };\n    } else {\n      // A map from absolute compiled file path to its base, from which\n      // the output destination will be determined\n      const filenameToBaseMap: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, path.dirname(filename)];\n        }),\n      );\n\n      const absoluteFilenames: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, filename];\n        }),\n      );\n\n      const { sep } = path;\n      // determine base from the absolute file path\n      getBase = filename => {\n        const base = filenameToBaseMap.get(filename);\n        if (base !== undefined) {\n          return base;\n        }\n        for (const [absoluteFilenameOrDir, relative] of absoluteFilenames) {\n          if (filename.startsWith(absoluteFilenameOrDir + sep)) {\n            filenameToBaseMap.set(filename, relative);\n            return relative;\n          }\n        }\n        // Can't determine the base, probably external deps\n        return \"\";\n      };\n    }\n\n    filenames.forEach(filenameOrDir => {\n      watcher.watch(filenameOrDir);\n    });\n\n    watcher.startWatcher();\n\n    watcher.onFilesChange(async filenames => {\n      processing++;\n      if (startTime === null) startTime = process.hrtime();\n\n      try {\n        const written = await Promise.all(\n          filenames.map(filename => handleFile(filename, getBase(filename))),\n        );\n\n        compiledFiles += written.filter(Boolean).length;\n      } catch (err) {\n        console.error(err);\n      }\n\n      processing--;\n      if (processing === 0 && !cliOptions.quiet) logSuccess();\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}