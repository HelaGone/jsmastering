{"version":3,"file":"file.js","names":["_convertSourceMap","data","require","_traceMapping","_slash","_path","_fs","util","watcher","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_default","_x","_ref","_ref2","cliOptions","babelOptions","_regeneratorRuntime","mark","_callee5","buildResult","countNewlines","output","readStdin","stdin","_stdin","walk","_walk","files","_files","wrap","_callee5$","_context5","prev","next","_files3","_callee4","filenames","_callee4$","_context4","watch","enable","enableGlobbing","skipInitialBuild","forEach","startWatcher","onFilesChange","changes","event","cause","actionableChange","some","filename","isCompilableExtension","extensions","includes","verbose","console","log","concat","stop","_files2","_x3","_walk3","_callee3","_filenames","results","_callee3$","_context3","existsSync","stat","statSync","isDirectory","dirname","readdirForCompilable","includeDotfiles","push","join","all","map","_callee2","sourceFilename","_callee2$","_context2","outFile","relative","compile","Object","assign","sourceFileName","sourceMaps","abrupt","sent","t0","_walk2","_x2","_stdin3","_callee","code","res","_callee$","_context","transformRepl","_stdin2","_readStdin","process","setEncoding","on","chunk","read","_output","fileResults","result","v","w","split","versions","node","mkdirSync","sync","recursive","outputMap","hasRawMap","hasDataSourcemap","mapLoc","addSourceMappingUrl","writeFileSync","JSON","stringify","encodedMap","stdout","write","_countNewlines","count","index","indexOf","_buildResult","mapSections","offset","_iterator","_createForOfIteratorHelper","_step","s","n","line","column","version","names","sources","mappings","e","f","AnyMap","file","sourceMapTarget","basename","sections","sourceRoot","fromObject","toComment","length"],"sources":["../../src/babel/file.ts"],"sourcesContent":["import convertSourceMap from \"convert-source-map\";\nimport { AnyMap, encodedMap } from \"@jridgewell/trace-mapping\";\nimport slash from \"slash\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport * as util from \"./util.ts\";\nimport type { CmdOptions } from \"./options.ts\";\nimport * as watcher from \"./watcher.ts\";\n\nimport type {\n  EncodedSourceMap,\n  SectionedSourceMap,\n  SourceMapInput,\n  TraceMap,\n} from \"@jridgewell/trace-mapping\";\nimport type { FileResult } from \"@babel/core\";\n\ntype CompilationOutput = {\n  code: string;\n  map: SourceMapInput;\n  hasRawMap: boolean;\n};\n\nexport default async function ({\n  cliOptions,\n  babelOptions,\n}: CmdOptions): Promise<void> {\n  function buildResult(fileResults: Array<FileResult>): CompilationOutput {\n    const mapSections: SectionedSourceMap[\"sections\"] = [];\n\n    let code = \"\";\n    let offset = 0;\n\n    let hasRawMap = false;\n\n    for (const result of fileResults) {\n      if (!result) continue;\n\n      hasRawMap = !!result.map;\n\n      mapSections.push({\n        offset: { line: offset, column: 0 },\n        map: (result.map as EncodedSourceMap) || {\n          version: 3,\n          names: [],\n          sources: [],\n          mappings: [],\n        },\n      });\n\n      code += result.code + \"\\n\";\n      offset += countNewlines(result.code) + 1;\n    }\n\n    const map = new AnyMap({\n      version: 3,\n      file:\n        cliOptions.sourceMapTarget ||\n        path.basename(cliOptions.outFile || \"\") ||\n        \"stdout\",\n      sections: mapSections,\n    });\n    // For some reason, the spec doesn't allow sourceRoot when constructing a\n    // sectioned sourcemap. But AllMap returns a regular sourcemap, we can\n    // freely add to with a sourceRoot.\n    map.sourceRoot = babelOptions.sourceRoot;\n\n    // add the inline sourcemap comment if we've either explicitly asked for inline source\n    // maps, or we've requested them without any output file\n    if (\n      babelOptions.sourceMaps === \"inline\" ||\n      (!cliOptions.outFile && babelOptions.sourceMaps)\n    ) {\n      code += \"\\n\" + convertSourceMap.fromObject(encodedMap(map)).toComment();\n    }\n\n    return {\n      map: map,\n      code: code,\n      hasRawMap: hasRawMap,\n    };\n  }\n\n  function countNewlines(code: string): number {\n    let count = 0;\n    let index = -1;\n    while ((index = code.indexOf(\"\\n\", index + 1)) !== -1) {\n      count++;\n    }\n    return count;\n  }\n\n  function output(fileResults: Array<FileResult>): void {\n    const result = buildResult(fileResults);\n\n    if (cliOptions.outFile) {\n      fs.mkdirSync(path.dirname(cliOptions.outFile), { recursive: true });\n\n      let outputMap: \"both\" | \"external\" | false = false;\n      if (babelOptions.sourceMaps && babelOptions.sourceMaps !== \"inline\") {\n        outputMap = \"external\";\n      } else if (babelOptions.sourceMaps == undefined && result.hasRawMap) {\n        outputMap = util.hasDataSourcemap(result.code) ? \"external\" : \"both\";\n      }\n\n      if (outputMap) {\n        const mapLoc = cliOptions.outFile + \".map\";\n        if (outputMap === \"external\") {\n          result.code = util.addSourceMappingUrl(result.code, mapLoc);\n        }\n        fs.writeFileSync(\n          mapLoc,\n          JSON.stringify(encodedMap(result.map as TraceMap)),\n        );\n      }\n\n      fs.writeFileSync(cliOptions.outFile, result.code);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n    }\n  }\n\n  function readStdin(): Promise<string> {\n    return new Promise((resolve, reject): void => {\n      let code = \"\";\n\n      process.stdin.setEncoding(\"utf8\");\n\n      process.stdin.on(\"readable\", function () {\n        const chunk = process.stdin.read();\n        if (chunk !== null) code += chunk;\n      });\n\n      process.stdin.on(\"end\", function () {\n        resolve(code);\n      });\n      process.stdin.on(\"error\", reject);\n    });\n  }\n\n  async function stdin(): Promise<void> {\n    const code = await readStdin();\n\n    const res = await util.transformRepl(cliOptions.filename, code, {\n      ...babelOptions,\n      sourceFileName: \"stdin\",\n    });\n\n    output([res]);\n  }\n\n  async function walk(filenames: Array<string>): Promise<void> {\n    const _filenames: string[] = [];\n\n    filenames.forEach(function (filename) {\n      if (!fs.existsSync(filename)) return;\n\n      const stat = fs.statSync(filename);\n      if (stat.isDirectory()) {\n        const dirname = filename;\n\n        util\n          .readdirForCompilable(\n            filename,\n            cliOptions.includeDotfiles,\n            cliOptions.extensions,\n          )\n          .forEach(function (filename) {\n            _filenames.push(path.join(dirname, filename));\n          });\n      } else {\n        _filenames.push(filename);\n      }\n    });\n\n    const results = await Promise.all(\n      _filenames.map(async function (filename: string): Promise<any> {\n        let sourceFilename = filename;\n        if (cliOptions.outFile) {\n          sourceFilename = path.relative(\n            path.dirname(cliOptions.outFile),\n            sourceFilename,\n          );\n        }\n        sourceFilename = slash(sourceFilename);\n\n        try {\n          return await util.compile(filename, {\n            ...babelOptions,\n            sourceFileName: sourceFilename,\n            // Since we're compiling everything to be merged together,\n            // \"inline\" applies to the final output file, but not to the individual\n            // files being concatenated.\n            sourceMaps:\n              babelOptions.sourceMaps === \"inline\"\n                ? true\n                : babelOptions.sourceMaps,\n          });\n        } catch (err) {\n          if (!cliOptions.watch) {\n            throw err;\n          }\n\n          console.error(err);\n          return null;\n        }\n      }),\n    );\n\n    output(results);\n  }\n\n  async function files(filenames: Array<string>): Promise<void> {\n    if (cliOptions.watch) {\n      watcher.enable({ enableGlobbing: false });\n    }\n\n    if (!cliOptions.skipInitialBuild) {\n      await walk(filenames);\n    }\n\n    if (cliOptions.watch) {\n      filenames.forEach(watcher.watch);\n\n      watcher.startWatcher();\n\n      watcher.onFilesChange((changes, event, cause) => {\n        const actionableChange = changes.some(\n          filename =>\n            util.isCompilableExtension(filename, cliOptions.extensions) ||\n            filenames.includes(filename),\n        );\n        if (!actionableChange) return;\n\n        if (cliOptions.verbose) {\n          console.log(`${event} ${cause}`);\n        }\n\n        walk(filenames).catch(err => {\n          console.error(err);\n        });\n      });\n    }\n  }\n\n  if (cliOptions.filenames.length) {\n    await files(cliOptions.filenames);\n  } else {\n    await stdin();\n  }\n}\n"],"mappings":"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","ignoreList":[]}