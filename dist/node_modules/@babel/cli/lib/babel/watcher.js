"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enable = enable;
exports.onFilesChange = onFilesChange;
exports.startWatcher = startWatcher;
exports.updateExternalDependencies = updateExternalDependencies;
exports.watch = watch;
function _path() {
  var data = require("path");
  _path = function _path() {
    return data;
  };
  return data;
}
var fileToDeps = new Map();
var depToFiles = new Map();
var isWatchMode = false;
var watcher;
var watchQueue = new Set();
var hasStarted = false;
function enable(_ref) {
  var enableGlobbing = _ref.enableGlobbing;
  isWatchMode = true;
  var _requireChokidar = requireChokidar(),
    FSWatcher = _requireChokidar.FSWatcher;
  var options = {
    disableGlobbing: !enableGlobbing,
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
      stabilityThreshold: 50,
      pollInterval: 10
    }
  };
  watcher = new FSWatcher(options);
  watcher.on("unlink", unwatchFile);
}
function startWatcher() {
  hasStarted = true;
  var _iterator = _createForOfIteratorHelper(watchQueue),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var dep = _step.value;
      watcher.add(dep);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  watchQueue.clear();
  watcher.on("ready", function () {
    console.log("The watcher is ready.");
  });
}
function watch(filename) {
  if (!isWatchMode) {
    throw new Error("Internal Babel error: .watch called when not in watch mode.");
  }
  if (!hasStarted) {
    watchQueue.add(_path().resolve(filename));
  } else {
    watcher.add(_path().resolve(filename));
  }
}
function onFilesChange(callback) {
  if (!isWatchMode) {
    throw new Error("Internal Babel error: .onFilesChange called when not in watch mode.");
  }
  watcher.on("all", function (event, filename) {
    var _depToFiles$get;
    if (event !== "change" && event !== "add") return;
    var absoluteFile = _path().resolve(filename);
    callback([absoluteFile].concat(_toConsumableArray((_depToFiles$get = depToFiles.get(absoluteFile)) != null ? _depToFiles$get : [])), event, absoluteFile);
  });
}
function updateExternalDependencies(filename, dependencies) {
  if (!isWatchMode) return;
  var absFilename = _path().resolve(filename);
  var absDependencies = new Set(Array.from(dependencies, function (dep) {
    return _path().resolve(dep);
  }));
  var deps = fileToDeps.get(absFilename);
  if (deps) {
    var _iterator2 = _createForOfIteratorHelper(deps),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var dep = _step2.value;
        if (!absDependencies.has(dep)) {
          removeFileDependency(absFilename, dep);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  var _iterator3 = _createForOfIteratorHelper(absDependencies),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _dep = _step3.value;
      var _deps = depToFiles.get(_dep);
      if (!_deps) {
        depToFiles.set(_dep, _deps = new Set());
        if (!hasStarted) {
          watchQueue.add(_dep);
        } else {
          watcher.add(_dep);
        }
      }
      _deps.add(absFilename);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  fileToDeps.set(absFilename, absDependencies);
}
function removeFileDependency(filename, dep) {
  var deps = depToFiles.get(dep);
  deps["delete"](filename);
  if (deps.size === 0) {
    depToFiles["delete"](dep);
    if (!hasStarted) {
      watchQueue["delete"](dep);
    } else {
      watcher.unwatch(dep);
    }
  }
}
function unwatchFile(filename) {
  var deps = fileToDeps.get(filename);
  if (!deps) return;
  var _iterator4 = _createForOfIteratorHelper(deps),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var dep = _step4.value;
      removeFileDependency(filename, dep);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  fileToDeps["delete"](filename);
}
function requireChokidar() {
  try {
    return parseInt(process.versions.node) >= 8 ? require("chokidar") : require("@nicolo-ribaudo/chokidar-2");
  } catch (err) {
    console.error("The optional dependency chokidar failed to install and is required for " + "--watch. Chokidar is likely not supported on your platform.");
    throw err;
  }
}
//# sourceMappingURL=watcher.js.map