{"version":3,"file":"index.js","names":["_helperFunctionName","require","_template","_t","blockStatement","callExpression","functionExpression","isAssignmentPattern","isFunctionDeclaration","isRestElement","returnStatement","isCallExpression","buildAnonymousExpressionWrapper","expression","buildNamedExpressionWrapper","buildDeclarationWrapper","statements","classOrObjectMethod","path","callId","node","body","container","async","generator","get","unwrapFunctionEnvironment","plainFunction","inPath","noNewArrows","ignoreFunctionLength","functionId","nodeParams","params","isArrowFunctionExpression","_path$arrowFunctionTo","arrowFunctionToExpression","isDeclaration","built","id","type","_iterator","_createForOfIteratorHelper","_step","s","n","done","param","value","push","scope","generateUidIdentifier","err","e","f","wrapperArgs","NAME","REF","name","FUNCTION","PARAMS","replaceWith","insertAfter","returnFn","callee","argument","parent","length","wrapFunction","arguments","undefined","isMethod"],"sources":["../src/index.ts"],"sourcesContent":["import type { NodePath } from \"@babel/traverse\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport template from \"@babel/template\";\nimport {\n  blockStatement,\n  callExpression,\n  functionExpression,\n  isAssignmentPattern,\n  isFunctionDeclaration,\n  isRestElement,\n  returnStatement,\n  isCallExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\ntype ExpressionWrapperBuilder<ExtraBody extends t.Node[]> = (\n  replacements?: Parameters<ReturnType<typeof template.expression>>[0],\n) => t.CallExpression & {\n  callee: t.FunctionExpression & {\n    body: {\n      body: [\n        t.VariableDeclaration & {\n          declarations: [\n            { init: t.FunctionExpression | t.ArrowFunctionExpression },\n          ];\n        },\n        ...ExtraBody,\n      ];\n    };\n  };\n};\n\nconst buildAnonymousExpressionWrapper = template.expression(`\n  (function () {\n    var REF = FUNCTION;\n    return function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    };\n  })()\n`) as ExpressionWrapperBuilder<\n  [t.ReturnStatement & { argument: t.FunctionExpression }]\n>;\n\nconst buildNamedExpressionWrapper = template.expression(`\n  (function () {\n    var REF = FUNCTION;\n    function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    }\n    return NAME;\n  })()\n`) as ExpressionWrapperBuilder<\n  [t.FunctionDeclaration, t.ReturnStatement & { argument: t.Identifier }]\n>;\n\nconst buildDeclarationWrapper = template.statements(`\n  function NAME(PARAMS) { return REF.apply(this, arguments); }\n  function REF() {\n    REF = FUNCTION;\n    return REF.apply(this, arguments);\n  }\n`);\n\nfunction classOrObjectMethod(\n  path: NodePath<t.ClassMethod | t.ClassPrivateMethod | t.ObjectMethod>,\n  callId: t.Expression,\n) {\n  const node = path.node;\n  const body = node.body;\n\n  const container = functionExpression(\n    null,\n    [],\n    blockStatement(body.body),\n    true,\n  );\n  body.body = [\n    returnStatement(callExpression(callExpression(callId, [container]), [])),\n  ];\n\n  // Regardless of whether or not the wrapped function is a an async method\n  // or generator the outer function should not be\n  node.async = false;\n  node.generator = false;\n\n  // Unwrap the wrapper IIFE's environment so super and this and such still work.\n  (\n    path.get(\"body.body.0.argument.callee.arguments.0\") as NodePath\n  ).unwrapFunctionEnvironment();\n}\n\nfunction plainFunction(\n  inPath: NodePath<Exclude<t.Function, t.Method>>,\n  callId: t.Expression,\n  noNewArrows: boolean,\n  ignoreFunctionLength: boolean,\n) {\n  let path: NodePath<\n    | t.FunctionDeclaration\n    | t.FunctionExpression\n    | t.CallExpression\n    | t.ArrowFunctionExpression\n  > = inPath;\n  let node;\n  let functionId = null;\n  const nodeParams = inPath.node.params;\n\n  if (path.isArrowFunctionExpression()) {\n    if (process.env.BABEL_8_BREAKING) {\n      path = path.arrowFunctionToExpression({ noNewArrows });\n    } else {\n      // arrowFunctionToExpression returns undefined in @babel/traverse < 7.18.10\n      path = path.arrowFunctionToExpression({ noNewArrows }) ?? path;\n    }\n    node = path.node as\n      | t.FunctionDeclaration\n      | t.FunctionExpression\n      | t.CallExpression;\n  } else {\n    node = path.node as t.FunctionDeclaration | t.FunctionExpression;\n  }\n\n  const isDeclaration = isFunctionDeclaration(node);\n\n  let built = node;\n  if (!isCallExpression(node)) {\n    functionId = node.id;\n    node.id = null;\n    node.type = \"FunctionExpression\";\n    built = callExpression(callId, [\n      node as Exclude<typeof node, t.FunctionDeclaration>,\n    ]);\n  }\n\n  const params: t.Identifier[] = [];\n  for (const param of nodeParams) {\n    if (isAssignmentPattern(param) || isRestElement(param)) {\n      break;\n    }\n    params.push(path.scope.generateUidIdentifier(\"x\"));\n  }\n\n  const wrapperArgs = {\n    NAME: functionId || null,\n    REF: path.scope.generateUidIdentifier(functionId ? functionId.name : \"ref\"),\n    FUNCTION: built,\n    PARAMS: params,\n  };\n\n  if (isDeclaration) {\n    const container = buildDeclarationWrapper(wrapperArgs);\n    path.replaceWith(container[0]);\n    path.insertAfter(container[1]);\n  } else {\n    let container;\n\n    if (functionId) {\n      container = buildNamedExpressionWrapper(wrapperArgs);\n    } else {\n      container = buildAnonymousExpressionWrapper(wrapperArgs);\n\n      const returnFn = container.callee.body.body[1].argument;\n      nameFunction({\n        node: returnFn,\n        parent: (path as NodePath<t.FunctionExpression>).parent,\n        scope: path.scope,\n      });\n      functionId = returnFn.id;\n    }\n\n    if (functionId || (!ignoreFunctionLength && params.length)) {\n      path.replaceWith(container);\n    } else {\n      // we can omit this wrapper as the conditions it protects for do not apply\n      path.replaceWith(built);\n    }\n  }\n}\n\nexport default function wrapFunction(\n  path: NodePath<t.Function>,\n  callId: t.Expression,\n  // TODO(Babel 8): Consider defaulting to false for spec compliance\n  noNewArrows: boolean = true,\n  ignoreFunctionLength: boolean = false,\n) {\n  if (path.isMethod()) {\n    classOrObjectMethod(path, callId);\n  } else {\n    plainFunction(\n      path as NodePath<Exclude<t.Function, t.Method>>,\n      callId,\n      noNewArrows,\n      ignoreFunctionLength,\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}