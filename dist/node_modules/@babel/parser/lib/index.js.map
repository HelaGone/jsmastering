{"version":3,"file":"index.js","names":["Position","_createClass","line","col","index","_classCallCheck","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","VariableDeclarator","YieldExpression","toNodeDescription","_ref3","type","prefix","String","StandardErrors","AccessorIsGenerator","_ref4","kind","concat","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","_ref5","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","_ref6","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","_ref7","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","_ref8","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","_ref9","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","_ref10","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","_ref11","importName","ImportCallArgumentTrailingComma","ImportCallArity","_ref12","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","_ref13","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","_ref14","reservedWord","InvalidIdentifier","_ref15","InvalidLhs","_ref16","ancestor","InvalidLhsBinding","_ref17","InvalidLhsOptionalChaining","_ref18","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","_ref19","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","_ref20","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","_ref21","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","_ref22","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","_ref23","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","_ref24","key","ModuleExportNameHasLoneSurrogate","_ref25","surrogateCharCode","toString","ModuleExportUndefined","_ref26","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","_ref27","PrivateNameRedeclaration","_ref28","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","_ref29","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","_ref30","UnexpectedSuper","UnexpectedToken","_ref31","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","_ref32","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","_ref33","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","_ref34","referenceName","StrictEvalArgumentsBinding","_ref35","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","_ref36","token","PipeTopicUnused","PipeUnparenthesizedBody","_ref37","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","Object","defineProperty","enumerable","configurable","toParseErrorConstructor","_ref","toMessage","properties","_objectWithoutPropertiesLoose","_excluded","constructor","loc","details","error","SyntaxError","assign","pos","clone","overrides","arguments","length","undefined","_overrides$loc","_ref38","get","set","writable","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","_loop","reasonCode","_Object$keys","_i","template","_ref2","rest","_excluded2","keys","Errors","_templateObject","_taggedTemplateLiteral","toUnenumerable","object","toESTreeLocation","node","estree","superClass","_superClass","ESTreeParserMixin","_callSuper","_inherits","parse","file","_get","_getPrototypeOf","prototype","call","options","tokens","parseRegExpLiteral","_ref39","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","_this2","directiveStatements","directives","d","body","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","id","isPrivateName","getPrivateNameSV","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","_get2","_len","args","_key","propertyNode","apply","parseClassPrivateProperty","_get3","_len2","_key2","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","source","hasPlugin","_node$arguments$","_node$arguments$2","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","currentScope","currentVarScopeFlags","currentThisScopeFlags","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","_Scope","_this3","_len3","_key3","declareFunctions","FlowScopeHandler","_ScopeHandler","add","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","_pluginConfig","_slicedToArray","pluginName","pluginOptions","actualOptions","_i2","_Object$keys2","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","_node$trailingComment","unshift","_toConsumableArray","setLeadingComments","leadingComments","_node$leadingComments","setInnerComments","innerComments","_node$innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","_BaseParser","addComment","comment","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","_ref40","strictMode","sourceType","startLine","startColumn","curPosition","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","_readHexChar","readHexChar","_readCodePoint","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","_readInt","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","_readHexChar2","indexOf","invalidCodePoint","_readHexChar3","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","_CommentsParser","_this4","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","inType","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","_this5","forEach","_ref41","_ref42","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","inClass","content","mods","char","includes","_readInt3","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","_readCodePoint3","quote","_readStringContents","readTemplateContinuation","opening","_readStringContents2","firstCode","containsEsc","escStart","identifierCheck","esc","raiseOverwrite","expectOnePlugin","pluginNames","_this6","some","_this7","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","_i3","_Array$from","from","_Array$from$_i","declarePrivateName","elementType","_this$current","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_iterator","_createForOfIteratorHelper","_step","s","done","err","f","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","_ExpressionScope","_this8","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","_this9","_ref43","_ref44","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","functionFlags","UtilParser","_Tokenizer","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","_this10","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","_UtilParser","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","_templateObject2","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","_ref45","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","_ref46","memberName","enumName","EnumDuplicateMemberName","_ref47","EnumInconsistentMemberValues","_ref48","EnumInvalidExplicitType","_ref49","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","_ref50","EnumInvalidMemberInitializerPrimaryType","_ref51","explicitType","EnumInvalidMemberInitializerSymbolType","_ref52","EnumInvalidMemberInitializerUnknownType","_ref53","EnumInvalidMemberName","_ref54","suggestion","EnumNumberMemberNotInitialized","_ref55","EnumStringMemberInconsistentlyInitialized","_ref56","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","_ref57","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","_ref58","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","_superClass2","FlowParserMixin","_this11","_len4","_key4","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","_this$flowParseTypeAn","_this$flowParseTypeAn2","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","_this12","bodyNode","hasModuleExport","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","flowParseInterfaceExtends","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","_ref59","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","_this13","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","_this$flowParseTypeAn3","_this$flowParseTypeAn4","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","_this14","maybeInArrowParameters","setOptionalParametersError","originalNoArrowAt","_this$tryParseConditi","tryParseConditionalConsequent","consequent","failed","_this$getArrowLikeExp","getArrowLikeExpressions","_this$getArrowLikeExp2","valid","_this$tryParseConditi2","_this$getArrowLikeExp3","_this$getArrowLikeExp4","_this$tryParseConditi3","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","_this15","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","afterLeftParse","_this16","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","_this17","_this17$flowParseType","_this17$flowParseType2","shouldParseArrow","setArrowFunctionParameters","checkParams","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","_this18","parseAsyncArrowWithTypeParameters","subscriptState","_this19","isLookaheadToken_lt","typeArguments","parseCallExpressionArguments","parseNewCallee","_this20","targs","hasFlowComment","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","_ref60","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","_this21","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","_ref61","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","_this$flowEnumMemberR","toUpperCase","flowEnumStringMembers","initializedMembers","_ref62","_iterator2","_step2","_iterator3","_step3","flowEnumParseExplicitType","_ref63","flowEnumBody","_this22","nameLoc","_this$flowEnumMembers","empty","boolsLen","numsLen","strsLen","defaultedLen","_iterator4","_step4","_iterator5","_step5","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","_templateObject3","AttributeIsEmpty","MissingClosingTagElement","_ref64","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","_ref65","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","_superClass3","JSXParserMixin","jsxReadToken","canStartJSXElement","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","parseExprAtom","jsxParseEmptyExpression","jsxParseSpreadChild","parseExpression","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","_this$state","TypeScriptScope","_Scope2","_this23","_len5","_key5","tsNames","TypeScriptScopeHandler","_ScopeHandler2","_this24","_len6","_key6","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn$1","getOwn","hasOwnProperty","unwrapParenthesizedExpression","LValParser","_NodeUtils","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","_this25","element","toReferencedListDeep","_iterator6","_step6","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","_this$state2","parsePropertyName","_left","ObjectProperty","checkLVal","_ref66","_ref66$binding","_ref66$checkClashes","checkClashes","_ref66$strictModeChan","_ref66$hasParenthesiz","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","_ref67","_ref68","isParenthesizedExpression","nextAncestor","_iterator7","_step7","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","_templateObject4","AbstractMethodHasImplementation","_ref69","methodName","AbstractPropertyHasInitializer","_ref70","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","_ref71","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","_ref72","modifier","DuplicateModifier","_ref73","EmptyHeritageClauseType","_ref74","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","_ref75","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","_ref76","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","_ref77","InvalidModifierOnTypeParameter","_ref78","InvalidModifierOnTypeParameterPositions","_ref79","InvalidModifiersOrder","_ref80","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","_ref81","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","_ref82","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","_ref83","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","_superClass4","TypeScriptParserMixin","_this26","_len7","_key7","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","_ref84","modified","_this27","_ref84$errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","expectImportAttributesPlugin","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","_iterator8","_step8","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","createIdentifier","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","_this28","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","_this29","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","_this30","tsParseConstraintForInferType","_this31","tsInDisallowConditionalTypesContext","inDisallowConditionalTypesContext","_this32","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","_this33","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","_this34","eatColon","_this35","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","_this36","tsParseHeritageClause","_this37","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","_this38","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","_this39","_this40","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","tsTryParseAndCatch","tsTryParseDeclare","nany","_this41","startType","tsInAmbientContext","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","_this42","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","_this43","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","_iterator9","_step9","isAmbientContext","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","_this44","isInParens","_this45","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","_this46","isSatisfies","checkKeywords","checkDuplicateExports","parseImport","importNode","parseMaybeImportPhase","isAbstractClass","cls","allowMissingInitializer","_iterator10","declarations","_step10","_step10$value","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","_this47","callParseClassMemberWithIsStatic","parseClassMemberWithIsStatic","inAbstractClass","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","_this48","_this49","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","_method$declare","declareClassPrivateMethodInScope","_this50","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","_this51","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","_this52","canHaveLeadingDecorator","_this53","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","_templateObject5","ClassNameIsRequired","UnexpectedSpace","placeholders","_superClass5","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","_superClass6","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","_ref85","_ref86","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","_p","_i4","_expectedKeys","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createImportExpressions","createParenthesizedExpressions","getOptions","opts","_i5","_Object$keys3","_opts$key","ExpressionParser","_LValParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","_this54","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","_this55","_this56","resultError","_resultError$loc","hasYield","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","hasIn","op","prec","inFSharpPipelineDirectBody","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","finishedNode","nextOp","_this57","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseTaggedTemplateExpression","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","parseTemplate","_iterator11","_step11","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseArrowExpression","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","allowSuper","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","inNonArrowFunction","parseNew","parseExprList","parseTemplateElement","isTagged","_this$state3","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","_this$state4","generator","_this58","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","_iterator12","_step12","_this$state5","reservedTest","inStaticBlock","inClassAndNotInNonArrowFunction","inFunction","soloAwait","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","_ExpressionParser","interpreter","parseInterpreterDirective","_i6","_Array$from2","_Array$from2$_i","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifier","startsUsingForOf","_this$lookahead","startsAwaitUsing","parseModuleItem","parseStatementListItem","parseStatementOrSloppyAnnexBFunctionDeclaration","allowLabeledFunction","parseStatement","starttype","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseFunctionStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","inTopLevel","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","_this59","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","hasReturn","discriminant","cases","cur","sawDefault","isCase","_this60","block","handler","clause","finalizer","_this61","_this62","_iterator13","_step13","statementStart","parseBlockOrModuleBlockBody","parsedNonDirective","_this63","_this64","isFor","_this65","hangingDeclaration","isDeclaration","treatFunctionsAsVar","parseClassBody","_this66","hadConstructor","parseClassMemberFromModifier","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_this$state6","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","parseExportFrom","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_node$specifiers3","isTypeExport","assertions","_this$lookahead2","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","_iterator14","_step14","_iterator15","_step15","_iterator16","_step16","_iterator17","_step17","nodes","surrogate","isJSONModuleImport","_ref87","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","parseImportSpecifiersAndAfter","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_StatementParser","_this67","pluginsMap","pluginMap","_iterator18","_step18","_ref88","_ref89","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","_i7","_Object$keys4","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList","_iterator19","_step19"],"sources":["../src/util/location.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error = new SyntaxError();\n    Object.assign(error, properties, { loc, pos: loc.index });\n    if (\"missingPlugin\" in details) {\n      Object.assign(error, { missingPlugin: details.missingPlugin });\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        ) {\n          (node as N.Node as N.EstreeImportExpression).options =\n            node.arguments[1] ?? null;\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length != commentsLen) this.comments.length = commentsLen;\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nconst enum StateFlags {\n  None = 0,\n  Strict = 1 << 0,\n  maybeInArrowParameters = 1 << 1,\n  inType = 1 << 2,\n  noAnonFunctionType = 1 << 3,\n  hasFlowComment = 1 << 4,\n  isAmbientContext = 1 << 5,\n  inAbstractClass = 1 << 6,\n  inDisallowConditionalTypesContext = 1 << 7,\n  soloAwait = 1 << 8,\n  inFSharpPipelineDirectBody = 1 << 9,\n  canStartJSXElement = 1 << 10,\n  containsEsc = 1 << 11,\n}\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\nexport default class State {\n  flags: number = StateFlags.canStartJSXElement;\n\n  get strict(): boolean {\n    return (this.flags & StateFlags.Strict) > 0;\n  }\n  set strict(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.Strict;\n    } else {\n      this.flags &= ~StateFlags.Strict;\n    }\n  }\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  get maybeInArrowParameters(): boolean {\n    return (this.flags & StateFlags.maybeInArrowParameters) > 0;\n  }\n  set maybeInArrowParameters(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.maybeInArrowParameters;\n    } else {\n      this.flags &= ~StateFlags.maybeInArrowParameters;\n    }\n  }\n  get inType(): boolean {\n    return (this.flags & StateFlags.inType) > 0;\n  }\n  set inType(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inType;\n    } else {\n      this.flags &= ~StateFlags.inType;\n    }\n  }\n  get noAnonFunctionType(): boolean {\n    return (this.flags & StateFlags.noAnonFunctionType) > 0;\n  }\n  set noAnonFunctionType(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.noAnonFunctionType;\n    } else {\n      this.flags &= ~StateFlags.noAnonFunctionType;\n    }\n  }\n  get hasFlowComment(): boolean {\n    return (this.flags & StateFlags.hasFlowComment) > 0;\n  }\n  set hasFlowComment(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.hasFlowComment;\n    } else {\n      this.flags &= ~StateFlags.hasFlowComment;\n    }\n  }\n  get isAmbientContext(): boolean {\n    return (this.flags & StateFlags.isAmbientContext) > 0;\n  }\n  set isAmbientContext(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.isAmbientContext;\n    } else {\n      this.flags &= ~StateFlags.isAmbientContext;\n    }\n  }\n  get inAbstractClass(): boolean {\n    return (this.flags & StateFlags.inAbstractClass) > 0;\n  }\n  set inAbstractClass(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inAbstractClass;\n    } else {\n      this.flags &= ~StateFlags.inAbstractClass;\n    }\n  }\n  get inDisallowConditionalTypesContext(): boolean {\n    return (this.flags & StateFlags.inDisallowConditionalTypesContext) > 0;\n  }\n  set inDisallowConditionalTypesContext(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inDisallowConditionalTypesContext;\n    } else {\n      this.flags &= ~StateFlags.inDisallowConditionalTypesContext;\n    }\n  }\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  get soloAwait(): boolean {\n    return (this.flags & StateFlags.soloAwait) > 0;\n  }\n  set soloAwait(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.soloAwait;\n    } else {\n      this.flags &= ~StateFlags.soloAwait;\n    }\n  }\n  get inFSharpPipelineDirectBody(): boolean {\n    return (this.flags & StateFlags.inFSharpPipelineDirectBody) > 0;\n  }\n  set inFSharpPipelineDirectBody(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.inFSharpPipelineDirectBody;\n    } else {\n      this.flags &= ~StateFlags.inFSharpPipelineDirectBody;\n    }\n  }\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  get canStartJSXElement(): boolean {\n    return (this.flags & StateFlags.canStartJSXElement) > 0;\n  }\n  set canStartJSXElement(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.canStartJSXElement;\n    } else {\n      this.flags &= ~StateFlags.canStartJSXElement;\n    }\n  }\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  get containsEsc(): boolean {\n    return (this.flags & StateFlags.containsEsc) > 0;\n  }\n  set containsEsc(value: boolean) {\n    if (value) {\n      this.flags |= StateFlags.containsEsc;\n    } else {\n      this.flags &= ~StateFlags.containsEsc;\n    }\n  }\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectProperty,\n} from \"../types.ts\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags == ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node) {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BindingFlag.TYPE_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingFlag;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwn(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  // TODO: Accesor -> Accessor\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (\n        this.hasPlugin(\"importAttributes\") ||\n        this.hasPlugin(\"importAssertions\")\n      ) {\n        node.options = null;\n      }\n      if (this.eat(tt.comma)) {\n        this.expectImportAttributesPlugin();\n        if (!this.match(tt.parenR)) {\n          node.options = super.parseMaybeAssignAllowIn();\n          this.eat(tt.comma);\n        }\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccesorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccesorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            /* isExport */ false,\n          );\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: parameter.name.name,\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BindingFlag.TYPE_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        hasPlugin(plugins, \"importAssertions\") ||\n        hasPlugin(plugins, \"importAttributes\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (\n    hasPlugin(plugins, \"importAssertions\") &&\n    hasPlugin(plugins, \"importAttributes\")\n  ) {\n    throw new Error(\n      \"Cannot combine importAssertions and importAttributes plugins.\",\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    hasPlugin(plugins, \"optionalChainingAssign\") &&\n    getPluginOption(plugins, \"optionalChainingAssign\", \"version\") !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowNewTargetOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createImportExpressions: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n  annexB: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ImportExpression AST nodes (if false\n  // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n  createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  if (opts == null) {\n    return { ...defaultOptions };\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions) as (keyof Options)[]) {\n    options[key] = opts[key] ?? defaultOptions[key];\n  }\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectImportAttributesPlugin();\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              Errors.ImportCallArgumentTrailingComma,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.options = null;\n    }\n    if (this.eat(tt.comma)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, at, { localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BindingFlag.TYPE_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"const\",\n            },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, key);\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      this.isContextual(tt._module)\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (phase === \"module\" || phase === \"source\") {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `module` in `import module x from \"x\"`, disambiguating\n   * `import module from \"x\"` and `import module from from \"x\"`.\n   *\n   * This function might return an identifier representing the `module`\n   * if it eats `module` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins.\n   *\n   * Note: the proposal has been updated to use `source` instead of `module`,\n   * but it has not been implemented yet.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n  ) {\n    let attributes: N.ImportAttribute[];\n    let useWith = false;\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      } else {\n        this.expectImportAttributesPlugin();\n        attributes = this.parseImportAttributes();\n      }\n      useWith = true;\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport type { PluginList } from \"../plugin-utils.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"mappings":"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CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEx+C,IAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,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","ignoreList":[]}