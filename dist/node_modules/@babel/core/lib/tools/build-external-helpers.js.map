{"version":3,"file":"build-external-helpers.js","names":["helpers","data","require","_generator","_template","_t","_file","_t2","arrayExpression","assignmentExpression","binaryExpression","blockStatement","callExpression","cloneNode","conditionalExpression","exportNamedDeclaration","exportSpecifier","expressionStatement","functionExpression","identifier","memberExpression","objectExpression","program","stringLiteral","unaryExpression","variableDeclaration","variableDeclarator","buildUmdWrapper","replacements","statement","_templateObject","_taggedTemplateLiteral","buildGlobal","allowlist","namespace","body","container","tree","push","buildHelpers","buildModule","refs","unshift","Object","keys","map","name","buildUmd","FACTORY_PARAMETERS","BROWSER_ARGUMENTS","COMMON_ARGUMENTS","AMD_ARGUMENTS","FACTORY_BODY","UMD_ROOT","buildVar","getHelperReference","concat","list","forEach","indexOf","ref","ensure","_helpers$get","get","nodes","apply","_toConsumableArray","_default","outputType","arguments","length","undefined","build","global","module","umd","Error","code"],"sources":["../../src/tools/build-external-helpers.ts"],"sourcesContent":["import * as helpers from \"@babel/helpers\";\nimport generator from \"@babel/generator\";\nimport template from \"@babel/template\";\nimport {\n  arrayExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  exportNamedDeclaration,\n  exportSpecifier,\n  expressionStatement,\n  functionExpression,\n  identifier,\n  memberExpression,\n  objectExpression,\n  program,\n  stringLiteral,\n  unaryExpression,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport File from \"../transformation/file/file.ts\";\nimport type { Replacements } from \"@babel/template\";\n\n// Wrapped to avoid wasting time parsing this when almost no-one uses\n// build-external-helpers.\nconst buildUmdWrapper = (replacements: Replacements) =>\n  template.statement`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  const container = functionExpression(\n    null,\n    [identifier(\"global\")],\n    blockStatement(body),\n  );\n  const tree = program([\n    expressionStatement(\n      callExpression(container, [\n        // typeof global === \"undefined\" ? self : global\n        conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", identifier(\"global\")),\n            stringLiteral(\"undefined\"),\n          ),\n          identifier(\"self\"),\n          identifier(\"global\"),\n        ),\n      ]),\n    ),\n  ]);\n\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(\n        namespace,\n        assignmentExpression(\n          \"=\",\n          memberExpression(identifier(\"global\"), namespace),\n          objectExpression([]),\n        ),\n      ),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return tree;\n}\n\nfunction buildModule(allowlist?: Array<string>) {\n  const body: t.Statement[] = [];\n  const refs = buildHelpers(body, null, allowlist);\n\n  body.unshift(\n    exportNamedDeclaration(\n      null,\n      Object.keys(refs).map(name => {\n        return exportSpecifier(cloneNode(refs[name]), identifier(name));\n      }),\n    ),\n  );\n\n  return program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, identifier(\"global\")),\n    ]),\n  );\n\n  buildHelpers(body, namespace, allowlist);\n\n  return program([\n    buildUmdWrapper({\n      FACTORY_PARAMETERS: identifier(\"global\"),\n      BROWSER_ARGUMENTS: assignmentExpression(\n        \"=\",\n        memberExpression(identifier(\"root\"), namespace),\n        objectExpression([]),\n      ),\n      COMMON_ARGUMENTS: identifier(\"exports\"),\n      AMD_ARGUMENTS: arrayExpression([stringLiteral(\"exports\")]),\n      FACTORY_BODY: body,\n      UMD_ROOT: identifier(\"this\"),\n    }),\n  ]);\n}\n\nfunction buildVar(allowlist?: Array<string>) {\n  const namespace = identifier(\"babelHelpers\");\n\n  const body: t.Statement[] = [];\n  body.push(\n    variableDeclaration(\"var\", [\n      variableDeclarator(namespace, objectExpression([])),\n    ]),\n  );\n  const tree = program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression,\n  allowlist?: Array<string>,\n): Record<string, t.MemberExpression>;\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: null,\n  allowlist?: Array<string>,\n): Record<string, t.Identifier>;\n\nfunction buildHelpers(\n  body: t.Statement[],\n  namespace: t.Expression | null,\n  allowlist?: Array<string>,\n) {\n  const getHelperReference = (name: string) => {\n    return namespace\n      ? memberExpression(namespace, identifier(name))\n      : identifier(`_${name}`);\n  };\n\n  const refs: { [key: string]: t.Identifier | t.MemberExpression } = {};\n  helpers.list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n\n    const ref = (refs[name] = getHelperReference(name));\n\n    helpers.ensure(name, File);\n    const { nodes } = helpers.get(name, getHelperReference, ref);\n\n    body.push(...nodes);\n  });\n  return refs;\n}\nexport default function (\n  allowlist?: Array<string>,\n  outputType: \"global\" | \"module\" | \"umd\" | \"var\" = \"global\",\n) {\n  let tree: t.Program;\n\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar,\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return generator(tree).code;\n}\n"],"mappings":"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","ignoreList":[]}