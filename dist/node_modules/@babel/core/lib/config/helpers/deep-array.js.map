{"version":3,"file":"deep-array.js","names":["finalize","deepArr","Object","freeze","flattenToSet","arr","result","Set","stack","length","_iterator","_createForOfIteratorHelper","pop","_step","s","n","done","el","value","Array","isArray","push","add","err","e","f"],"sources":["../../../src/config/helpers/deep-array.ts"],"sourcesContent":["export type DeepArray<T> = Array<T | ReadonlyDeepArray<T>>;\n\n// Just to make sure that DeepArray<T> is not assignable to ReadonlyDeepArray<T>\ndeclare const __marker: unique symbol;\nexport type ReadonlyDeepArray<T> = ReadonlyArray<T | ReadonlyDeepArray<T>> & {\n  [__marker]: true;\n};\n\nexport function finalize<T>(deepArr: DeepArray<T>): ReadonlyDeepArray<T> {\n  return Object.freeze(deepArr) as ReadonlyDeepArray<T>;\n}\n\nexport function flattenToSet<T extends string>(\n  arr: ReadonlyDeepArray<T>,\n): Set<T> {\n  const result = new Set<T>();\n  const stack = [arr];\n  while (stack.length > 0) {\n    for (const el of stack.pop()) {\n      if (Array.isArray(el)) stack.push(el as ReadonlyDeepArray<T>);\n      else result.add(el as T);\n    }\n  }\n  return result;\n}\n"],"mappings":";;;;;;;;;;AAQO,SAASA,QAAQA,CAAIC,OAAqB,EAAwB;EACvE,OAAOC,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;AAC/B;AAEO,SAASG,YAAYA,CAC1BC,GAAyB,EACjB;EACR,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAAI,CAAC;EAC3B,IAAMC,KAAK,GAAG,CAACH,GAAG,CAAC;EACnB,OAAOG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CACNH,KAAK,CAACI,GAAG,CAAC,CAAC;MAAAC,KAAA;IAAA;MAA5B,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA8B;QAAA,IAAnBC,EAAE,GAAAJ,KAAA,CAAAK,KAAA;QACX,IAAIC,KAAK,CAACC,OAAO,CAACH,EAAE,CAAC,EAAET,KAAK,CAACa,IAAI,CAACJ,EAA0B,CAAC,CAAC,KACzDX,MAAM,CAACgB,GAAG,CAACL,EAAO,CAAC;MAC1B;IAAA,SAAAM,GAAA;MAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;IAAA;MAAAb,SAAA,CAAAe,CAAA;IAAA;EACF;EACA,OAAOnB,MAAM;AACf;AAAC","ignoreList":[]}