{"version":3,"file":"configuration.js","names":["readConfigCode","_marked2","_regeneratorRuntime","mark","findRelativeConfig","_marked3","loadConfig","_marked4","resolveShowConfigPath","_typeof","o","Symbol","iterator","constructor","prototype","_debug","data","require","_fs","_path","_json","_gensync","_caching","_configApi","_utils","_moduleTypes","_patternToRegex","_configError","fs","_rewriteStackTrace","debug","ROOT_CONFIG_FILENAMES","exports","RELATIVE_CONFIG_FILENAMES","BABELIGNORE_FILENAME","runConfig","makeWeakCache","options","cache","wrap","runConfig$","_context","prev","next","delegateYield","abrupt","endHiddenCallStack","makeConfigAPI","cacheNeedsConfiguration","configured","stop","filepath","_yield$runConfig","readConfigCode$","_context2","existsSync","t0","t1","Array","isArray","then","throwConfigError","buildConfigFileObject","_marked","cfboaf","WeakMap","configFilesByFilepath","get","set","Map","configFile","dirname","packageToBabelConfig","makeWeakCacheSync","file","babel","readConfigJSON5","makeStaticFileCache","content","parse","err","concat","message","readIgnoreConfig","ignoreDir","ignorePatterns","split","map","line","replace","trim","filter","_iterator","_createForOfIteratorHelper","_step","s","n","done","pattern","value","e","f","ignore","findConfigUpwards","rootDir","_iterator2","_step2","filename","join","nextDir","packageData","envName","caller","config","_iterator3","_step3","loc","_packageData$pkg","ignoreLoc","findRelativeConfig$","_context3","directories","loadOneConfig","pkg","t2","finish","findRootConfig","names","previousConfig","arguments","length","undefined","_callee","configs","_callee$","_context4","all","readConfig","reduce","basename","name","conf","loadConfig$","_context5","v","w","process","versions","node","resolve","r","_ref","_ref$paths","_slicedToArray","paths","b","M","_findPath","_nodeModulePaths","Error","code","ext","extname","targetPath","absolutePath","stats","resolveShowConfigPath$","_context6","env","BABEL_SHOW_CONFIG_FOR","stat","isFile"],"sources":["../../../src/config/files/configuration.ts"],"sourcesContent":["import buildDebug from \"debug\";\nimport nodeFs from \"fs\";\nimport path from \"path\";\nimport json5 from \"json5\";\nimport gensync from \"gensync\";\nimport type { Handler } from \"gensync\";\nimport { makeWeakCache, makeWeakCacheSync } from \"../caching.ts\";\nimport type { CacheConfigurator } from \"../caching.ts\";\nimport { makeConfigAPI } from \"../helpers/config-api.ts\";\nimport type { ConfigAPI } from \"../helpers/config-api.ts\";\nimport { makeStaticFileCache } from \"./utils.ts\";\nimport loadCodeDefault from \"./module-types.ts\";\nimport pathPatternToRegex from \"../pattern-to-regex.ts\";\nimport type { FilePackageData, RelativeConfig, ConfigFile } from \"./types.ts\";\nimport type { CallerMetadata, InputOptions } from \"../validation/options.ts\";\nimport ConfigError from \"../../errors/config-error.ts\";\n\nimport * as fs from \"../../gensync-utils/fs.ts\";\n\nimport { createRequire } from \"module\";\nimport { endHiddenCallStack } from \"../../errors/rewrite-stack-trace.ts\";\nconst require = createRequire(import.meta.url);\n\nconst debug = buildDebug(\"babel:config:loading:files:configuration\");\n\nexport const ROOT_CONFIG_FILENAMES = [\n  \"babel.config.js\",\n  \"babel.config.cjs\",\n  \"babel.config.mjs\",\n  \"babel.config.json\",\n  \"babel.config.cts\",\n];\nconst RELATIVE_CONFIG_FILENAMES = [\n  \".babelrc\",\n  \".babelrc.js\",\n  \".babelrc.cjs\",\n  \".babelrc.mjs\",\n  \".babelrc.json\",\n  \".babelrc.cts\",\n];\n\nconst BABELIGNORE_FILENAME = \".babelignore\";\n\ntype ConfigCacheData = {\n  envName: string;\n  caller: CallerMetadata | undefined;\n};\n\nconst runConfig = makeWeakCache(function* runConfig(\n  options: Function,\n  cache: CacheConfigurator<ConfigCacheData>,\n): Handler<{\n  options: InputOptions | null;\n  cacheNeedsConfiguration: boolean;\n}> {\n  // @ts-expect-error - if we want to make it possible to use async configs\n  yield* [];\n\n  return {\n    options: endHiddenCallStack(options as any as (api: ConfigAPI) => {})(\n      makeConfigAPI(cache),\n    ),\n    cacheNeedsConfiguration: !cache.configured(),\n  };\n});\n\nfunction* readConfigCode(\n  filepath: string,\n  data: ConfigCacheData,\n): Handler<ConfigFile | null> {\n  if (!nodeFs.existsSync(filepath)) return null;\n\n  let options = yield* loadCodeDefault(\n    filepath,\n    \"You appear to be using a native ECMAScript module configuration \" +\n      \"file, which is only supported when running Babel asynchronously.\",\n  );\n\n  let cacheNeedsConfiguration = false;\n  if (typeof options === \"function\") {\n    ({ options, cacheNeedsConfiguration } = yield* runConfig(options, data));\n  }\n\n  if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n    throw new ConfigError(\n      `Configuration should be an exported JavaScript object.`,\n      filepath,\n    );\n  }\n\n  // @ts-expect-error todo(flow->ts)\n  if (typeof options.then === \"function\") {\n    // @ts-expect-error We use ?. in case options is a thenable\n    // but not a promise\n    options.catch?.(() => {});\n\n    throw new ConfigError(\n      `You appear to be using an async configuration, ` +\n        `which your current version of Babel does not support. ` +\n        `We may add support for this in the future, ` +\n        `but if you're on the most recent version of @babel/core and still ` +\n        `seeing this error, then you'll need to synchronously return your config.`,\n      filepath,\n    );\n  }\n\n  if (cacheNeedsConfiguration) throwConfigError(filepath);\n\n  return buildConfigFileObject(options, filepath);\n}\n\n// We cache the generated ConfigFile object rather than creating a new one\n// every time, so that it can be used as a cache key in other functions.\nconst cfboaf /* configFilesByOptionsAndFilepath */ = new WeakMap<\n  InputOptions,\n  Map<string, ConfigFile>\n>();\nfunction buildConfigFileObject(\n  options: InputOptions,\n  filepath: string,\n): ConfigFile {\n  let configFilesByFilepath = cfboaf.get(options);\n  if (!configFilesByFilepath) {\n    cfboaf.set(options, (configFilesByFilepath = new Map()));\n  }\n\n  let configFile = configFilesByFilepath.get(filepath);\n  if (!configFile) {\n    configFile = {\n      filepath,\n      dirname: path.dirname(filepath),\n      options,\n    };\n    configFilesByFilepath.set(filepath, configFile);\n  }\n\n  return configFile;\n}\n\nconst packageToBabelConfig = makeWeakCacheSync(\n  (file: ConfigFile): ConfigFile | null => {\n    const babel: unknown = file.options[\"babel\"];\n\n    if (typeof babel === \"undefined\") return null;\n\n    if (typeof babel !== \"object\" || Array.isArray(babel) || babel === null) {\n      throw new ConfigError(`.babel property must be an object`, file.filepath);\n    }\n\n    return {\n      filepath: file.filepath,\n      dirname: file.dirname,\n      options: babel,\n    };\n  },\n);\n\nconst readConfigJSON5 = makeStaticFileCache((filepath, content): ConfigFile => {\n  let options;\n  try {\n    options = json5.parse(content);\n  } catch (err) {\n    throw new ConfigError(\n      `Error while parsing config - ${err.message}`,\n      filepath,\n    );\n  }\n\n  if (!options) throw new ConfigError(`No config detected`, filepath);\n\n  if (typeof options !== \"object\") {\n    throw new ConfigError(`Config returned typeof ${typeof options}`, filepath);\n  }\n  if (Array.isArray(options)) {\n    throw new ConfigError(`Expected config object but found array`, filepath);\n  }\n\n  delete options[\"$schema\"];\n\n  return {\n    filepath,\n    dirname: path.dirname(filepath),\n    options,\n  };\n});\n\nconst readIgnoreConfig = makeStaticFileCache((filepath, content) => {\n  const ignoreDir = path.dirname(filepath);\n  const ignorePatterns = content\n    .split(\"\\n\")\n    .map<string>(line => line.replace(/#(.*?)$/, \"\").trim())\n    .filter(line => !!line);\n\n  for (const pattern of ignorePatterns) {\n    if (pattern[0] === \"!\") {\n      throw new ConfigError(\n        `Negation of file paths is not supported.`,\n        filepath,\n      );\n    }\n  }\n\n  return {\n    filepath,\n    dirname: path.dirname(filepath),\n    ignore: ignorePatterns.map(pattern =>\n      pathPatternToRegex(pattern, ignoreDir),\n    ),\n  };\n});\n\nexport function findConfigUpwards(rootDir: string): string | null {\n  let dirname = rootDir;\n  for (;;) {\n    for (const filename of ROOT_CONFIG_FILENAMES) {\n      if (nodeFs.existsSync(path.join(dirname, filename))) {\n        return dirname;\n      }\n    }\n\n    const nextDir = path.dirname(dirname);\n    if (dirname === nextDir) break;\n    dirname = nextDir;\n  }\n\n  return null;\n}\n\nexport function* findRelativeConfig(\n  packageData: FilePackageData,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<RelativeConfig> {\n  let config = null;\n  let ignore = null;\n\n  const dirname = path.dirname(packageData.filepath);\n\n  for (const loc of packageData.directories) {\n    if (!config) {\n      config = yield* loadOneConfig(\n        RELATIVE_CONFIG_FILENAMES,\n        loc,\n        envName,\n        caller,\n        packageData.pkg?.dirname === loc\n          ? packageToBabelConfig(packageData.pkg)\n          : null,\n      );\n    }\n\n    if (!ignore) {\n      const ignoreLoc = path.join(loc, BABELIGNORE_FILENAME);\n      ignore = yield* readIgnoreConfig(ignoreLoc);\n\n      if (ignore) {\n        debug(\"Found ignore %o from %o.\", ignore.filepath, dirname);\n      }\n    }\n  }\n\n  return { config, ignore };\n}\n\nexport function findRootConfig(\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);\n}\n\nfunction* loadOneConfig(\n  names: string[],\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n  previousConfig: ConfigFile | null = null,\n): Handler<ConfigFile | null> {\n  const configs = yield* gensync.all(\n    names.map(filename =>\n      readConfig(path.join(dirname, filename), envName, caller),\n    ),\n  );\n  const config = configs.reduce((previousConfig: ConfigFile | null, config) => {\n    if (config && previousConfig) {\n      throw new ConfigError(\n        `Multiple configuration files found. Please remove one:\\n` +\n          ` - ${path.basename(previousConfig.filepath)}\\n` +\n          ` - ${config.filepath}\\n` +\n          `from ${dirname}`,\n      );\n    }\n\n    return config || previousConfig;\n  }, previousConfig);\n\n  if (config) {\n    debug(\"Found configuration %o from %o.\", config.filepath, dirname);\n  }\n  return config;\n}\n\nexport function* loadConfig(\n  name: string,\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile> {\n  const filepath = require.resolve(name, { paths: [dirname] });\n\n  const conf = yield* readConfig(filepath, envName, caller);\n  if (!conf) {\n    throw new ConfigError(\n      `Config file contains no configuration data`,\n      filepath,\n    );\n  }\n\n  debug(\"Loaded config %o from %o.\", name, dirname);\n  return conf;\n}\n\n/**\n * Read the given config file, returning the result. Returns null if no config was found, but will\n * throw if there are parsing errors while loading a config.\n */\nfunction readConfig(\n  filepath: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n): Handler<ConfigFile | null> {\n  const ext = path.extname(filepath);\n  switch (ext) {\n    case \".js\":\n    case \".cjs\":\n    case \".mjs\":\n    case \".cts\":\n      return readConfigCode(filepath, { envName, caller });\n    default:\n      return readConfigJSON5(filepath);\n  }\n}\n\nexport function* resolveShowConfigPath(\n  dirname: string,\n): Handler<string | null> {\n  const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;\n  if (targetPath != null) {\n    const absolutePath = path.resolve(dirname, targetPath);\n    const stats = yield* fs.stat(absolutePath);\n    if (!stats.isFile()) {\n      throw new Error(\n        `${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`,\n      );\n    }\n    return absolutePath;\n  }\n  return null;\n}\n\nfunction throwConfigError(filepath: string): never {\n  throw new ConfigError(\n    `\\\nCaching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};`,\n    filepath,\n  );\n}\n"],"mappings":"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","ignoreList":[]}