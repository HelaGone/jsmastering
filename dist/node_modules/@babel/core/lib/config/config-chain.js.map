{"version":3,"file":"config-chain.js","names":["buildPresetChain","_marked2","_regeneratorRuntime","mark","buildRootChain","_marked3","loadFileChain","_marked4","mergeExtendsChain","_path","data","require","_debug","_options","_patternToRegex","_printer","_rewriteStackTrace","_configError","_index","_caching","_configDescriptors","debug","arg","context","chain","wrap","buildPresetChain$","_context","prev","next","delegateYield","buildPresetChainWalker","t0","abrupt","plugins","dedupDescriptors","presets","options","map","o","normalizeOptions","files","Set","stop","_marked","exports","makeChainWalker","root","preset","loadPresetDescriptors","env","envName","loadPresetEnvDescriptors","overrides","index","loadPresetOverridesDescriptors","overridesEnv","loadPresetOverridesEnvDescriptors","createLogger","makeWeakCacheSync","buildRootDescriptors","alias","createUncachedDescriptors","makeStrongCacheSync","buildEnvDescriptors","buildOverrideDescriptors","buildOverrideEnvDescriptors","opts","configReport","babelRcReport","programmaticLogger","programmaticChain","programmaticReport","configFile","babelrc","babelrcRoots","babelrcRootsDirectory","configFileChain","configFileLogger","validatedFile","result","ignoreFile","babelrcFile","isIgnored","fileChain","pkgData","_yield","_validatedFile","babelrcLogger","_result","buildRootChain$","_context2","ConfigPrinter","loadProgrammaticChain","dirname","cwd","undefined","output","t1","loadConfig","caller","t2","findRootConfig","t3","emptyChain","validateConfigFile","t4","t5","mergeChain","filename","findPackageData","t6","babelrcLoadEnabled","findRelativeConfig","t7","ignore","config","add","filepath","shouldIgnore","validateBabelrcFile","t8","t9","showConfig","console","log","concat","filter","x","join","fileHandling","absoluteRoot","directories","indexOf","babelrcPatterns","Array","isArray","pat","resolve","length","some","directory","matchPattern","file","validate","validateExtendFile","input","createCachedDescriptors","baseLogger","buildProgrammaticLogger","loadFileChainWalker","loadFileDescriptors","loadFileEnvDescriptors","loadFileOverridesDescriptors","loadFileOverridesEnvDescriptors","buildFileLogger","loadFileChain$","_context3","configure","ChainFormatter","Config","_ref","descriptors","_","_context$caller","Programmatic","callerName","name","_ref2","_options$env","_ref3","_options$overrides","Error","_ref4","_options$overrides2","_override$env","override","_ref5","chainWalker","arguments","_callee","flattenedConfigs","rootOpts","envOpts","logger","_i","_flattenedConfigs","_flattenedConfigs$_i","_callee$","_context4","configIsApplicable","push","forEach","overrideOps","overrideEnvOpts","_ref6","_ref6$config$options","only","mergeChainOpts","mergeExtendsChain$","_context5","has","from","target","source","_target$options","_target$plugins","_target$presets","apply","_toConsumableArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","_ref7","_callee2","_target$plugins2","_target$presets2","_callee2$","_context6","call","t10","t11","Object","assign","passPerPreset","test","include","exclude","hasOwnProperty","sourceMaps","sourceMap","items","Map","_iterator2","_step2","item","fnKey","nameMap","get","set","desc","ownPass","reduce","acc","_ref8","configName","configFieldIsApplicable","patterns","matchesPatterns","ignoreListReplacer","_key","RegExp","String","_context$filename","message","JSON","stringify","_context$filename2","pattern","pathToTest","endHiddenCallStack"],"sources":["../../src/config/config-chain.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { validate } from \"./validation/options.ts\";\nimport type {\n  ValidatedOptions,\n  IgnoreList,\n  ConfigApplicableTest,\n  BabelrcSearch,\n  CallerMetadata,\n  IgnoreItem,\n} from \"./validation/options.ts\";\nimport pathPatternToRegex from \"./pattern-to-regex.ts\";\nimport { ConfigPrinter, ChainFormatter } from \"./printer.ts\";\nimport type { ReadonlyDeepArray } from \"./helpers/deep-array.ts\";\n\nimport { endHiddenCallStack } from \"../errors/rewrite-stack-trace.ts\";\nimport ConfigError from \"../errors/config-error.ts\";\nimport type { PluginAPI, PresetAPI } from \"./helpers/config-api.ts\";\n\nconst debug = buildDebug(\"babel:config:config-chain\");\n\nimport {\n  findPackageData,\n  findRelativeConfig,\n  findRootConfig,\n  loadConfig,\n} from \"./files/index.ts\";\nimport type { ConfigFile, IgnoreFile, FilePackageData } from \"./files/index.ts\";\n\nimport { makeWeakCacheSync, makeStrongCacheSync } from \"./caching.ts\";\n\nimport {\n  createCachedDescriptors,\n  createUncachedDescriptors,\n} from \"./config-descriptors.ts\";\nimport type {\n  UnloadedDescriptor,\n  OptionsAndDescriptors,\n  ValidatedFile,\n} from \"./config-descriptors.ts\";\n\nexport type ConfigChain = {\n  plugins: Array<UnloadedDescriptor<PluginAPI>>;\n  presets: Array<UnloadedDescriptor<PresetAPI>>;\n  options: Array<ValidatedOptions>;\n  files: Set<string>;\n};\n\nexport type PresetInstance = {\n  options: ValidatedOptions;\n  alias: string;\n  dirname: string;\n  externalDependencies: ReadonlyDeepArray<string>;\n};\n\nexport type ConfigContext = {\n  filename: string | undefined;\n  cwd: string;\n  root: string;\n  envName: string;\n  caller: CallerMetadata | undefined;\n  showConfig: boolean;\n};\n\n/**\n * Build a config chain for a given preset.\n */\nexport function* buildPresetChain(\n  arg: PresetInstance,\n  context: any,\n): Handler<ConfigChain | null> {\n  const chain = yield* buildPresetChainWalker(arg, context);\n  if (!chain) return null;\n\n  return {\n    plugins: dedupDescriptors(chain.plugins),\n    presets: dedupDescriptors(chain.presets),\n    options: chain.options.map(o => normalizeOptions(o)),\n    files: new Set(),\n  };\n}\n\nexport const buildPresetChainWalker = makeChainWalker<PresetInstance>({\n  root: preset => loadPresetDescriptors(preset),\n  env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),\n  overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),\n  overridesEnv: (preset, index, envName) =>\n    loadPresetOverridesEnvDescriptors(preset)(index)(envName),\n  createLogger: () => () => {}, // Currently we don't support logging how preset is expanded\n});\nconst loadPresetDescriptors = makeWeakCacheSync((preset: PresetInstance) =>\n  buildRootDescriptors(preset, preset.alias, createUncachedDescriptors),\n);\nconst loadPresetEnvDescriptors = makeWeakCacheSync((preset: PresetInstance) =>\n  makeStrongCacheSync((envName: string) =>\n    buildEnvDescriptors(\n      preset,\n      preset.alias,\n      createUncachedDescriptors,\n      envName,\n    ),\n  ),\n);\nconst loadPresetOverridesDescriptors = makeWeakCacheSync(\n  (preset: PresetInstance) =>\n    makeStrongCacheSync((index: number) =>\n      buildOverrideDescriptors(\n        preset,\n        preset.alias,\n        createUncachedDescriptors,\n        index,\n      ),\n    ),\n);\nconst loadPresetOverridesEnvDescriptors = makeWeakCacheSync(\n  (preset: PresetInstance) =>\n    makeStrongCacheSync((index: number) =>\n      makeStrongCacheSync((envName: string) =>\n        buildOverrideEnvDescriptors(\n          preset,\n          preset.alias,\n          createUncachedDescriptors,\n          index,\n          envName,\n        ),\n      ),\n    ),\n);\n\nexport type FileHandling = \"transpile\" | \"ignored\" | \"unsupported\";\nexport type RootConfigChain = ConfigChain & {\n  babelrc: ConfigFile | void;\n  config: ConfigFile | void;\n  ignore: IgnoreFile | void;\n  fileHandling: FileHandling;\n  files: Set<string>;\n};\n\n/**\n * Build a config chain for Babel's full root configuration.\n */\nexport function* buildRootChain(\n  opts: ValidatedOptions,\n  context: ConfigContext,\n): Handler<RootConfigChain | null> {\n  let configReport, babelRcReport;\n  const programmaticLogger = new ConfigPrinter();\n  const programmaticChain = yield* loadProgrammaticChain(\n    {\n      options: opts,\n      dirname: context.cwd,\n    },\n    context,\n    undefined,\n    programmaticLogger,\n  );\n  if (!programmaticChain) return null;\n  const programmaticReport = yield* programmaticLogger.output();\n\n  let configFile;\n  if (typeof opts.configFile === \"string\") {\n    configFile = yield* loadConfig(\n      opts.configFile,\n      context.cwd,\n      context.envName,\n      context.caller,\n    );\n  } else if (opts.configFile !== false) {\n    configFile = yield* findRootConfig(\n      context.root,\n      context.envName,\n      context.caller,\n    );\n  }\n\n  let { babelrc, babelrcRoots } = opts;\n  let babelrcRootsDirectory = context.cwd;\n\n  const configFileChain = emptyChain();\n  const configFileLogger = new ConfigPrinter();\n  if (configFile) {\n    const validatedFile = validateConfigFile(configFile);\n    const result = yield* loadFileChain(\n      validatedFile,\n      context,\n      undefined,\n      configFileLogger,\n    );\n    if (!result) return null;\n    configReport = yield* configFileLogger.output();\n\n    // Allow config files to toggle `.babelrc` resolution on and off and\n    // specify where the roots are.\n    if (babelrc === undefined) {\n      babelrc = validatedFile.options.babelrc;\n    }\n    if (babelrcRoots === undefined) {\n      babelrcRootsDirectory = validatedFile.dirname;\n      babelrcRoots = validatedFile.options.babelrcRoots;\n    }\n\n    mergeChain(configFileChain, result);\n  }\n\n  let ignoreFile, babelrcFile;\n  let isIgnored = false;\n  const fileChain = emptyChain();\n  // resolve all .babelrc files\n  if (\n    (babelrc === true || babelrc === undefined) &&\n    typeof context.filename === \"string\"\n  ) {\n    const pkgData = yield* findPackageData(context.filename);\n\n    if (\n      pkgData &&\n      babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)\n    ) {\n      ({ ignore: ignoreFile, config: babelrcFile } = yield* findRelativeConfig(\n        pkgData,\n        context.envName,\n        context.caller,\n      ));\n\n      if (ignoreFile) {\n        fileChain.files.add(ignoreFile.filepath);\n      }\n\n      if (\n        ignoreFile &&\n        shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)\n      ) {\n        isIgnored = true;\n      }\n\n      if (babelrcFile && !isIgnored) {\n        const validatedFile = validateBabelrcFile(babelrcFile);\n        const babelrcLogger = new ConfigPrinter();\n        const result = yield* loadFileChain(\n          validatedFile,\n          context,\n          undefined,\n          babelrcLogger,\n        );\n        if (!result) {\n          isIgnored = true;\n        } else {\n          babelRcReport = yield* babelrcLogger.output();\n          mergeChain(fileChain, result);\n        }\n      }\n\n      if (babelrcFile && isIgnored) {\n        fileChain.files.add(babelrcFile.filepath);\n      }\n    }\n  }\n\n  if (context.showConfig) {\n    console.log(\n      `Babel configs on \"${context.filename}\" (ascending priority):\\n` +\n        // print config by the order of ascending priority\n        [configReport, babelRcReport, programmaticReport]\n          .filter(x => !!x)\n          .join(\"\\n\\n\") +\n        \"\\n-----End Babel configs-----\",\n    );\n  }\n  // Insert file chain in front so programmatic options have priority\n  // over configuration file chain items.\n  const chain = mergeChain(\n    mergeChain(mergeChain(emptyChain(), configFileChain), fileChain),\n    programmaticChain,\n  );\n\n  return {\n    plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),\n    presets: isIgnored ? [] : dedupDescriptors(chain.presets),\n    options: isIgnored ? [] : chain.options.map(o => normalizeOptions(o)),\n    fileHandling: isIgnored ? \"ignored\" : \"transpile\",\n    ignore: ignoreFile || undefined,\n    babelrc: babelrcFile || undefined,\n    config: configFile || undefined,\n    files: chain.files,\n  };\n}\n\nfunction babelrcLoadEnabled(\n  context: ConfigContext,\n  pkgData: FilePackageData,\n  babelrcRoots: BabelrcSearch | undefined,\n  babelrcRootsDirectory: string,\n): boolean {\n  if (typeof babelrcRoots === \"boolean\") return babelrcRoots;\n\n  const absoluteRoot = context.root;\n\n  // Fast path to avoid having to match patterns if the babelrc is just\n  // loading in the standard root directory.\n  if (babelrcRoots === undefined) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  let babelrcPatterns = babelrcRoots;\n  if (!Array.isArray(babelrcPatterns)) {\n    babelrcPatterns = [babelrcPatterns as IgnoreItem];\n  }\n  babelrcPatterns = babelrcPatterns.map(pat => {\n    return typeof pat === \"string\"\n      ? path.resolve(babelrcRootsDirectory, pat)\n      : pat;\n  });\n\n  // Fast path to avoid having to match patterns if the babelrc is just\n  // loading in the standard root directory.\n  if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {\n    return pkgData.directories.indexOf(absoluteRoot) !== -1;\n  }\n\n  return babelrcPatterns.some(pat => {\n    if (typeof pat === \"string\") {\n      pat = pathPatternToRegex(pat, babelrcRootsDirectory);\n    }\n\n    return pkgData.directories.some(directory => {\n      return matchPattern(pat, babelrcRootsDirectory, directory, context);\n    });\n  });\n}\n\nconst validateConfigFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"configfile\", file.options, file.filepath),\n  }),\n);\n\nconst validateBabelrcFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"babelrcfile\", file.options, file.filepath),\n  }),\n);\n\nconst validateExtendFile = makeWeakCacheSync(\n  (file: ConfigFile): ValidatedFile => ({\n    filepath: file.filepath,\n    dirname: file.dirname,\n    options: validate(\"extendsfile\", file.options, file.filepath),\n  }),\n);\n\n/**\n * Build a config chain for just the programmatic options passed into Babel.\n */\nconst loadProgrammaticChain = makeChainWalker({\n  root: input => buildRootDescriptors(input, \"base\", createCachedDescriptors),\n  env: (input, envName) =>\n    buildEnvDescriptors(input, \"base\", createCachedDescriptors, envName),\n  overrides: (input, index) =>\n    buildOverrideDescriptors(input, \"base\", createCachedDescriptors, index),\n  overridesEnv: (input, index, envName) =>\n    buildOverrideEnvDescriptors(\n      input,\n      \"base\",\n      createCachedDescriptors,\n      index,\n      envName,\n    ),\n  createLogger: (input, context, baseLogger) =>\n    buildProgrammaticLogger(input, context, baseLogger),\n});\n\n/**\n * Build a config chain for a given file.\n */\nconst loadFileChainWalker = makeChainWalker<ValidatedFile>({\n  root: file => loadFileDescriptors(file),\n  env: (file, envName) => loadFileEnvDescriptors(file)(envName),\n  overrides: (file, index) => loadFileOverridesDescriptors(file)(index),\n  overridesEnv: (file, index, envName) =>\n    loadFileOverridesEnvDescriptors(file)(index)(envName),\n  createLogger: (file, context, baseLogger) =>\n    buildFileLogger(file.filepath, context, baseLogger),\n});\n\nfunction* loadFileChain(\n  input: ValidatedFile,\n  context: ConfigContext,\n  files: Set<ConfigFile>,\n  baseLogger: ConfigPrinter,\n) {\n  const chain = yield* loadFileChainWalker(input, context, files, baseLogger);\n  chain?.files.add(input.filepath);\n\n  return chain;\n}\n\nconst loadFileDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  buildRootDescriptors(file, file.filepath, createUncachedDescriptors),\n);\nconst loadFileEnvDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  makeStrongCacheSync((envName: string) =>\n    buildEnvDescriptors(\n      file,\n      file.filepath,\n      createUncachedDescriptors,\n      envName,\n    ),\n  ),\n);\nconst loadFileOverridesDescriptors = makeWeakCacheSync((file: ValidatedFile) =>\n  makeStrongCacheSync((index: number) =>\n    buildOverrideDescriptors(\n      file,\n      file.filepath,\n      createUncachedDescriptors,\n      index,\n    ),\n  ),\n);\nconst loadFileOverridesEnvDescriptors = makeWeakCacheSync(\n  (file: ValidatedFile) =>\n    makeStrongCacheSync((index: number) =>\n      makeStrongCacheSync((envName: string) =>\n        buildOverrideEnvDescriptors(\n          file,\n          file.filepath,\n          createUncachedDescriptors,\n          index,\n          envName,\n        ),\n      ),\n    ),\n);\n\nfunction buildFileLogger(\n  filepath: string,\n  context: ConfigContext,\n  baseLogger: ConfigPrinter | void,\n) {\n  if (!baseLogger) {\n    return () => {};\n  }\n  return baseLogger.configure(context.showConfig, ChainFormatter.Config, {\n    filepath,\n  });\n}\n\nfunction buildRootDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n) {\n  return descriptors(dirname, options, alias);\n}\n\nfunction buildProgrammaticLogger(\n  _: unknown,\n  context: ConfigContext,\n  baseLogger: ConfigPrinter | void,\n) {\n  if (!baseLogger) {\n    return () => {};\n  }\n  return baseLogger.configure(context.showConfig, ChainFormatter.Programmatic, {\n    callerName: context.caller?.name,\n  });\n}\n\nfunction buildEnvDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  envName: string,\n) {\n  const opts = options.env?.[envName];\n  return opts ? descriptors(dirname, opts, `${alias}.env[\"${envName}\"]`) : null;\n}\n\nfunction buildOverrideDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  index: number,\n) {\n  const opts = options.overrides?.[index];\n  if (!opts) throw new Error(\"Assertion failure - missing override\");\n\n  return descriptors(dirname, opts, `${alias}.overrides[${index}]`);\n}\n\nfunction buildOverrideEnvDescriptors(\n  { dirname, options }: Partial<ValidatedFile>,\n  alias: string,\n  descriptors: (\n    dirname: string,\n    options: ValidatedOptions,\n    alias: string,\n  ) => OptionsAndDescriptors,\n  index: number,\n  envName: string,\n) {\n  const override = options.overrides?.[index];\n  if (!override) throw new Error(\"Assertion failure - missing override\");\n\n  const opts = override.env?.[envName];\n  return opts\n    ? descriptors(\n        dirname,\n        opts,\n        `${alias}.overrides[${index}].env[\"${envName}\"]`,\n      )\n    : null;\n}\n\nfunction makeChainWalker<\n  ArgT extends {\n    options: ValidatedOptions;\n    dirname: string;\n    filepath?: string;\n  },\n>({\n  root,\n  env,\n  overrides,\n  overridesEnv,\n  createLogger,\n}: {\n  root: (configEntry: ArgT) => OptionsAndDescriptors;\n  env: (configEntry: ArgT, env: string) => OptionsAndDescriptors | null;\n  overrides: (configEntry: ArgT, index: number) => OptionsAndDescriptors;\n  overridesEnv: (\n    configEntry: ArgT,\n    index: number,\n    env: string,\n  ) => OptionsAndDescriptors | null;\n  createLogger: (\n    configEntry: ArgT,\n    context: ConfigContext,\n    printer: ConfigPrinter | void,\n  ) => (\n    opts: OptionsAndDescriptors,\n    index?: number | null,\n    env?: string | null,\n  ) => void;\n}): (\n  configEntry: ArgT,\n  context: ConfigContext,\n  files?: Set<ConfigFile>,\n  baseLogger?: ConfigPrinter,\n) => Handler<ConfigChain | null> {\n  return function* chainWalker(input, context, files = new Set(), baseLogger) {\n    const { dirname } = input;\n\n    const flattenedConfigs: Array<{\n      config: OptionsAndDescriptors;\n      index: number | undefined | null;\n      envName: string | undefined | null;\n    }> = [];\n\n    const rootOpts = root(input);\n    if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {\n      flattenedConfigs.push({\n        config: rootOpts,\n        envName: undefined,\n        index: undefined,\n      });\n\n      const envOpts = env(input, context.envName);\n      if (\n        envOpts &&\n        configIsApplicable(envOpts, dirname, context, input.filepath)\n      ) {\n        flattenedConfigs.push({\n          config: envOpts,\n          envName: context.envName,\n          index: undefined,\n        });\n      }\n\n      (rootOpts.options.overrides || []).forEach((_, index) => {\n        const overrideOps = overrides(input, index);\n        if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {\n          flattenedConfigs.push({\n            config: overrideOps,\n            index,\n            envName: undefined,\n          });\n\n          const overrideEnvOpts = overridesEnv(input, index, context.envName);\n          if (\n            overrideEnvOpts &&\n            configIsApplicable(\n              overrideEnvOpts,\n              dirname,\n              context,\n              input.filepath,\n            )\n          ) {\n            flattenedConfigs.push({\n              config: overrideEnvOpts,\n              index,\n              envName: context.envName,\n            });\n          }\n        }\n      });\n    }\n\n    // Process 'ignore' and 'only' before 'extends' items are processed so\n    // that we don't do extra work loading extended configs if a file is\n    // ignored.\n    if (\n      flattenedConfigs.some(\n        ({\n          config: {\n            options: { ignore, only },\n          },\n        }) => shouldIgnore(context, ignore, only, dirname),\n      )\n    ) {\n      return null;\n    }\n\n    const chain = emptyChain();\n    const logger = createLogger(input, context, baseLogger);\n\n    for (const { config, index, envName } of flattenedConfigs) {\n      if (\n        !(yield* mergeExtendsChain(\n          chain,\n          config.options,\n          dirname,\n          context,\n          files,\n          baseLogger,\n        ))\n      ) {\n        return null;\n      }\n\n      logger(config, index, envName);\n      yield* mergeChainOpts(chain, config);\n    }\n    return chain;\n  };\n}\n\nfunction* mergeExtendsChain(\n  chain: ConfigChain,\n  opts: ValidatedOptions,\n  dirname: string,\n  context: ConfigContext,\n  files: Set<ConfigFile>,\n  baseLogger?: ConfigPrinter,\n): Handler<boolean> {\n  if (opts.extends === undefined) return true;\n\n  const file = yield* loadConfig(\n    opts.extends,\n    dirname,\n    context.envName,\n    context.caller,\n  );\n\n  if (files.has(file)) {\n    throw new Error(\n      `Configuration cycle detected loading ${file.filepath}.\\n` +\n        `File already loaded following the config chain:\\n` +\n        Array.from(files, file => ` - ${file.filepath}`).join(\"\\n\"),\n    );\n  }\n\n  files.add(file);\n  const fileChain = yield* loadFileChain(\n    validateExtendFile(file),\n    context,\n    files,\n    baseLogger,\n  );\n  files.delete(file);\n\n  if (!fileChain) return false;\n\n  mergeChain(chain, fileChain);\n\n  return true;\n}\n\nfunction mergeChain(target: ConfigChain, source: ConfigChain): ConfigChain {\n  target.options.push(...source.options);\n  target.plugins.push(...source.plugins);\n  target.presets.push(...source.presets);\n  for (const file of source.files) {\n    target.files.add(file);\n  }\n\n  return target;\n}\n\nfunction* mergeChainOpts(\n  target: ConfigChain,\n  { options, plugins, presets }: OptionsAndDescriptors,\n): Handler<ConfigChain> {\n  target.options.push(options);\n  target.plugins.push(...(yield* plugins()));\n  target.presets.push(...(yield* presets()));\n\n  return target;\n}\n\nfunction emptyChain(): ConfigChain {\n  return {\n    options: [],\n    presets: [],\n    plugins: [],\n    files: new Set(),\n  };\n}\n\nfunction normalizeOptions(opts: ValidatedOptions): ValidatedOptions {\n  const options = {\n    ...opts,\n  };\n  delete options.extends;\n  delete options.env;\n  delete options.overrides;\n  delete options.plugins;\n  delete options.presets;\n  delete options.passPerPreset;\n  delete options.ignore;\n  delete options.only;\n  delete options.test;\n  delete options.include;\n  delete options.exclude;\n\n  // \"sourceMap\" is just aliased to sourceMap, so copy it over as\n  // we merge the options together.\n  if (Object.hasOwn(options, \"sourceMap\")) {\n    options.sourceMaps = options.sourceMap;\n    delete options.sourceMap;\n  }\n  return options;\n}\n\nfunction dedupDescriptors<API>(\n  items: Array<UnloadedDescriptor<API>>,\n): Array<UnloadedDescriptor<API>> {\n  const map: Map<\n    Function,\n    Map<string | void, { value: UnloadedDescriptor<API> }>\n  > = new Map();\n\n  const descriptors = [];\n\n  for (const item of items) {\n    if (typeof item.value === \"function\") {\n      const fnKey = item.value;\n      let nameMap = map.get(fnKey);\n      if (!nameMap) {\n        nameMap = new Map();\n        map.set(fnKey, nameMap);\n      }\n      let desc = nameMap.get(item.name);\n      if (!desc) {\n        desc = { value: item };\n        descriptors.push(desc);\n\n        // Treat passPerPreset presets as unique, skipping them\n        // in the merge processing steps.\n        if (!item.ownPass) nameMap.set(item.name, desc);\n      } else {\n        desc.value = item;\n      }\n    } else {\n      descriptors.push({ value: item });\n    }\n  }\n\n  return descriptors.reduce((acc, desc) => {\n    acc.push(desc.value);\n    return acc;\n  }, []);\n}\n\nfunction configIsApplicable(\n  { options }: OptionsAndDescriptors,\n  dirname: string,\n  context: ConfigContext,\n  configName: string,\n): boolean {\n  return (\n    (options.test === undefined ||\n      configFieldIsApplicable(context, options.test, dirname, configName)) &&\n    (options.include === undefined ||\n      configFieldIsApplicable(context, options.include, dirname, configName)) &&\n    (options.exclude === undefined ||\n      !configFieldIsApplicable(context, options.exclude, dirname, configName))\n  );\n}\n\nfunction configFieldIsApplicable(\n  context: ConfigContext,\n  test: ConfigApplicableTest,\n  dirname: string,\n  configName: string,\n): boolean {\n  const patterns = Array.isArray(test) ? test : [test];\n\n  return matchesPatterns(context, patterns, dirname, configName);\n}\n\n/**\n * Print the ignoreList-values in a more helpful way than the default.\n */\nfunction ignoreListReplacer(\n  _key: string,\n  value: IgnoreList | IgnoreItem,\n): IgnoreList | IgnoreItem | string {\n  if (value instanceof RegExp) {\n    return String(value);\n  }\n\n  return value;\n}\n\n/**\n * Tests if a filename should be ignored based on \"ignore\" and \"only\" options.\n */\nfunction shouldIgnore(\n  context: ConfigContext,\n  ignore: IgnoreList | undefined | null,\n  only: IgnoreList | undefined | null,\n  dirname: string,\n): boolean {\n  if (ignore && matchesPatterns(context, ignore, dirname)) {\n    const message = `No config is applied to \"${\n      context.filename ?? \"(unknown)\"\n    }\" because it matches one of \\`ignore: ${JSON.stringify(\n      ignore,\n      ignoreListReplacer,\n    )}\\` from \"${dirname}\"`;\n    debug(message);\n    if (context.showConfig) {\n      console.log(message);\n    }\n    return true;\n  }\n\n  if (only && !matchesPatterns(context, only, dirname)) {\n    const message = `No config is applied to \"${\n      context.filename ?? \"(unknown)\"\n    }\" because it fails to match one of \\`only: ${JSON.stringify(\n      only,\n      ignoreListReplacer,\n    )}\\` from \"${dirname}\"`;\n    debug(message);\n    if (context.showConfig) {\n      console.log(message);\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns result of calling function with filename if pattern is a function.\n * Otherwise returns result of matching pattern Regex with filename.\n */\nfunction matchesPatterns(\n  context: ConfigContext,\n  patterns: IgnoreList,\n  dirname: string,\n  configName?: string,\n): boolean {\n  return patterns.some(pattern =>\n    matchPattern(pattern, dirname, context.filename, context, configName),\n  );\n}\n\nfunction matchPattern(\n  pattern: IgnoreItem,\n  dirname: string,\n  pathToTest: string | undefined,\n  context: ConfigContext,\n  configName?: string,\n): boolean {\n  if (typeof pattern === \"function\") {\n    return !!endHiddenCallStack(pattern)(pathToTest, {\n      dirname,\n      envName: context.envName,\n      caller: context.caller,\n    });\n  }\n\n  if (typeof pathToTest !== \"string\") {\n    throw new ConfigError(\n      `Configuration contains string/RegExp pattern, but no filename was passed to Babel`,\n      configName,\n    );\n  }\n\n  if (typeof pattern === \"string\") {\n    pattern = pathPatternToRegex(pattern, dirname);\n  }\n  return pattern.test(pathToTest);\n}\n"],"mappings":"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","ignoreList":[]}