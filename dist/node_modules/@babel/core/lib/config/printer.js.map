{"version":3,"file":"printer.js","names":["_gensync","data","require","ChainFormatter","exports","Programmatic","Config","Formatter","title","type","callerName","filepath","loc","index","envName","concat","optionsAndDescriptors","_regeneratorRuntime","mark","opt","content","pluginDescriptors","presetDescriptors","wrap","optionsAndDescriptors$","_context","prev","next","Object","assign","options","overrides","env","t0","_toConsumableArray","delegateYield","plugins","t2","t1","length","map","d","descriptorToConfig","t3","presets","t5","t4","abrupt","JSON","stringify","undefined","stop","_d$file","name","file","request","_typeof","value","toString","slice","ConfigPrinter","_classCallCheck","_stack","_createClass","key","configure","enabled","_ref","_this","push","output","configs","output$","_context2","all","s","format","join","config","format$","_context3"],"sources":["../../src/config/printer.ts"],"sourcesContent":["import gensync from \"gensync\";\n\nimport type { Handler } from \"gensync\";\n\nimport type {\n  OptionsAndDescriptors,\n  UnloadedDescriptor,\n} from \"./config-descriptors.ts\";\n\n// todo: Use flow enums when @babel/transform-flow-types supports it\nexport const ChainFormatter = {\n  Programmatic: 0,\n  Config: 1,\n};\n\ntype PrintableConfig = {\n  content: OptionsAndDescriptors;\n  type: (typeof ChainFormatter)[keyof typeof ChainFormatter];\n  callerName: string | undefined | null;\n  filepath: string | undefined | null;\n  index: number | undefined | null;\n  envName: string | undefined | null;\n};\n\nconst Formatter = {\n  title(\n    type: (typeof ChainFormatter)[keyof typeof ChainFormatter],\n    callerName?: string | null,\n    filepath?: string | null,\n  ): string {\n    let title = \"\";\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n    return title;\n  },\n  loc(index?: number | null, envName?: string | null): string {\n    let loc = \"\";\n    if (index != null) {\n      loc += `.overrides[${index}]`;\n    }\n    if (envName != null) {\n      loc += `.env[\"${envName}\"]`;\n    }\n    return loc;\n  },\n\n  *optionsAndDescriptors(opt: OptionsAndDescriptors) {\n    const content = { ...opt.options };\n    // overrides and env will be printed as separated config items\n    delete content.overrides;\n    delete content.env;\n    // resolve to descriptors\n    const pluginDescriptors = [...(yield* opt.plugins())];\n    if (pluginDescriptors.length) {\n      content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));\n    }\n    const presetDescriptors = [...(yield* opt.presets())];\n    if (presetDescriptors.length) {\n      content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));\n    }\n    return JSON.stringify(content, undefined, 2);\n  },\n};\n\nfunction descriptorToConfig<API>(\n  d: UnloadedDescriptor<API>,\n): object | string | [string, unknown] | [string, unknown, string] {\n  let name: object | string = d.file?.request;\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      // If the unloaded descriptor is a function, i.e. `plugins: [ require(\"my-plugin\") ]`,\n      // we print the first 50 characters of the function source code and hopefully we can see\n      // `name: 'my-plugin'` in the source\n      name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;\n    }\n  }\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nexport class ConfigPrinter {\n  _stack: Array<PrintableConfig> = [];\n  configure(\n    enabled: boolean,\n    type: (typeof ChainFormatter)[keyof typeof ChainFormatter],\n    {\n      callerName,\n      filepath,\n    }: {\n      callerName?: string;\n      filepath?: string;\n    },\n  ) {\n    if (!enabled) return () => {};\n    return (\n      content: OptionsAndDescriptors,\n      index?: number | null,\n      envName?: string | null,\n    ) => {\n      this._stack.push({\n        type,\n        callerName,\n        filepath,\n        content,\n        index,\n        envName,\n      });\n    };\n  }\n  static *format(config: PrintableConfig): Handler<string> {\n    let title = Formatter.title(\n      config.type,\n      config.callerName,\n      config.filepath,\n    );\n    const loc = Formatter.loc(config.index, config.envName);\n    if (loc) title += ` ${loc}`;\n    const content = yield* Formatter.optionsAndDescriptors(config.content);\n    return `${title}\\n${content}`;\n  }\n\n  *output(): Handler<string> {\n    if (this._stack.length === 0) return \"\";\n    const configs = yield* gensync.all(\n      this._stack.map(s => ConfigPrinter.format(s)),\n    );\n    return configs.join(\"\\n\\n\");\n  }\n}\n"],"mappings":"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","ignoreList":[]}