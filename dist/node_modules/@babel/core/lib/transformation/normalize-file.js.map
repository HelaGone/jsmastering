{"version":3,"file":"normalize-file.js","names":["normalizeFile","_typeof","o","Symbol","iterator","constructor","prototype","_fs","data","require","_path","_debug","_t","_convertSourceMap","_file","_index","_cloneDeep","_t2","file","traverseFast","debug","INLINE_SOURCEMAP_REGEX","EXTERNAL_SOURCEMAP_REGEX","pluginPasses","options","code","ast","inputMap","lastComment","_lastComment","match","inputMapContent","_regeneratorRuntime","wrap","normalizeFile$","_context","prev","next","concat","type","Error","cloneInputAst","delegateYield","t0","inputSourceMap","fromObject","extractComments","fromComment","err","filename","exec","readFileSync","resolve","dirname","fromJSON","abrupt","stop","_marked","extractCommentsFromList","regex","comments","filter","_ref","value","test","node","_extractCommentsFromL","leadingComments","_extractCommentsFromL2","_slicedToArray","_extractCommentsFromL3","innerComments","_extractCommentsFromL4","_extractCommentsFromL5","trailingComments","_extractCommentsFromL6"],"sources":["../../src/transformation/normalize-file.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { file, traverseFast } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { PluginPasses } from \"../config/index.ts\";\nimport convertSourceMap from \"convert-source-map\";\nimport type { SourceMapConverter as Converter } from \"convert-source-map\";\nimport File from \"./file/file.ts\";\nimport parser from \"../parser/index.ts\";\nimport cloneDeep from \"./util/clone-deep.ts\";\n\nconst debug = buildDebug(\"babel:transform:file\");\n\n// These regexps are copied from the convert-source-map package,\n// but without // or /* at the beginning of the comment.\n\nconst INLINE_SOURCEMAP_REGEX =\n  /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX =\n  /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nexport type NormalizedFile = {\n  code: string;\n  ast: t.File;\n  inputMap: Converter | null;\n};\n\nexport default function* normalizeFile(\n  pluginPasses: PluginPasses,\n  options: { [key: string]: any },\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<File> {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = cloneDeep(ast);\n    }\n  } else {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = yield* parser(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n  if (options.inputSourceMap !== false) {\n    // If an explicit object is passed in, it overrides the processing of\n    // source maps that may be in the file itself.\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = convertSourceMap.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n      if (lastComment) {\n        try {\n          inputMap = convertSourceMap.fromComment(\"//\" + lastComment);\n        } catch (err) {\n          if (process.env.BABEL_8_BREAKING) {\n            console.warn(\n              \"discarding unknown inline input sourcemap\",\n              options.filename,\n              err,\n            );\n          } else {\n            debug(\"discarding unknown inline input sourcemap\");\n          }\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          // when `lastComment` is non-null, EXTERNAL_SOURCEMAP_REGEX must have matches\n          const match: [string, string] = EXTERNAL_SOURCEMAP_REGEX.exec(\n            lastComment,\n          ) as any;\n          const inputMapContent = fs.readFileSync(\n            path.resolve(path.dirname(options.filename), match[1]),\n            \"utf8\",\n          );\n          inputMap = convertSourceMap.fromJSON(inputMapContent);\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new File(options, {\n    code,\n    ast: ast as t.File,\n    inputMap,\n  });\n}\n\nfunction extractCommentsFromList(\n  regex: RegExp,\n  comments: t.Comment[],\n  lastComment: string | null,\n): [t.Comment[], string | null] {\n  if (comments) {\n    comments = comments.filter(({ value }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n      return true;\n    });\n  }\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex: RegExp, ast: t.Node) {\n  let lastComment: string = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.leadingComments,\n      lastComment,\n    );\n    [node.innerComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.innerComments,\n      lastComment,\n    );\n    [node.trailingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.trailingComments,\n      lastComment,\n    );\n  });\n  return lastComment;\n}\n"],"mappings":"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","ignoreList":[]}