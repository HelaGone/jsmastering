{"version":3,"file":"functional.js","names":["_async","require","once","fn","result","resultP","promiseReferenced","_regeneratorRuntime","mark","_callee","resolve","reject","wrap","_callee$","_context","prev","next","delegateYield","waitFor","abrupt","t0","isAsync","t1","t3","t2","ok","value","t4","Promise","res","rej","t6","t5","t7","stop"],"sources":["../../src/gensync-utils/functional.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\n\nimport { isAsync, waitFor } from \"./async.ts\";\n\nexport function once<R>(fn: () => Handler<R>): () => Handler<R> {\n  let result: { ok: true; value: R } | { ok: false; value: unknown };\n  let resultP: Promise<R>;\n  let promiseReferenced = false;\n  return function* () {\n    if (!result) {\n      if (resultP) {\n        promiseReferenced = true;\n        return yield* waitFor(resultP);\n      }\n\n      if (!(yield* isAsync())) {\n        try {\n          result = { ok: true, value: yield* fn() };\n        } catch (error) {\n          result = { ok: false, value: error };\n        }\n      } else {\n        let resolve: (result: R) => void, reject: (error: unknown) => void;\n        resultP = new Promise((res, rej) => {\n          resolve = res;\n          reject = rej;\n        });\n\n        try {\n          result = { ok: true, value: yield* fn() };\n          // Avoid keeping the promise around\n          // now that we have the result.\n          resultP = null;\n          // We only resolve/reject the promise if it has been actually\n          // referenced. If there are no listeners we can forget about it.\n          // In the reject case, this avoid uncatchable unhandledRejection\n          // events.\n          if (promiseReferenced) resolve(result.value);\n        } catch (error) {\n          result = { ok: false, value: error };\n          resultP = null;\n          if (promiseReferenced) reject(error);\n        }\n      }\n    }\n\n    if (result.ok) return result.value;\n    else throw result.value;\n  };\n}\n"],"mappings":";;;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAEO,SAASC,IAAIA,CAAIC,EAAoB,EAAoB;EAC9D,IAAIC,MAA8D;EAClE,IAAIC,OAAmB;EACvB,IAAIC,iBAAiB,GAAG,KAAK;EAC7B,oBAAAC,mBAAA,GAAAC,IAAA,CAAO,SAAAC,QAAA;IAAA,IAAAC,OAAA,EAAAC,MAAA;IAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,IACAZ,MAAM;YAAAU,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,KACLX,OAAO;YAAAS,QAAA,CAAAE,IAAA;YAAA;UAAA;UACTV,iBAAiB,GAAG,IAAI;UACjB,OAAAQ,QAAA,CAAAG,aAAA,CAAO,IAAAjB,MAAA,CAAAkB,OAAO,EAACb,OAAO,CAAC;QAAA;UAAA,OAAAS,QAAA,CAAAK,MAAA,WAAAL,QAAA,CAAAM,EAAA;QAAA;UAG1B,OAAAN,QAAA,CAAAG,aAAA,CAAO,IAAAjB,MAAA,CAAAqB,OAAO,EAAC,CAAC;QAAA;UAAA,IAAAP,QAAA,CAAAQ,EAAA;YAAAR,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAC,IAAA;UAEU,OAAAD,QAAA,CAAAG,aAAA,CAAOd,EAAE,CAAC;QAAA;UAAAW,QAAA,CAAAS,EAAA,GAAAT,QAAA,CAAAU,EAAA;UAAtCpB,MAAM;YAAKqB,EAAE,EAAE,IAAI;YAAEC,KAAK,EAAAZ,QAAA,CAAAS;UAAA;UAAAT,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAa,EAAA,GAAAb,QAAA;UAE1BV,MAAM,GAAG;YAAEqB,EAAE,EAAE,KAAK;YAAEC,KAAK,EAAAZ,QAAA,CAAAa;UAAQ,CAAC;QAAA;UAAAb,QAAA,CAAAE,IAAA;UAAA;QAAA;UAItCX,OAAO,GAAG,IAAIuB,OAAO,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAK;YAClCpB,OAAO,GAAGmB,GAAG;YACblB,MAAM,GAAGmB,GAAG;UACd,CAAC,CAAC;UAAAhB,QAAA,CAAAC,IAAA;UAG4B,OAAAD,QAAA,CAAAG,aAAA,CAAOd,EAAE,CAAC;QAAA;UAAAW,QAAA,CAAAiB,EAAA,GAAAjB,QAAA,CAAAkB,EAAA;UAAtC5B,MAAM;YAAKqB,EAAE,EAAE,IAAI;YAAEC,KAAK,EAAAZ,QAAA,CAAAiB;UAAA;UAG1B1B,OAAO,GAAG,IAAI;UAKd,IAAIC,iBAAiB,EAAEI,OAAO,CAACN,MAAM,CAACsB,KAAK,CAAC;UAAAZ,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAmB,EAAA,GAAAnB,QAAA;UAE5CV,MAAM,GAAG;YAAEqB,EAAE,EAAE,KAAK;YAAEC,KAAK,EAAAZ,QAAA,CAAAmB;UAAQ,CAAC;UACpC5B,OAAO,GAAG,IAAI;UACd,IAAIC,iBAAiB,EAAEK,MAAM,CAAAG,QAAA,CAAAmB,EAAM,CAAC;QAAA;UAAA,KAKtC7B,MAAM,CAACqB,EAAE;YAAAX,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAK,MAAA,WAASf,MAAM,CAACsB,KAAK;QAAA;UAAA,MACvBtB,MAAM,CAACsB,KAAK;QAAA;QAAA;UAAA,OAAAZ,QAAA,CAAAoB,IAAA;MAAA;IAAA,GAAAzB,OAAA;EAAA,CACxB;AACH;AAAC","ignoreList":[]}