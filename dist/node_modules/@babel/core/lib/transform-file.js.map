{"version":3,"file":"transform-file.js","names":["_gensync","data","require","_index","_index2","fs","transformFileRunner","_regeneratorRuntime","mark","_callee","filename","opts","options","config","code","wrap","_callee$","_context","prev","next","Object","assign","delegateYield","t0","abrupt","readFile","t1","run","t2","stop","transformFile","errback","apply","arguments","transformFileSync","sync","transformFileAsync","async"],"sources":["../src/transform-file.ts"],"sourcesContent":["import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config/index.ts\";\nimport type { InputOptions, ResolvedConfig } from \"./config/index.ts\";\nimport { run } from \"./transformation/index.ts\";\nimport type { FileResult, FileResultCallback } from \"./transformation/index.ts\";\nimport * as fs from \"./gensync-utils/fs.ts\";\n\ntype transformFileBrowserType = typeof import(\"./transform-file-browser\");\ntype transformFileType = typeof import(\"./transform-file\");\n\n// Kind of gross, but essentially asserting that the exports of this module are the same as the\n// exports of transform-file-browser, since this file may be replaced at bundle time with\n// transform-file-browser.\n({}) as any as transformFileBrowserType as transformFileType;\n\nconst transformFileRunner = gensync(function* (\n  filename: string,\n  opts?: InputOptions,\n): Handler<FileResult | null> {\n  const options = { ...opts, filename };\n\n  const config: ResolvedConfig | null = yield* loadConfig(options);\n  if (config === null) return null;\n\n  const code = yield* fs.readFile(filename, \"utf8\");\n  return yield* run(config, code);\n});\n\n// @ts-expect-error TS doesn't detect that this signature is compatible\nexport function transformFile(\n  filename: string,\n  callback: FileResultCallback,\n): void;\nexport function transformFile(\n  filename: string,\n  opts: InputOptions | undefined | null,\n  callback: FileResultCallback,\n): void;\nexport function transformFile(\n  ...args: Parameters<typeof transformFileRunner.errback>\n) {\n  transformFileRunner.errback(...args);\n}\n\nexport function transformFileSync(\n  ...args: Parameters<typeof transformFileRunner.sync>\n) {\n  return transformFileRunner.sync(...args);\n}\nexport function transformFileAsync(\n  ...args: Parameters<typeof transformFileRunner.async>\n) {\n  return transformFileRunner.async(...args);\n}\n"],"mappings":";;;;;;;;;;AAAA,SAAAA,SAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,QAAA,YAAAA,SAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,IAAAE,MAAA,GAAAD,OAAA;AAEA,IAAAE,OAAA,GAAAF,OAAA;AAEA,IAAAG,EAAA,GAAAH,OAAA;AAQA,CAAC,CAAC,CAAC;AAEH,IAAMI,mBAAmB,GAAGN,QAAA,CAAM,CAAC,eAAAO,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAClCC,QAAgB,EAChBC,IAAmB;EAAA,IAAAC,OAAA,EAAAC,MAAA,EAAAC,IAAA;EAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAEbP,OAAO,GAAAQ,MAAA,CAAAC,MAAA,KAAQV,IAAI;UAAED,QAAA,EAAAA;QAAQ,EAAE;QAEC,OAAAO,QAAA,CAAAK,aAAA,CAAO,IAAAnB,MAAA,WAAU,EAACS,OAAO,CAAC;MAAA;QAA1DC,MAA6B,GAAAI,QAAA,CAAAM,EAAA;QAAA,MAC/BV,MAAM,KAAK,IAAI;UAAAI,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,OAAAF,QAAA,CAAAO,MAAA,WAAS,IAAI;MAAA;QAEnB,OAAAP,QAAA,CAAAK,aAAA,CAAOjB,EAAE,CAACoB,QAAQ,CAACf,QAAQ,EAAE,MAAM,CAAC;MAAA;QAA3CI,IAAI,GAAAG,QAAA,CAAAS,EAAA;QACH,OAAAT,QAAA,CAAAK,aAAA,CAAO,IAAAlB,OAAA,CAAAuB,GAAG,EAACd,MAAM,EAAEC,IAAI,CAAC;MAAA;QAAA,OAAAG,QAAA,CAAAO,MAAA,WAAAP,QAAA,CAAAW,EAAA;MAAA;MAAA;QAAA,OAAAX,QAAA,CAAAY,IAAA;IAAA;EAAA,GAAApB,OAAA;AAAA,CAChC,EAAC;AAYK,SAASqB,aAAaA,CAAA,EAE3B;EACAxB,mBAAmB,CAACyB,OAAO,CAAAC,KAAA,CAA3B1B,mBAAmB,EAAA2B,SAAgB,CAAC;AACtC;AAEO,SAASC,iBAAiBA,CAAA,EAE/B;EACA,OAAO5B,mBAAmB,CAAC6B,IAAI,CAAAH,KAAA,CAAxB1B,mBAAmB,EAAA2B,SAAa,CAAC;AAC1C;AACO,SAASG,kBAAkBA,CAAA,EAEhC;EACA,OAAO9B,mBAAmB,CAAC+B,KAAK,CAAAL,KAAA,CAAzB1B,mBAAmB,EAAA2B,SAAc,CAAC;AAC3C;AAAC","ignoreList":[]}