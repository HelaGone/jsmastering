{"version":3,"file":"validator.js","names":["_findSuggestion","require","OptionValidator","descriptor","_classCallCheck","_createClass","key","value","validateTopLevelOptions","options","TopLevelOptionShape","validOptionNames","Object","keys","_i","_Object$keys","length","option","includes","Error","formatMessage","concat","findSuggestion","validateBooleanOption","name","defaultValue","undefined","invariant","validateStringOption","condition","message","exports"],"sources":["../src/validator.ts"],"sourcesContent":["import { findSuggestion } from \"./find-suggestion.ts\";\n\nexport class OptionValidator {\n  declare descriptor: string;\n  constructor(descriptor: string) {\n    this.descriptor = descriptor;\n  }\n\n  /**\n   * Validate if the given `options` follow the name of keys defined in the `TopLevelOptionShape`\n   *\n   * @param {Object} options\n   * @param {Object} TopLevelOptionShape\n   *   An object with all the valid key names that `options` should be allowed to have\n   *   The property values of `TopLevelOptionShape` can be arbitrary\n   * @memberof OptionValidator\n   */\n  validateTopLevelOptions(options: Object, TopLevelOptionShape: Object): void {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(\n          this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${findSuggestion(option, validOptionNames)}'?`),\n        );\n      }\n    }\n  }\n\n  // note: we do not consider rewrite them to high order functions\n  // until we have to support `validateNumberOption`.\n  validateBooleanOption<T extends boolean>(\n    name: string,\n    value?: boolean,\n    defaultValue?: T,\n  ): boolean | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"boolean\",\n        `'${name}' option must be a boolean.`,\n      );\n    }\n    return value;\n  }\n\n  validateStringOption<T extends string>(\n    name: string,\n    value?: string,\n    defaultValue?: T,\n  ): string | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"string\",\n        `'${name}' option must be a string.`,\n      );\n    }\n    return value;\n  }\n  /**\n   * A helper interface copied from the `invariant` npm package.\n   * It throws given `message` when `condition` is not met\n   *\n   * @param {boolean} condition\n   * @param {string} message\n   * @memberof OptionValidator\n   */\n  invariant(condition: boolean, message: string): void {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message: string): string {\n    return `${this.descriptor}: ${message}`;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAEaC,eAAe;EAE1B,SAAAA,gBAAYC,UAAkB,EAAE;IAAAC,eAAA,OAAAF,eAAA;IAC9B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAAA,OAAAE,YAAA,CAAAH,eAAA;IAAAI,GAAA;IAAAC,KAAA,EAWA,SAAAC,wBAAwBC,OAAe,EAAEC,mBAA2B,EAAQ;MAC1E,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACH,mBAAmB,CAAC;MACzD,SAAAI,EAAA,MAAAC,YAAA,GAAqBH,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAAK,EAAA,GAAAC,YAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;QAAtC,IAAMG,MAAM,GAAAF,YAAA,CAAAD,EAAA;QACf,IAAI,CAACH,gBAAgB,CAACO,QAAQ,CAACD,MAAM,CAAC,EAAE;UACtC,MAAM,IAAIE,KAAK,CACb,IAAI,CAACC,aAAa,KAAAC,MAAA,CAAKJ,MAAO,0DAAAI,MAAA,CACtB,IAAArB,eAAA,CAAAsB,cAAc,EAACL,MAAM,EAAEN,gBAAgB,CAAE,OAAG,CACtD,CAAC;QACH;MACF;IACF;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAIA,SAAAgB,sBACEC,IAAY,EACZjB,KAAe,EACfkB,YAAgB,EACH;MACb,IAAIlB,KAAK,KAAKmB,SAAS,EAAE;QACvB,OAAOD,YAAY;MACrB,CAAC,MAAM;QACL,IAAI,CAACE,SAAS,CACZ,OAAOpB,KAAK,KAAK,SAAS,MAAAc,MAAA,CACtBG,IAAK,gCACX,CAAC;MACH;MACA,OAAOjB,KAAK;IACd;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAEA,SAAAqB,qBACEJ,IAAY,EACZjB,KAAc,EACdkB,YAAgB,EACJ;MACZ,IAAIlB,KAAK,KAAKmB,SAAS,EAAE;QACvB,OAAOD,YAAY;MACrB,CAAC,MAAM;QACL,IAAI,CAACE,SAAS,CACZ,OAAOpB,KAAK,KAAK,QAAQ,MAAAc,MAAA,CACrBG,IAAK,+BACX,CAAC;MACH;MACA,OAAOjB,KAAK;IACd;EAAA;IAAAD,GAAA;IAAAC,KAAA,EASA,SAAAoB,UAAUE,SAAkB,EAAEC,OAAe,EAAQ;MACnD,IAAI,CAACD,SAAS,EAAE;QACd,MAAM,IAAIV,KAAK,CAAC,IAAI,CAACC,aAAa,CAACU,OAAO,CAAC,CAAC;MAC9C;IACF;EAAA;IAAAxB,GAAA;IAAAC,KAAA,EAEA,SAAAa,cAAcU,OAAe,EAAU;MACrC,UAAAT,MAAA,CAAU,IAAI,CAAClB,UAAW,QAAAkB,MAAA,CAAIS,OAAQ;IACxC;EAAA;AAAA;AACDC,OAAA,CAAA7B,eAAA,GAAAA,eAAA","ignoreList":[]}