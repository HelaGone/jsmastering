"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
exports.__esModule = true;
exports.applyMissingDependenciesDefaults = applyMissingDependenciesDefaults;
exports.validateIncludeExclude = validateIncludeExclude;
var _utils = require("./utils");
function patternToRegExp(pattern) {
  if (pattern instanceof RegExp) return pattern;
  try {
    return new RegExp("^".concat(pattern, "$"));
  } catch (_unused) {
    return null;
  }
}
function buildUnusedError(label, unused) {
  if (!unused.length) return "";
  return "  - The following \"".concat(label, "\" patterns didn't match any polyfill:\n") + unused.map(function (original) {
    return "    ".concat(String(original), "\n");
  }).join("");
}
function buldDuplicatesError(duplicates) {
  if (!duplicates.size) return "";
  return "  - The following polyfills were matched both by \"include\" and \"exclude\" patterns:\n" + Array.from(duplicates, function (name) {
    return "    ".concat(name, "\n");
  }).join("");
}
function validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {
  var current;
  var filter = function filter(pattern) {
    var regexp = patternToRegExp(pattern);
    if (!regexp) return false;
    var matched = false;
    var _iterator = _createForOfIteratorHelper(polyfills.keys()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var polyfill = _step.value;
        if (regexp.test(polyfill)) {
          matched = true;
          current.add(polyfill);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return !matched;
  };

  // prettier-ignore
  var include = current = new Set();
  var unusedInclude = Array.from(includePatterns).filter(filter);

  // prettier-ignore
  var exclude = current = new Set();
  var unusedExclude = Array.from(excludePatterns).filter(filter);
  var duplicates = (0, _utils.intersection)(include, exclude);
  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {
    throw new Error("Error while validating the \"".concat(provider, "\" provider options:\n") + buildUnusedError("include", unusedInclude) + buildUnusedError("exclude", unusedExclude) + buldDuplicatesError(duplicates));
  }
  return {
    include: include,
    exclude: exclude
  };
}
function applyMissingDependenciesDefaults(options, babelApi) {
  var _options$missingDepen = options.missingDependencies,
    missingDependencies = _options$missingDepen === void 0 ? {} : _options$missingDepen;
  if (missingDependencies === false) return false;
  var caller = babelApi.caller(function (caller) {
    return caller == null ? void 0 : caller.name;
  });
  var _missingDependencies$ = missingDependencies.log,
    log = _missingDependencies$ === void 0 ? "deferred" : _missingDependencies$,
    _missingDependencies$2 = missingDependencies.inject,
    inject = _missingDependencies$2 === void 0 ? caller === "rollup-plugin-babel" ? "throw" : "import" : _missingDependencies$2,
    _missingDependencies$3 = missingDependencies.all,
    all = _missingDependencies$3 === void 0 ? false : _missingDependencies$3;
  return {
    log: log,
    inject: inject,
    all: all
  };
}
//# sourceMappingURL=normalize-options.js.map