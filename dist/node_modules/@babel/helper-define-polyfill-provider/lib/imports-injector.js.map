{"version":3,"file":"imports-injector.js","names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","r","l","t","Symbol","iterator","e","n","u","a","f","o","call","next","Object","done","push","value","length","Array","isArray","_createForOfIteratorHelper","allowArrayLike","it","F","s","_e","normalCompletion","didErr","err","step","_e2","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_toPrimitive","_typeof","toPrimitive","String","Number","exports","__esModule","_babel","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","desc","set","_ref","types","ImportsCachedInjector","resolver","getPreferredIndex","_imports","_anonymousImports","_lastImports","_resolver","_getPreferredIndex","storeAnonymous","programPath","url","moduleName","getVal","_normalizeKey","imports","_ensure","Set","node","sourceType","stringLiteral","add","_injectImport","storeNamed","Map","_getVal","identifier","id","_this$_lastImports$ge","newIndex","lastImports","isPathStillValid","path","parent","container","body","last","Infinity","undefined","_iterator","entries","_step","_step$value","data","index","_path$insertBefore","insertBefore","_path$insertBefore2","newPath","splice","_last$insertAfter","insertAfter","_last$insertAfter2","_programPath$unshiftC","unshiftContainer","_programPath$unshiftC2","map","Collection","collection","arguments","concat"],"sources":["../../../../../node_modules/@babel/helper-define-polyfill-provider/lib/imports-injector.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _babel = _interopRequireWildcard(require(\"@babel/core\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst {\n  types: t\n} = _babel.default || _babel;\nclass ImportsCachedInjector {\n  constructor(resolver, getPreferredIndex) {\n    this._imports = new WeakMap();\n    this._anonymousImports = new WeakMap();\n    this._lastImports = new WeakMap();\n    this._resolver = resolver;\n    this._getPreferredIndex = getPreferredIndex;\n  }\n  storeAnonymous(programPath, url, moduleName, getVal) {\n    const key = this._normalizeKey(programPath, url);\n    const imports = this._ensure(this._anonymousImports, programPath, Set);\n    if (imports.has(key)) return;\n    const node = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)));\n    imports.add(key);\n    this._injectImport(programPath, node, moduleName);\n  }\n  storeNamed(programPath, url, name, moduleName, getVal) {\n    const key = this._normalizeKey(programPath, url, name);\n    const imports = this._ensure(this._imports, programPath, Map);\n    if (!imports.has(key)) {\n      const {\n        node,\n        name: id\n      } = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)), t.identifier(name));\n      imports.set(key, id);\n      this._injectImport(programPath, node, moduleName);\n    }\n    return t.identifier(imports.get(key));\n  }\n  _injectImport(programPath, node, moduleName) {\n    var _this$_lastImports$ge;\n    const newIndex = this._getPreferredIndex(moduleName);\n    const lastImports = (_this$_lastImports$ge = this._lastImports.get(programPath)) != null ? _this$_lastImports$ge : [];\n    const isPathStillValid = path => path.node &&\n    // Sometimes the AST is modified and the \"last import\"\n    // we have has been replaced\n    path.parent === programPath.node && path.container === programPath.node.body;\n    let last;\n    if (newIndex === Infinity) {\n      // Fast path: we can always just insert at the end if newIndex is `Infinity`\n      if (lastImports.length > 0) {\n        last = lastImports[lastImports.length - 1].path;\n        if (!isPathStillValid(last)) last = undefined;\n      }\n    } else {\n      for (const [i, data] of lastImports.entries()) {\n        const {\n          path,\n          index\n        } = data;\n        if (isPathStillValid(path)) {\n          if (newIndex < index) {\n            const [newPath] = path.insertBefore(node);\n            lastImports.splice(i, 0, {\n              path: newPath,\n              index: newIndex\n            });\n            return;\n          }\n          last = path;\n        }\n      }\n    }\n    if (last) {\n      const [newPath] = last.insertAfter(node);\n      lastImports.push({\n        path: newPath,\n        index: newIndex\n      });\n    } else {\n      const [newPath] = programPath.unshiftContainer(\"body\", node);\n      this._lastImports.set(programPath, [{\n        path: newPath,\n        index: newIndex\n      }]);\n    }\n  }\n  _ensure(map, programPath, Collection) {\n    let collection = map.get(programPath);\n    if (!collection) {\n      collection = new Collection();\n      map.set(programPath, collection);\n    }\n    return collection;\n  }\n  _normalizeKey(programPath, url, name = \"\") {\n    const {\n      sourceType\n    } = programPath.node;\n\n    // If we rely on the imported binding (the \"name\" parameter), we also need to cache\n    // based on the sourceType. This is because the module transforms change the names\n    // of the import variables.\n    return `${name && sourceType}::${url}::${name}`;\n  }\n}\nexports.default = ImportsCachedInjector;"],"mappings":"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","ignoreList":[]}