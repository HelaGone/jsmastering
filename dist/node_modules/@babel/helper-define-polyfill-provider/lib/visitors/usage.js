"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
exports.__esModule = true;
exports["default"] = void 0;
var _utils = require("../utils");
function isRemoved(path) {
  if (path.removed) return true;
  if (!path.parentPath) return false;
  if (path.listKey) {
    if (!path.parentPath.node[path.listKey].includes(path.node)) return true;
  } else {
    if (path.parentPath.node[path.key] !== path.node) return true;
  }
  return isRemoved(path.parentPath);
}
var _default = function _default(callProvider) {
  function property(object, key, placement, path) {
    return callProvider({
      kind: "property",
      object: object,
      key: key,
      placement: placement
    }, path);
  }
  function handleReferencedIdentifier(path) {
    var name = path.node.name,
      scope = path.scope;
    if (scope.getBindingIdentifier(name)) return;
    callProvider({
      kind: "global",
      name: name
    }, path);
  }
  function analyzeMemberExpression(path) {
    var key = (0, _utils.resolveKey)(path.get("property"), path.node.computed);
    return {
      key: key,
      handleAsMemberExpression: !!key && key !== "prototype"
    };
  }
  return {
    // Symbol(), new Promise
    ReferencedIdentifier: function ReferencedIdentifier(path) {
      var parentPath = path.parentPath;
      if (parentPath.isMemberExpression({
        object: path.node
      }) && analyzeMemberExpression(parentPath).handleAsMemberExpression) {
        return;
      }
      handleReferencedIdentifier(path);
    },
    MemberExpression: function MemberExpression(path) {
      var _analyzeMemberExpress = analyzeMemberExpression(path),
        key = _analyzeMemberExpress.key,
        handleAsMemberExpression = _analyzeMemberExpress.handleAsMemberExpression;
      if (!handleAsMemberExpression) return;
      var object = path.get("object");
      var objectIsGlobalIdentifier = object.isIdentifier();
      if (objectIsGlobalIdentifier) {
        var binding = object.scope.getBinding(object.node.name);
        if (binding) {
          if (binding.path.isImportNamespaceSpecifier()) return;
          objectIsGlobalIdentifier = false;
        }
      }
      var source = (0, _utils.resolveSource)(object);
      var skipObject = property(source.id, key, source.placement, path);
      skipObject || (skipObject = !objectIsGlobalIdentifier || path.shouldSkip || object.shouldSkip || isRemoved(object));
      if (!skipObject) handleReferencedIdentifier(object);
    },
    ObjectPattern: function ObjectPattern(path) {
      var parentPath = path.parentPath,
        parent = path.parent;
      var obj;

      // const { keys, values } = Object
      if (parentPath.isVariableDeclarator()) {
        obj = parentPath.get("init");
        // ({ keys, values } = Object)
      } else if (parentPath.isAssignmentExpression()) {
        obj = parentPath.get("right");
        // !function ({ keys, values }) {...} (Object)
        // resolution does not work after properties transform :-(
      } else if (parentPath.isFunction()) {
        var grand = parentPath.parentPath;
        if (grand.isCallExpression() || grand.isNewExpression()) {
          if (grand.node.callee === parent) {
            obj = grand.get("arguments")[path.key];
          }
        }
      }
      var id = null;
      var placement = null;
      if (obj) {
        var _ref = (0, _utils.resolveSource)(obj);
        id = _ref.id;
        placement = _ref.placement;
      }
      var _iterator = _createForOfIteratorHelper(path.get("properties")),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var prop = _step.value;
          if (prop.isObjectProperty()) {
            var key = (0, _utils.resolveKey)(prop.get("key"));
            if (key) property(id, key, placement, prop);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    BinaryExpression: function BinaryExpression(path) {
      if (path.node.operator !== "in") return;
      var source = (0, _utils.resolveSource)(path.get("right"));
      var key = (0, _utils.resolveKey)(path.get("left"), true);
      if (!key) return;
      callProvider({
        kind: "in",
        object: source.id,
        key: key,
        placement: source.placement
      }, path);
    }
  };
};
exports["default"] = _default;
//# sourceMappingURL=usage.js.map