{"version":3,"file":"index.js","names":["_t","require","assignmentExpression","expressionStatement","identifier","visitor","Scope","path","state","kind","skip","FunctionParent","VariableDeclaration","node","nodes","declarations","get","firstId","_iterator","_createForOfIteratorHelper","_step","s","n","done","declar","value","id","init","push","_i","_Object$keys","Object","keys","getBindingIdentifiers","length","name","emit","err","e","f","parentPath","isFor","left","replaceWith","replaceWithMultiple","hoistVariables","arguments","undefined","traverse"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  assignmentExpression,\n  expressionStatement,\n  identifier,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Visitor } from \"@babel/traverse\";\n\nexport type EmitFunction = (\n  id: t.Identifier,\n  idName: string,\n  hasInit: boolean,\n) => any;\n\ntype State = {\n  kind: \"var\" | \"let\";\n  emit: EmitFunction;\n};\n\ntype Unpacked<T> = T extends (infer U)[] ? U : T;\n\nconst visitor: Visitor<State> = {\n  Scope(path, state) {\n    if (state.kind === \"let\") path.skip();\n  },\n\n  FunctionParent(path) {\n    path.skip();\n  },\n\n  VariableDeclaration(path, state) {\n    if (state.kind && path.node.kind !== state.kind) return;\n\n    const nodes = [];\n\n    const declarations: ReadonlyArray<\n      NodePath<Unpacked<t.VariableDeclaration[\"declarations\"]>>\n    > = path.get(\"declarations\");\n    let firstId;\n\n    for (const declar of declarations) {\n      firstId = declar.node.id;\n\n      if (declar.node.init) {\n        nodes.push(\n          expressionStatement(\n            assignmentExpression(\"=\", declar.node.id, declar.node.init),\n          ),\n        );\n      }\n\n      for (const name of Object.keys(declar.getBindingIdentifiers())) {\n        state.emit(identifier(name), name, declar.node.init !== null);\n      }\n    }\n\n    // for (var i in test)\n    if (path.parentPath.isFor({ left: path.node })) {\n      path.replaceWith(firstId);\n    } else {\n      path.replaceWithMultiple(nodes);\n    }\n  },\n};\n\nexport default function hoistVariables(\n  path: NodePath,\n  emit: EmitFunction,\n  kind: \"var\" | \"let\" = \"var\",\n) {\n  path.traverse(visitor, { kind, emit });\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,EAAA,GAAAC,OAAA;AAIsB,IAHpBC,oBAAoB,GAEVF,EAAA,CAFVE,oBAAoB;EACpBC,mBAAmB,GACTH,EAAA,CADVG,mBAAmB;EACnBC,UAAA,GAAUJ,EAAA,CAAVI,UAAA;AAkBF,IAAMC,OAAuB,GAAG;EAC9BC,KAAK,WAAAA,MAACC,IAAI,EAAEC,KAAK,EAAE;IACjB,IAAIA,KAAK,CAACC,IAAI,KAAK,KAAK,EAAEF,IAAI,CAACG,IAAI,CAAC,CAAC;EACvC,CAAC;EAEDC,cAAc,WAAAA,eAACJ,IAAI,EAAE;IACnBA,IAAI,CAACG,IAAI,CAAC,CAAC;EACb,CAAC;EAEDE,mBAAmB,WAAAA,oBAACL,IAAI,EAAEC,KAAK,EAAE;IAC/B,IAAIA,KAAK,CAACC,IAAI,IAAIF,IAAI,CAACM,IAAI,CAACJ,IAAI,KAAKD,KAAK,CAACC,IAAI,EAAE;IAEjD,IAAMK,KAAK,GAAG,EAAE;IAEhB,IAAMC,YAEL,GAAGR,IAAI,CAACS,GAAG,CAAC,cAAc,CAAC;IAC5B,IAAIC,OAAO;IAAA,IAAAC,SAAA,GAAAC,0BAAA,CAEUJ,YAAY;MAAAK,KAAA;IAAA;MAAjC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAmC;QAAA,IAAxBC,MAAM,GAAAJ,KAAA,CAAAK,KAAA;QACfR,OAAO,GAAGO,MAAM,CAACX,IAAI,CAACa,EAAE;QAExB,IAAIF,MAAM,CAACX,IAAI,CAACc,IAAI,EAAE;UACpBb,KAAK,CAACc,IAAI,CACRzB,mBAAmB,CACjBD,oBAAoB,CAAC,GAAG,EAAEsB,MAAM,CAACX,IAAI,CAACa,EAAE,EAAEF,MAAM,CAACX,IAAI,CAACc,IAAI,CAC5D,CACF,CAAC;QACH;QAEA,SAAAE,EAAA,MAAAC,YAAA,GAAmBC,MAAM,CAACC,IAAI,CAACR,MAAM,CAACS,qBAAqB,CAAC,CAAC,CAAC,EAAAJ,EAAA,GAAAC,YAAA,CAAAI,MAAA,EAAAL,EAAA,IAAE;UAA3D,IAAMM,IAAI,GAAAL,YAAA,CAAAD,EAAA;UACbrB,KAAK,CAAC4B,IAAI,CAAChC,UAAU,CAAC+B,IAAI,CAAC,EAAEA,IAAI,EAAEX,MAAM,CAACX,IAAI,CAACc,IAAI,KAAK,IAAI,CAAC;QAC/D;MACF;IAAA,SAAAU,GAAA;MAAAnB,SAAA,CAAAoB,CAAA,CAAAD,GAAA;IAAA;MAAAnB,SAAA,CAAAqB,CAAA;IAAA;IAGA,IAAIhC,IAAI,CAACiC,UAAU,CAACC,KAAK,CAAC;MAAEC,IAAI,EAAEnC,IAAI,CAACM;IAAK,CAAC,CAAC,EAAE;MAC9CN,IAAI,CAACoC,WAAW,CAAC1B,OAAO,CAAC;IAC3B,CAAC,MAAM;MACLV,IAAI,CAACqC,mBAAmB,CAAC9B,KAAK,CAAC;IACjC;EACF;AACF,CAAC;AAEc,SAAS+B,cAAcA,CACpCtC,IAAc,EACd6B,IAAkB,EAElB;EAAA,IADA3B,IAAmB,GAAAqC,SAAA,CAAAZ,MAAA,QAAAY,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;EAE3BvC,IAAI,CAACyC,QAAQ,CAAC3C,OAAO,EAAE;IAAEI,IAAI,EAAJA,IAAI;IAAE2B,IAAA,EAAAA;EAAK,CAAC,CAAC;AACxC","ignoreList":[]}