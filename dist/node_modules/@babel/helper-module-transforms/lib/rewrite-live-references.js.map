{"version":3,"file":"rewrite-live-references.js","names":["_assert","require","_core","_helperSimpleAccess","_core$types","types","assignmentExpression","cloneNode","expressionStatement","getOuterBindingIdentifiers","identifier","isArrowFunctionExpression","isClassExpression","isFunctionExpression","isIdentifier","isMemberExpression","isVariableDeclaration","jsxIdentifier","jsxMemberExpression","memberExpression","numericLiteral","sequenceExpression","stringLiteral","variableDeclaration","variableDeclarator","isInType","path","parent","type","parentPath","exportKind","isStatement","isExpression","rewriteLiveReferences","programPath","metadata","wrapReference","imported","Map","exported","requeueInParent","requeue","_iterator","_createForOfIteratorHelper","source","_step","s","n","done","_step$value","_slicedToArray","value","data","_iterator3","imports","_step3","_step3$value","localName","importName","set","err","e","f","_iterator4","importsNamespace","_step4","_iterator2","local","_step2","_exportMeta","_step2$value","exportMeta","get","push","apply","_toConsumableArray","names","rewriteBindingInitVisitorState","scope","traverse","rewriteBindingInitVisitor","bindingNames","Set","concat","Array","from","keys","rewriteReferencesVisitorState","seen","WeakSet","buildImportReference","_ref","identNode","_ref2","meta","referenced","wrap","_wrapReference","namespace","name","_wrapReference2","interop","computed","stringSpecifiers","has","rewriteReferencesVisitor","Scope","skip","ClassDeclaration","id","node","Error","exportNames","length","statement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","isVar","kind","_iterator5","_step5","decl","init","buildUndefinedNode","_i","_Object$keys","Object","localExpr","exportsObjectName","exportName","currentScope","hasOwnBinding","rename","reduce","expr","buildImportThrow","template","expression","ast","_templateObject","_taggedTemplateLiteral","ReferencedIdentifier","add","importData","buildCodeFrameError","localBinding","getBinding","rootBinding","ref","loc","isCallExpression","callee","isOptionalCallExpression","isTaggedTemplateExpression","tag","replaceWith","isJSXIdentifier","object","property","UpdateExpression","arg","update","exportedNames","operator","prefix","generateDeclaredUidIdentifier","AssignmentExpression","exit","_this","left","assignment","right","ids","programScopeIds","filter","find","items","forEach","isExpressionStatement","ForOfStatementForInStatement","programScope","didTransformExport","importConstViolationName","loopBodyScope","_i2","_Object$keys2","ensureBlock","bodyPath","newLoopId","generateUidIdentifierBasedOnNode","registerDeclaration","unshiftContainer"],"sources":["../src/rewrite-live-references.ts"],"sourcesContent":["import assert from \"assert\";\nimport { template, types as t } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport simplifyAccess from \"@babel/helper-simple-access\";\n\nimport type { ModuleMetadata } from \"./normalize-and-load-metadata.ts\";\n\nconst {\n  assignmentExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isArrowFunctionExpression,\n  isClassExpression,\n  isFunctionExpression,\n  isIdentifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} = t;\n\ninterface RewriteReferencesVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n  imported: Map<any, any>;\n  buildImportReference: (\n    [source, importName, localName]: readonly [string, string, string],\n    identNode: t.Identifier | t.CallExpression | t.JSXIdentifier,\n  ) => any;\n  seen: WeakSet<object>;\n}\n\ninterface RewriteBindingInitVisitorState {\n  exported: Map<any, any>;\n  metadata: ModuleMetadata;\n  requeueInParent: (path: NodePath) => void;\n  scope: Scope;\n}\n\nfunction isInType(path: NodePath) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n      case \"ExportSpecifier\":\n        return (\n          (\n            path.parentPath.parent as\n              | t.ExportDefaultDeclaration\n              | t.ExportNamedDeclaration\n          ).exportKind === \"type\"\n        );\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n    }\n  } while ((path = path.parentPath));\n}\n\nexport default function rewriteLiveReferences(\n  programPath: NodePath<t.Program>,\n  metadata: ModuleMetadata,\n  wrapReference: (ref: t.Expression, payload: unknown) => null | t.Expression,\n) {\n  const imported = new Map();\n  const exported = new Map();\n  const requeueInParent = (path: NodePath) => {\n    // Manually re-queue `exports.default =` expressions so that the ES3\n    // transform has an opportunity to convert them. Ideally this would\n    // happen automatically from the replaceWith above. See #4140 for\n    // more info.\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  // Rewrite initialization of bindings to update exports.\n  const rewriteBindingInitVisitorState: RewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported, // local name => exported name list\n  };\n  programPath.traverse(\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    rewriteBindingInitVisitor,\n    rewriteBindingInitVisitorState,\n  );\n\n  // NOTE(logan): The 'Array.from' calls are to make this code with in loose mode.\n  const bindingNames = new Set([\n    ...Array.from(imported.keys()),\n    ...Array.from(exported.keys()),\n  ]);\n  if (process.env.BABEL_8_BREAKING) {\n    simplifyAccess(programPath, bindingNames);\n  } else {\n    // @ts-ignore(Babel 7 vs Babel 8) The third param has been removed in Babel 8.\n    simplifyAccess(programPath, bindingNames, false);\n  }\n\n  // Rewrite reads/writes from imports and exports to have the correct behavior.\n  const rewriteReferencesVisitorState: RewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported, // local / import\n    exported, // local name => exported name list\n    buildImportReference([source, importName, localName], identNode) {\n      const meta = metadata.source.get(source);\n      meta.referenced = true;\n\n      if (localName) {\n        if (meta.wrap) {\n          // @ts-expect-error Fixme: we should handle the case when identNode is a JSXIdentifier\n          identNode = wrapReference(identNode, meta.wrap) ?? identNode;\n        }\n        return identNode;\n      }\n\n      let namespace: t.Expression = identifier(meta.name);\n      if (meta.wrap) {\n        namespace = wrapReference(namespace, meta.wrap) ?? namespace;\n      }\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n\n      return memberExpression(\n        namespace,\n        computed ? stringLiteral(importName) : identifier(importName),\n        computed,\n      );\n    },\n  };\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\n/**\n * A visitor to inject export update statements during binding initialization.\n */\nconst rewriteBindingInitVisitor: Visitor<RewriteBindingInitVisitorState> = {\n  Scope(path) {\n    path.skip();\n  },\n  ClassDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    const { id } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n\n    const exportNames = exported.get(localName) || [];\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        buildBindingExportAssignmentExpression(\n          metadata,\n          exportNames,\n          identifier(localName),\n          path.scope,\n        ),\n      );\n      // @ts-expect-error todo(flow->ts): avoid mutations\n      statement._blockHoist = path.node._blockHoist;\n\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n  VariableDeclaration(path) {\n    const { requeueInParent, exported, metadata } = this;\n\n    const isVar = path.node.kind === \"var\";\n\n    for (const decl of path.get(\"declarations\")) {\n      const { id } = decl.node;\n      let { init } = decl.node;\n      if (\n        isIdentifier(id) &&\n        exported.has(id.name) &&\n        !isArrowFunctionExpression(init) &&\n        (!isFunctionExpression(init) || init.id) &&\n        (!isClassExpression(init) || init.id)\n      ) {\n        if (!init) {\n          if (isVar) {\n            // This variable might have already been assigned to, and the\n            // uninitalized declaration doesn't set it to `undefined` and does\n            // not updated the exported value.\n            continue;\n          } else {\n            init = path.scope.buildUndefinedNode();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        decl.node.init = buildBindingExportAssignmentExpression(\n          metadata,\n          exported.get(id.name),\n          init,\n          path.scope,\n        );\n        requeueInParent(decl.get(\"init\"));\n      } else {\n        for (const localName of Object.keys(\n          decl.getOuterBindingIdentifiers(),\n        )) {\n          if (exported.has(localName)) {\n            const statement = expressionStatement(\n              // eslint-disable-next-line @typescript-eslint/no-use-before-define\n              buildBindingExportAssignmentExpression(\n                metadata,\n                exported.get(localName),\n                identifier(localName),\n                path.scope,\n              ),\n            );\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            statement._blockHoist = path.node._blockHoist;\n\n            requeueInParent(path.insertAfter(statement)[0]);\n          }\n        }\n      }\n    }\n  },\n};\n\nconst buildBindingExportAssignmentExpression = (\n  metadata: ModuleMetadata,\n  exportNames: string[],\n  localExpr: t.Expression,\n  scope: Scope,\n) => {\n  const exportsObjectName = metadata.exportName;\n  for (\n    let currentScope = scope;\n    currentScope != null;\n    currentScope = currentScope.parent\n  ) {\n    if (currentScope.hasOwnBinding(exportsObjectName)) {\n      currentScope.rename(exportsObjectName);\n    }\n  }\n  return (exportNames || []).reduce((expr, exportName) => {\n    // class Foo {} export { Foo, Foo as Bar };\n    // as\n    // class Foo {} exports.Foo = exports.Bar = Foo;\n    const { stringSpecifiers } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\n      \"=\",\n      memberExpression(\n        identifier(exportsObjectName),\n        computed ? stringLiteral(exportName) : identifier(exportName),\n        /* computed */ computed,\n      ),\n      expr,\n    );\n  }, localExpr);\n};\n\nconst buildImportThrow = (localName: string) => {\n  return template.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor: Visitor<RewriteReferencesVisitorState> = {\n  ReferencedIdentifier(path) {\n    const { seen, buildImportReference, scope, imported, requeueInParent } =\n      this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n\n    const localName = path.node.name;\n\n    const importData = imported.get(localName);\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(\n          `Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` +\n            `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`,\n        );\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n\n      // redeclared in this scope\n      if (rootBinding !== localBinding) return;\n\n      const ref = buildImportReference(importData, path.node);\n\n      // Preserve the binding location so that sourcemaps are nicer.\n      ref.loc = path.node.loc;\n\n      if (\n        (path.parentPath.isCallExpression({ callee: path.node }) ||\n          path.parentPath.isOptionalCallExpression({ callee: path.node }) ||\n          path.parentPath.isTaggedTemplateExpression({ tag: path.node })) &&\n        isMemberExpression(ref)\n      ) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const { object, property } = ref;\n        path.replaceWith(\n          jsxMemberExpression(\n            // @ts-expect-error todo(flow->ts): possible bug `object` might not have a name\n            jsxIdentifier(object.name),\n            // @ts-expect-error todo(flow->ts): possible bug `property` might not have a name\n            jsxIdentifier(property.name),\n          ),\n        );\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n\n      // The path could have been replaced with an identifier that would\n      // otherwise be re-visited, so we skip processing its children.\n      path.skip();\n    }\n  },\n\n  UpdateExpression(path) {\n    const {\n      scope,\n      seen,\n      imported,\n      exported,\n      requeueInParent,\n      buildImportReference,\n    } = this;\n\n    if (seen.has(path.node)) return;\n\n    seen.add(path.node);\n\n    const arg = path.get(\"argument\");\n\n    // No change needed\n    if (arg.isMemberExpression()) return;\n\n    const update = path.node;\n\n    if (arg.isIdentifier()) {\n      const localName = arg.node.name;\n\n      // redeclared in this scope\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      const exportedNames = exported.get(localName);\n      const importData = imported.get(localName);\n\n      if (exportedNames?.length > 0 || importData) {\n        if (importData) {\n          path.replaceWith(\n            assignmentExpression(\n              update.operator[0] + \"=\",\n              buildImportReference(importData, arg.node),\n              buildImportThrow(localName),\n            ),\n          );\n        } else if (update.prefix) {\n          // ++foo\n          // =>   exports.foo = ++foo\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              cloneNode(update),\n              path.scope,\n            ),\n          );\n        } else {\n          // foo++\n          // =>   (ref = i++, exports.i = i, ref)\n          const ref = scope.generateDeclaredUidIdentifier(localName);\n\n          path.replaceWith(\n            sequenceExpression([\n              assignmentExpression(\"=\", cloneNode(ref), cloneNode(update)),\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n              cloneNode(ref),\n            ]),\n          );\n        }\n      }\n    }\n\n    requeueInParent(path);\n    path.skip();\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference,\n      } = this;\n\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n\n      const left = path.get(\"left\");\n\n      // No change needed\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        // Simple update-assign foo += 1; export { foo };\n        // =>   exports.foo =  (foo += 1);\n        const localName = left.node.name;\n\n        // redeclared in this scope\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n        if (exportedNames?.length > 0 || importData) {\n          assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, left.node);\n\n            assignment.right = sequenceExpression([\n              assignment.right,\n              buildImportThrow(localName),\n            ]);\n          }\n\n          path.replaceWith(\n            buildBindingExportAssignmentExpression(\n              this.metadata,\n              exportedNames,\n              assignment,\n              path.scope,\n            ),\n          );\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(\n          localName =>\n            scope.getBinding(localName) === path.scope.getBinding(localName),\n        );\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([\n            path.node.right,\n            buildImportThrow(id),\n          ]);\n        }\n\n        // Complex ({a, b, c} = {}); export { a, c };\n        // =>   ({a, b, c} = {}), (exports.a = a, exports.c = c);\n        const items: t.Expression[] = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n          if (exportedNames.length > 0) {\n            items.push(\n              buildBindingExportAssignmentExpression(\n                this.metadata,\n                exportedNames,\n                identifier(localName),\n                path.scope,\n              ),\n            );\n          }\n        });\n\n        if (items.length > 0) {\n          let node: t.Node = sequenceExpression(items);\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            // @ts-expect-error todo(flow->ts): avoid mutations\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    },\n  },\n  \"ForOfStatement|ForInStatement\"(\n    path: NodePath<t.ForOfStatement | t.ForInStatement>,\n  ) {\n    const { scope, node } = path;\n    const { left } = node;\n    const { exported, imported, scope: programScope } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n        importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path\n        .get(\"left\")\n        .replaceWith(\n          variableDeclaration(\"let\", [\n            variableDeclarator(cloneNode(newLoopId)),\n          ]),\n        );\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(assignmentExpression(\"=\", left, newLoopId)),\n        );\n      }\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\n          \"body\",\n          expressionStatement(buildImportThrow(importConstViolationName)),\n        );\n      }\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]}