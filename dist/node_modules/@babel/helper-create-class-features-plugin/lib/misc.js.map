{"version":3,"file":"misc.js","names":["_core","require","_helperEnvironmentVisitor","findBareSupers","traverse","visitors","merge","Super","path","node","parentPath","isCallExpression","callee","push","referenceVisitor","TSTypeAnnotationTypeAnnotation","skip","ReferencedIdentifier","_ref","scope","hasOwnBinding","name","rename","handleClassTDZ","state","classBinding","getBinding","classNameTDZError","file","addHelper","throwNode","types","callExpression","stringLiteral","replaceWith","sequenceExpression","classFieldDefinitionEvaluationTDZVisitor","injectInitialization","constructor","nodes","renamer","lastReturnsThis","length","isDerived","superClass","newConstructor","classMethod","identifier","blockStatement","params","restElement","body","template","statement","ast","_templateObject","_taggedTemplateLiteral","_path$get$unshiftCont","get","unshiftContainer","_path$get$unshiftCont2","_slicedToArray","bareSupers","isFirst","_i","_bareSupers","bareSuper","map","n","cloneNode","isExpressionStatement","allNodes","concat","_toConsumableArray","toExpression","thisExpression","insertAfter","memoiseComputedKey","keyNode","hint","isUidReference","isIdentifier","hasUid","isMemoiseAssignment","isAssignmentExpression","operator","left","ident","id","kind","assignmentExpression","extractComputedKeys","computedPaths","declarations","_iterator","_createForOfIteratorHelper","_step","s","done","computedPath","value","computedKey","isReferencedIdentifier","computedNode","isConstantExpression","assignment","generateUidBasedOnNode","expressionStatement","key","err","e","f"],"sources":["../src/misc.ts"],"sourcesContent":["import { template, traverse, types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { NodePath, Scope, Visitor, Binding } from \"@babel/traverse\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\n\nconst findBareSupers = traverse.visitors.merge<NodePath<t.CallExpression>[]>([\n  {\n    Super(path) {\n      const { node, parentPath } = path;\n      if (parentPath.isCallExpression({ callee: node })) {\n        this.push(parentPath);\n      }\n    },\n  },\n  environmentVisitor,\n]);\n\nconst referenceVisitor: Visitor<{ scope: Scope }> = {\n  \"TSTypeAnnotation|TypeAnnotation\"(\n    path: NodePath<t.TSTypeAnnotation | t.TypeAnnotation>,\n  ) {\n    path.skip();\n  },\n\n  ReferencedIdentifier(path: NodePath<t.Identifier>, { scope }) {\n    if (scope.hasOwnBinding(path.node.name)) {\n      scope.rename(path.node.name);\n      path.skip();\n    }\n  },\n};\n\ntype HandleClassTDZState = {\n  classBinding: Binding;\n  file: File;\n};\n\nfunction handleClassTDZ(\n  path: NodePath<t.Identifier>,\n  state: HandleClassTDZState,\n) {\n  if (\n    state.classBinding &&\n    state.classBinding === path.scope.getBinding(path.node.name)\n  ) {\n    const classNameTDZError = state.file.addHelper(\"classNameTDZError\");\n    const throwNode = t.callExpression(classNameTDZError, [\n      t.stringLiteral(path.node.name),\n    ]);\n\n    path.replaceWith(t.sequenceExpression([throwNode, path.node]));\n    path.skip();\n  }\n}\n\nconst classFieldDefinitionEvaluationTDZVisitor: Visitor<HandleClassTDZState> = {\n  ReferencedIdentifier: handleClassTDZ,\n};\n\ninterface RenamerState {\n  scope: Scope;\n}\n\nexport function injectInitialization(\n  path: NodePath<t.Class>,\n  constructor: NodePath<t.ClassMethod> | undefined,\n  nodes: t.ExpressionStatement[],\n  renamer?: (visitor: Visitor<RenamerState>, state: RenamerState) => void,\n  lastReturnsThis?: boolean,\n) {\n  if (!nodes.length) return;\n\n  const isDerived = !!path.node.superClass;\n\n  if (!constructor) {\n    const newConstructor = t.classMethod(\n      \"constructor\",\n      t.identifier(\"constructor\"),\n      [],\n      t.blockStatement([]),\n    );\n\n    if (isDerived) {\n      newConstructor.params = [t.restElement(t.identifier(\"args\"))];\n      newConstructor.body.body.push(template.statement.ast`super(...args)`);\n    }\n\n    [constructor] = path\n      .get(\"body\")\n      .unshiftContainer(\"body\", newConstructor) as NodePath<t.ClassMethod>[];\n  }\n\n  if (renamer) {\n    renamer(referenceVisitor, { scope: constructor.scope });\n  }\n\n  if (isDerived) {\n    const bareSupers: NodePath<t.CallExpression>[] = [];\n    constructor.traverse(findBareSupers, bareSupers);\n    let isFirst = true;\n    for (const bareSuper of bareSupers) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        nodes = nodes.map(n => t.cloneNode(n));\n      }\n      if (!bareSuper.parentPath.isExpressionStatement()) {\n        const allNodes: t.Expression[] = [\n          bareSuper.node,\n          ...nodes.map(n => t.toExpression(n)),\n        ];\n        if (!lastReturnsThis) allNodes.push(t.thisExpression());\n        bareSuper.replaceWith(t.sequenceExpression(allNodes));\n      } else {\n        bareSuper.insertAfter(nodes);\n      }\n    }\n  } else {\n    constructor.get(\"body\").unshiftContainer(\"body\", nodes);\n  }\n}\n\ntype ComputedKeyAssignmentExpression = t.AssignmentExpression & {\n  left: t.Identifier;\n};\n\n/**\n * Try to memoise a computed key.\n * It returns undefined when the computed key is an uid reference, otherwise\n * an assignment expression `memoiserId = computed key`\n * @export\n * @param {t.Expression} keyNode Computed key\n * @param {Scope} scope The scope where memoiser id should be registered\n * @param {string} hint The memoiser id hint\n * @returns {(ComputedKeyAssignmentExpression | undefined)}\n */\nexport function memoiseComputedKey(\n  keyNode: t.Expression,\n  scope: Scope,\n  hint: string,\n): ComputedKeyAssignmentExpression | undefined {\n  const isUidReference = t.isIdentifier(keyNode) && scope.hasUid(keyNode.name);\n  if (isUidReference) {\n    return;\n  }\n  const isMemoiseAssignment =\n    t.isAssignmentExpression(keyNode, { operator: \"=\" }) &&\n    t.isIdentifier(keyNode.left) &&\n    scope.hasUid(keyNode.left.name);\n  if (isMemoiseAssignment) {\n    return t.cloneNode(keyNode as ComputedKeyAssignmentExpression);\n  } else {\n    const ident = t.identifier(hint);\n    // Declaring in the same block scope\n    // Ref: https://github.com/babel/babel/pull/10029/files#diff-fbbdd83e7a9c998721c1484529c2ce92\n    scope.push({\n      id: ident,\n      kind: \"let\",\n    });\n    return t.assignmentExpression(\n      \"=\",\n      t.cloneNode(ident),\n      keyNode,\n    ) as ComputedKeyAssignmentExpression;\n  }\n}\n\nexport function extractComputedKeys(\n  path: NodePath<t.Class>,\n  computedPaths: NodePath<t.ClassProperty | t.ClassMethod>[],\n  file: File,\n) {\n  const { scope } = path;\n  const declarations: t.ExpressionStatement[] = [];\n  const state = {\n    classBinding: path.node.id && scope.getBinding(path.node.id.name),\n    file,\n  };\n  for (const computedPath of computedPaths) {\n    const computedKey = computedPath.get(\"key\");\n    if (computedKey.isReferencedIdentifier()) {\n      handleClassTDZ(computedKey, state);\n    } else {\n      computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);\n    }\n\n    const computedNode = computedPath.node;\n    // Make sure computed property names are only evaluated once (upon class definition)\n    // and in the right order in combination with static properties\n    if (!computedKey.isConstantExpression()) {\n      const assignment = memoiseComputedKey(\n        computedKey.node,\n        scope,\n        scope.generateUidBasedOnNode(computedKey.node),\n      );\n      if (assignment) {\n        declarations.push(t.expressionStatement(assignment));\n        computedNode.key = t.cloneNode(assignment.left);\n      }\n    }\n  }\n\n  return declarations;\n}\n"],"mappings":"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","ignoreList":[]}