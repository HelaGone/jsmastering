{"version":3,"file":"fields.js","names":["_core","require","_helperReplaceSupers","_helperEnvironmentVisitor","_helperMemberExpressionToFunctions","_helperOptimiseCallExpression","_helperAnnotateAsPure","_helperSkipTransparentExpressionWrappers","ts","newHelpers","file","availableHelper","buildPrivateNamesMap","className","privateFieldsAsSymbolsOrProperties","props","privateNamesMap","Map","classBrandId","_iterator","_createForOfIteratorHelper","_step","s","n","done","prop","value","isPrivate","name","node","key","id","update","get","isMethod","isProperty","isStatic","initAdded","_classBrandId","scope","generateUidIdentifier","concat","method","set","isClassPrivateMethod","kind","body","$","length","types","isReturnStatement","isCallExpression","argument","arguments","isThisExpression","isIdentifier","callee","getId","cloneNode","getterDeclared","params","isExpressionStatement","expression","setId","setterDeclared","methodId","err","e","f","buildPrivateNamesNodes","privateFieldsAsProperties","privateFieldsAsSymbols","state","initNodes","injectedIds","Set","_iterator2","_step2","_step2$value","_slicedToArray","isGetterOrSetter","init","callExpression","addHelper","stringLiteral","identifier","has","add","newExpression","push","template","statement","ast","_templateObject","_taggedTemplateLiteral","privateNameVisitorFactory","visitor","nestedVisitor","traverse","visitors","merge","Object","assign","privateNameVisitor","Class","path","visiblePrivateNames","redeclared","_iterator3","_step3","skipKey","PrivateName","_ref3","noDocumentAll","parentPath","isMemberExpression","property","isOptionalMemberExpression","includes","handle","unshadow","innerBinding","_scope","hasBinding","bindingIdentifierEquals","rename","parent","buildCheckInRHS","rhs","inRHSIsObject","privateInVisitor","BinaryExpression","_ref4","_path$node","operator","left","right","isPrivateName","classRef","_privateNamesMap$get","replaceWith","_templateObject2","_privateNamesMap$get2","_templateObject3","_templateObject4","readOnlyError","writeOnlyError","console","warn","buildUndefinedNode","buildStaticPrivateFieldAccess","expr","noUninitializedPrivateFieldAccess","memberExpression","privateNameHandlerSpec","memoise","member","count","object","memo","maybeGenerateMemoised","memoiser","receiver","_privateNamesMap$get3","helperName","skipCheck","sequenceExpression","boundGet","_privateNamesMap$get4","assignmentExpression","destructureSet","_privateNamesMap$get5","helper","_unused","Error","getCall","ref","pop","_templateObject5","setCall","buildCodeFrameError","args","computed","arrayExpression","slice","call","optionalCall","_delete","privateNameHandlerLoose","_templateObject6","BASE","REF","PROP","simpleSet","optionalCallExpression","transformPrivateNamesUsage","_ref5","size","handler","buildPrivateFieldInitLoose","_privateNamesMap$get6","inheritPropComments","_templateObject7","buildPrivateInstanceFieldInitSpec","_privateNamesMap$get7","_templateObject8","expressionStatement","thisExpression","_templateObject9","buildPrivateStaticFieldInitSpec","privateName","_templateObject10","variableDeclaration","variableDeclarator","buildPrivateStaticFieldInitSpecOld","_templateObject11","_templateObject12","buildPrivateMethodInitLoose","_templateObject13","_templateObject14","buildPrivateInstanceMethodInitSpec","buildPrivateAccessorInitialization","buildPrivateInstanceMethodInitialization","_templateObject15","_templateObject16","_templateObject17","_templateObject18","buildPublicFieldInitLoose","_prop$node","isLiteral","buildPublicFieldInitSpec","_prop$node2","buildPrivateStaticMethodInitLoose","_templateObject19","_templateObject20","buildPrivateMethodDeclaration","undefined","_prop$node3","generator","async","isGetter","isSetter","thisArg","thisRef","argumentsPath","thisContextVisitor","argumentsId","_templateObject21","_iterator4","_step4","unshift","declId","functionDeclaration","Identifier","UnaryExpression","skipTransparentExprWrapperNodes","booleanLiteral","ThisExpression","needsClassRef","MetaProperty","meta","innerReferencesVisitor","ReferencedIdentifier","replaceThisContext","innerBindingRef","_state$thisRef","isNameOrLength","_ref6","type","inheritLeadingComments","inheritInnerComments","buildFieldsInitNodes","superRef","setPublicClassFields","constantSuper","_ref","_ref2","classRefFlags","injectSuperRef","staticNodes","instanceNodes","lastInstanceNodeReturnsThis","pureStaticNodes","classBindingNode","getSuperRef","_injectSuperRef","generateUidIdentifierBasedOnNode","classRefForInnerBinding","_iterator5","_step5","_loop","isClassProperty","assertFieldTransformed","isStaticBlock","isInstance","isPublic","isField","methodPath","refToPreserve","getObjectRef","replace","replaced","blockBody","inheritsComments","_templateObject22","filter","Boolean","wrapClass","_iterator6","_step6","leadingComments","remove","superClass","isClassExpression"],"sources":["../src/fields.ts"],"sourcesContent":["import { template, traverse, types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport memberExpressionToFunctions from \"@babel/helper-member-expression-to-functions\";\nimport type {\n  Handler,\n  HandlerState,\n} from \"@babel/helper-member-expression-to-functions\";\nimport optimiseCall from \"@babel/helper-optimise-call-expression\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport { skipTransparentExprWrapperNodes } from \"@babel/helper-skip-transparent-expression-wrappers\";\n\nimport * as ts from \"./typescript.ts\";\n\ninterface PrivateNameMetadata {\n  id: t.Identifier;\n  static: boolean;\n  method: boolean;\n  getId?: t.Identifier;\n  setId?: t.Identifier;\n  methodId?: t.Identifier;\n  initAdded?: boolean;\n  getterDeclared?: boolean;\n  setterDeclared?: boolean;\n}\n\ntype PrivateNamesMapGeneric<V> = Map<string, V>;\n\ntype PrivateNamesMap = PrivateNamesMapGeneric<PrivateNameMetadata>;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var newHelpers = (file: File) => {\n    if (!process.env.IS_PUBLISH) {\n      const { comments } = file.ast;\n      // This is needed for the test in\n      // babel-plugin-transform-class-properties/test/fixtures/regression/old-helpers\n      if (comments?.some(c => c.value.includes(\"@force-old-private-helpers\"))) {\n        return false;\n      }\n    }\n    return file.availableHelper(\"classPrivateFieldGet2\");\n  };\n}\n\nexport function buildPrivateNamesMap(\n  className: string,\n  privateFieldsAsSymbolsOrProperties: boolean,\n  props: PropPath[],\n  file: File,\n) {\n  const privateNamesMap: PrivateNamesMap = new Map();\n  let classBrandId: t.Identifier;\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const { name } = prop.node.key.id;\n      let update: PrivateNameMetadata = privateNamesMap.get(name);\n      if (!update) {\n        const isMethod = !prop.isProperty();\n        const isStatic = prop.node.static;\n        let initAdded = false;\n        let id: t.Identifier;\n        if (\n          !privateFieldsAsSymbolsOrProperties &&\n          (process.env.BABEL_8_BREAKING || newHelpers(file)) &&\n          isMethod &&\n          !isStatic\n        ) {\n          initAdded = !!classBrandId;\n          classBrandId ??= prop.scope.generateUidIdentifier(\n            `${className}_brand`,\n          );\n          id = classBrandId;\n        } else {\n          id = prop.scope.generateUidIdentifier(name);\n        }\n        update = { id, static: isStatic, method: isMethod, initAdded };\n        privateNamesMap.set(name, update);\n      }\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          const { body } = prop.node.body;\n          let $: t.Node;\n          if (\n            // If we have\n            //   get #foo() { return _some_fn(this); }\n            // we can use _some_fn directly.\n            body.length === 1 &&\n            t.isReturnStatement(($ = body[0])) &&\n            t.isCallExpression(($ = $.argument)) &&\n            $.arguments.length === 1 &&\n            t.isThisExpression($.arguments[0]) &&\n            t.isIdentifier(($ = $.callee))\n          ) {\n            update.getId = t.cloneNode($);\n            update.getterDeclared = true;\n          } else {\n            update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n          }\n        } else if (prop.node.kind === \"set\") {\n          const { params } = prop.node;\n          const { body } = prop.node.body;\n          let $: t.Node;\n          if (\n            // If we have\n            //   set #foo(val) { _some_fn(this, val); }\n            // we can use _some_fn directly.\n            body.length === 1 &&\n            t.isExpressionStatement(($ = body[0])) &&\n            t.isCallExpression(($ = $.expression)) &&\n            $.arguments.length === 2 &&\n            t.isThisExpression($.arguments[0]) &&\n            t.isIdentifier($.arguments[1], {\n              name: (params[0] as t.Identifier).name,\n            }) &&\n            t.isIdentifier(($ = $.callee))\n          ) {\n            update.setId = t.cloneNode($);\n            update.setterDeclared = true;\n          } else {\n            update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n          }\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n      privateNamesMap.set(name, update);\n    }\n  }\n  return privateNamesMap;\n}\n\nexport function buildPrivateNamesNodes(\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties: boolean,\n  privateFieldsAsSymbols: boolean,\n  state: File,\n) {\n  const initNodes: t.Statement[] = [];\n\n  const injectedIds = new Set<string>();\n\n  for (const [name, value] of privateNamesMap) {\n    // - When the privateFieldsAsProperties assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   secret non-enumerable property. Hence, we also need to generate that\n    //   key (using the classPrivateFieldLooseKey helper).\n    // - When the privateFieldsAsSymbols assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   unique Symbol to define a non-enumerable property.\n    // - In spec mode, only instance fields need a \"private name\" initializer\n    //   because static fields are directly assigned to a variable in the\n    //   buildPrivateStaticFieldInitSpec function.\n    const { static: isStatic, method: isMethod, getId, setId } = value;\n    const isGetterOrSetter = getId || setId;\n    const id = t.cloneNode(value.id);\n\n    let init: t.Expression;\n\n    if (privateFieldsAsProperties) {\n      init = t.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [\n        t.stringLiteral(name),\n      ]);\n    } else if (privateFieldsAsSymbols) {\n      init = t.callExpression(t.identifier(\"Symbol\"), [t.stringLiteral(name)]);\n    } else if (!isStatic) {\n      if (injectedIds.has(id.name)) continue;\n      injectedIds.add(id.name);\n\n      init = t.newExpression(\n        t.identifier(\n          isMethod &&\n            (process.env.BABEL_8_BREAKING ||\n              !isGetterOrSetter ||\n              newHelpers(state))\n            ? \"WeakSet\"\n            : \"WeakMap\",\n        ),\n        [],\n      );\n    }\n\n    if (init) {\n      if (!privateFieldsAsSymbols) {\n        annotateAsPure(init);\n      }\n      initNodes.push(template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n\n  return initNodes;\n}\n\nexport interface PrivateNameVisitorState<V> {\n  privateNamesMap: PrivateNamesMapGeneric<V>;\n  redeclared?: string[];\n}\n\n// Traverses the class scope, handling private name references. If an inner\n// class redeclares the same private name, it will hand off traversal to the\n// restricted visitor (which doesn't traverse the inner class's inner scope).\nexport function privateNameVisitorFactory<S, V>(\n  visitor: Visitor<PrivateNameVisitorState<V> & S>,\n) {\n  // Traverses the outer portion of a class, without touching the class's inner\n  // scope, for private names.\n  const nestedVisitor = traverse.visitors.merge([\n    { ...visitor },\n    environmentVisitor,\n  ]);\n\n  // @ts-expect-error: TS2590: Expression produces a union type that is too complex to represent.\n  const privateNameVisitor: Visitor<\n    PrivateNameVisitorState<PrivateNameMetadata> & S\n  > = {\n    ...visitor,\n\n    Class(path) {\n      const { privateNamesMap } = this;\n      const body = path.get(\"body.body\");\n\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const { name } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n\n      // If the class doesn't redeclare any private fields, we can continue with\n      // our overall traversal.\n      if (!redeclared.length) {\n        return;\n      }\n\n      // This class redeclares some private field. We need to process the outer\n      // environment with access to all the outer privates, then we can process\n      // the inner environment with only the still-visible outer privates.\n      path.get(\"body\").traverse(nestedVisitor, {\n        ...this,\n        redeclared,\n      });\n      path.traverse(privateNameVisitor, {\n        ...this,\n        privateNamesMap: visiblePrivateNames,\n      });\n\n      // We'll eventually hit this class node again with the overall Class\n      // Features visitor, which'll process the redeclared privates.\n      path.skipKey(\"body\");\n    },\n  };\n\n  return privateNameVisitor;\n}\n\ninterface PrivateNameState {\n  privateNamesMap: PrivateNamesMap;\n  classRef: t.Identifier;\n  file: File;\n  noDocumentAll: boolean;\n  noUninitializedPrivateFieldAccess: boolean;\n  innerBinding?: t.Identifier;\n}\n\nconst privateNameVisitor = privateNameVisitorFactory<\n  HandlerState<PrivateNameState> & PrivateNameState,\n  PrivateNameMetadata\n>({\n  PrivateName(path, { noDocumentAll }) {\n    const { privateNamesMap, redeclared } = this;\n    const { node, parentPath } = path;\n\n    if (\n      !parentPath.isMemberExpression({ property: node }) &&\n      !parentPath.isOptionalMemberExpression({ property: node })\n    ) {\n      return;\n    }\n    const { name } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    this.handle(parentPath, noDocumentAll);\n  },\n});\n\n// rename all bindings that shadows innerBinding\nfunction unshadow(\n  name: string,\n  scope: Scope,\n  innerBinding: t.Identifier | undefined,\n) {\n  // in some cases, scope.getBinding(name) === undefined\n  // so we check hasBinding to avoid keeping looping\n  // see: https://github.com/babel/babel/pull/13656#discussion_r686030715\n  while (\n    scope?.hasBinding(name) &&\n    !scope.bindingIdentifierEquals(name, innerBinding)\n  ) {\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\n\nexport function buildCheckInRHS(\n  rhs: t.Expression,\n  file: File,\n  inRHSIsObject?: boolean,\n) {\n  if (inRHSIsObject || !file.availableHelper?.(\"checkInRHS\")) return rhs;\n  return t.callExpression(file.addHelper(\"checkInRHS\"), [rhs]);\n}\n\nconst privateInVisitor = privateNameVisitorFactory<\n  {\n    classRef: t.Identifier;\n    file: File;\n    innerBinding?: t.Identifier;\n    privateFieldsAsProperties: boolean;\n  },\n  PrivateNameMetadata\n>({\n  BinaryExpression(path, { file }) {\n    const { operator, left, right } = path.node;\n    if (operator !== \"in\") return;\n    if (!t.isPrivateName(left)) return;\n\n    const { privateFieldsAsProperties, privateNamesMap, redeclared } = this;\n\n    const { name } = left.id;\n\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    // if there are any local variable shadowing classRef, unshadow it\n    // see #12960\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n\n    if (privateFieldsAsProperties) {\n      const { id } = privateNamesMap.get(name);\n      path.replaceWith(template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(\n          right,\n          file,\n        )}, ${t.cloneNode(id)})\n      `);\n      return;\n    }\n\n    const { id, static: isStatic } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      path.replaceWith(\n        template.expression.ast`${buildCheckInRHS(\n          right,\n          file,\n        )} === ${t.cloneNode(this.classRef)}`,\n      );\n      return;\n    }\n\n    path.replaceWith(\n      template.expression.ast`${t.cloneNode(id)}.has(${buildCheckInRHS(\n        right,\n        file,\n      )})`,\n    );\n  },\n});\n\ninterface Receiver {\n  receiver(\n    this: HandlerState<PrivateNameState> & PrivateNameState,\n    member: NodePath<t.MemberExpression | t.OptionalMemberExpression>,\n  ): t.Expression;\n}\n\nfunction readOnlyError(file: File, name: string) {\n  return t.callExpression(file.addHelper(\"readOnlyError\"), [\n    t.stringLiteral(`#${name}`),\n  ]);\n}\n\nfunction writeOnlyError(file: File, name: string) {\n  if (\n    !process.env.BABEL_8_BREAKING &&\n    !file.availableHelper(\"writeOnlyError\")\n  ) {\n    console.warn(\n      `@babel/helpers is outdated, update it to silence this warning.`,\n    );\n    return t.buildUndefinedNode();\n  }\n  return t.callExpression(file.addHelper(\"writeOnlyError\"), [\n    t.stringLiteral(`#${name}`),\n  ]);\n}\n\nfunction buildStaticPrivateFieldAccess<N extends t.Expression>(\n  expr: N,\n  noUninitializedPrivateFieldAccess: boolean,\n) {\n  if (noUninitializedPrivateFieldAccess) return expr;\n  return t.memberExpression(expr, t.identifier(\"_\"));\n}\n\nconst privateNameHandlerSpec: Handler<PrivateNameState & Receiver> & Receiver =\n  {\n    memoise(member, count) {\n      const { scope } = member;\n      const { object } = member.node as { object: t.Expression };\n\n      const memo = scope.maybeGenerateMemoised(object);\n      if (!memo) {\n        return;\n      }\n\n      this.memoiser.set(object, memo, count);\n    },\n\n    receiver(member) {\n      const { object } = member.node as { object: t.Expression };\n\n      if (this.memoiser.has(object)) {\n        return t.cloneNode(this.memoiser.get(object));\n      }\n\n      return t.cloneNode(object);\n    },\n\n    get(member) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        innerBinding,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        methodId,\n        getId,\n        setId,\n      } = privateNamesMap.get(name);\n      const isGetterOrSetter = getId || setId;\n\n      if (isStatic) {\n        // if there are any local variable shadowing classRef, unshadow it\n        // see #12960\n        unshadow(classRef.name, member.scope, innerBinding);\n\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          // NOTE: This package has a peerDependency on @babel/core@^7.0.0, but these\n          // helpers have been introduced in @babel/helpers@7.1.0.\n          const helperName =\n            isMethod && !isGetterOrSetter\n              ? \"classStaticPrivateMethodGet\"\n              : \"classStaticPrivateFieldSpecGet\";\n\n          return t.callExpression(file.addHelper(helperName), [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n          ]);\n        }\n\n        const receiver = this.receiver(member);\n        const skipCheck =\n          t.isIdentifier(receiver) && receiver.name === classRef.name;\n\n        if (!isMethod) {\n          if (skipCheck) {\n            return buildStaticPrivateFieldAccess(\n              t.cloneNode(id),\n              noUninitializedPrivateFieldAccess,\n            );\n          }\n\n          return buildStaticPrivateFieldAccess(\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n              t.cloneNode(id),\n            ]),\n            noUninitializedPrivateFieldAccess,\n          );\n        }\n\n        if (getId) {\n          if (skipCheck) {\n            return t.callExpression(t.cloneNode(getId), [receiver]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateGetter\"), [\n            t.cloneNode(classRef),\n            receiver,\n            t.cloneNode(getId),\n          ]);\n        }\n\n        if (setId) {\n          const err = t.buildUndefinedNode(); // TODO: writeOnlyError(file, name)\n          if (skipCheck) return err;\n          return t.sequenceExpression([\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n            ]),\n            err,\n          ]);\n        }\n\n        if (skipCheck) return t.cloneNode(id);\n        return t.callExpression(file.addHelper(\"assertClassBrand\"), [\n          t.cloneNode(classRef),\n          receiver,\n          t.cloneNode(id),\n        ]);\n      }\n\n      if (isMethod) {\n        if (isGetterOrSetter) {\n          if (!getId) {\n            return t.sequenceExpression([\n              this.receiver(member),\n              writeOnlyError(file, name),\n            ]);\n          }\n          if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n            return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n              this.receiver(member),\n              t.cloneNode(id),\n            ]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateGetter\"), [\n            t.cloneNode(id),\n            this.receiver(member),\n            t.cloneNode(getId),\n          ]);\n        }\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          return t.callExpression(file.addHelper(\"classPrivateMethodGet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n            t.cloneNode(methodId),\n          ]);\n        }\n        return t.callExpression(file.addHelper(\"assertClassBrand\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n          t.cloneNode(methodId),\n        ]);\n      }\n      if (process.env.BABEL_8_BREAKING || newHelpers(file)) {\n        return t.callExpression(file.addHelper(\"classPrivateFieldGet2\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n        ]);\n      }\n\n      return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n      ]);\n    },\n\n    boundGet(member) {\n      this.memoise(member, 1);\n\n      return t.callExpression(\n        t.memberExpression(this.get(member), t.identifier(\"bind\")),\n        [this.receiver(member)],\n      );\n    },\n\n    set(member, value) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n        getId,\n      } = privateNamesMap.get(name);\n      const isGetterOrSetter = getId || setId;\n\n      if (isStatic) {\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          const helperName =\n            isMethod && !isGetterOrSetter\n              ? \"classStaticPrivateMethodSet\"\n              : \"classStaticPrivateFieldSpecSet\";\n\n          return t.callExpression(file.addHelper(helperName), [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n            value,\n          ]);\n        }\n\n        const receiver = this.receiver(member);\n        const skipCheck =\n          t.isIdentifier(receiver) && receiver.name === classRef.name;\n\n        if (isMethod && !setId) {\n          const err = readOnlyError(file, name);\n          if (skipCheck) return t.sequenceExpression([value, err]);\n          return t.sequenceExpression([\n            value,\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n            ]),\n            readOnlyError(file, name),\n          ]);\n        }\n\n        if (setId) {\n          if (skipCheck) {\n            return t.callExpression(t.cloneNode(setId), [receiver, value]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateSetter\"), [\n            t.cloneNode(classRef),\n            t.cloneNode(setId),\n            receiver,\n            value,\n          ]);\n        }\n        return t.assignmentExpression(\n          \"=\",\n          buildStaticPrivateFieldAccess(\n            t.cloneNode(id),\n            noUninitializedPrivateFieldAccess,\n          ),\n          skipCheck\n            ? value\n            : t.callExpression(file.addHelper(\"assertClassBrand\"), [\n                t.cloneNode(classRef),\n                receiver,\n                value,\n              ]),\n        );\n      }\n      if (isMethod) {\n        if (setId) {\n          if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n            return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n              this.receiver(member),\n              t.cloneNode(id),\n              value,\n            ]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateSetter\"), [\n            t.cloneNode(id),\n            t.cloneNode(setId),\n            this.receiver(member),\n            value,\n          ]);\n        }\n        return t.sequenceExpression([\n          this.receiver(member),\n          value,\n          readOnlyError(file, name),\n        ]);\n      }\n\n      if (process.env.BABEL_8_BREAKING || newHelpers(file)) {\n        return t.callExpression(file.addHelper(\"classPrivateFieldSet2\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n          value,\n        ]);\n      }\n\n      return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n        value,\n      ]);\n    },\n\n    destructureSet(member) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n      } = privateNamesMap.get(name);\n\n      if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n        if (isStatic) {\n          try {\n            // classStaticPrivateFieldDestructureSet was introduced in 7.13.10\n            // eslint-disable-next-line no-var\n            var helper = file.addHelper(\n              \"classStaticPrivateFieldDestructureSet\",\n            );\n          } catch {\n            throw new Error(\n              \"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" +\n                \"please update @babel/helpers to the latest version.\",\n            );\n          }\n          return t.memberExpression(\n            t.callExpression(helper, [\n              this.receiver(member),\n              t.cloneNode(classRef),\n              t.cloneNode(id),\n            ]),\n            t.identifier(\"value\"),\n          );\n        }\n\n        return t.memberExpression(\n          t.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n          ]),\n          t.identifier(\"value\"),\n        );\n      }\n\n      if (isMethod && !setId) {\n        return t.memberExpression(\n          t.sequenceExpression([\n            // @ts-ignore(Babel 7 vs Babel 8) member.node.object is not t.Super\n            member.node.object,\n            readOnlyError(file, name),\n          ]),\n          t.identifier(\"_\"),\n        );\n      }\n\n      if (isStatic && !isMethod) {\n        const getCall = this.get(member);\n        if (\n          !noUninitializedPrivateFieldAccess ||\n          !t.isCallExpression(getCall)\n        ) {\n          return getCall;\n        }\n        const ref = getCall.arguments.pop();\n        getCall.arguments.push(template.expression.ast`(_) => ${ref} = _`);\n        return t.memberExpression(\n          t.callExpression(file.addHelper(\"toSetter\"), [getCall]),\n          t.identifier(\"_\"),\n        );\n      }\n\n      const setCall = this.set(member, t.identifier(\"_\"));\n      if (\n        !t.isCallExpression(setCall) ||\n        !t.isIdentifier(setCall.arguments[setCall.arguments.length - 1], {\n          name: \"_\",\n        })\n      ) {\n        throw member.buildCodeFrameError(\n          \"Internal Babel error while compiling this code. This is a Babel bug. \" +\n            \"Please report it at https://github.com/babel/babel/issues.\",\n        );\n      }\n\n      // someHelper(foo, bar, _) -> someHelper, [foo, bar]\n      // aFn.call(foo, bar, _) -> aFn, [bar], foo\n      let args: t.Expression[];\n      if (\n        t.isMemberExpression(setCall.callee, { computed: false }) &&\n        t.isIdentifier(setCall.callee.property) &&\n        setCall.callee.property.name === \"call\"\n      ) {\n        args = [\n          // @ts-ignore(Babel 7 vs Babel 8) member.node.object is not t.Super\n          setCall.callee.object,\n          t.arrayExpression(\n            // Remove '_'\n            (setCall.arguments as t.Expression[]).slice(1, -1),\n          ),\n          setCall.arguments[0] as t.Expression,\n        ];\n      } else {\n        args = [\n          setCall.callee as t.Expression,\n          t.arrayExpression(\n            // Remove '_'\n            (setCall.arguments as t.Expression[]).slice(0, -1),\n          ),\n        ];\n      }\n\n      return t.memberExpression(\n        t.callExpression(file.addHelper(\"toSetter\"), args),\n        t.identifier(\"_\"),\n      );\n    },\n\n    call(member, args: (t.Expression | t.SpreadElement)[]) {\n      // The first access (the get) should do the memo assignment.\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, false);\n    },\n\n    optionalCall(member, args: (t.Expression | t.SpreadElement)[]) {\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, true);\n    },\n\n    delete() {\n      throw new Error(\n        \"Internal Babel error: deleting private elements is a parsing error.\",\n      );\n    },\n  };\n\nconst privateNameHandlerLoose: Handler<PrivateNameState> = {\n  get(member) {\n    const { privateNamesMap, file } = this;\n    const { object } = member.node;\n    const { name } = (member.node.property as t.PrivateName).id;\n\n    return template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: t.cloneNode(object),\n      PROP: t.cloneNode(privateNamesMap.get(name).id),\n    });\n  },\n\n  set() {\n    // noop\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n\n  boundGet(member) {\n    return t.callExpression(\n      t.memberExpression(this.get(member), t.identifier(\"bind\")),\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      [t.cloneNode(member.node.object as t.Expression)],\n    );\n  },\n\n  simpleSet(member) {\n    return this.get(member);\n  },\n\n  destructureSet(member) {\n    return this.get(member);\n  },\n\n  call(member, args) {\n    return t.callExpression(this.get(member), args);\n  },\n\n  optionalCall(member, args) {\n    return t.optionalCallExpression(this.get(member), args, true);\n  },\n\n  delete() {\n    throw new Error(\n      \"Internal Babel error: deleting private elements is a parsing error.\",\n    );\n  },\n};\n\nexport function transformPrivateNamesUsage(\n  ref: t.Identifier,\n  path: NodePath<t.Class>,\n  privateNamesMap: PrivateNamesMap,\n  {\n    privateFieldsAsProperties,\n    noUninitializedPrivateFieldAccess,\n    noDocumentAll,\n    innerBinding,\n  }: {\n    privateFieldsAsProperties: boolean;\n    noUninitializedPrivateFieldAccess: boolean;\n    noDocumentAll: boolean;\n    innerBinding: t.Identifier;\n  },\n  state: File,\n) {\n  if (!privateNamesMap.size) return;\n\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties\n    ? privateNameHandlerLoose\n    : privateNameHandlerSpec;\n\n  memberExpressionToFunctions<PrivateNameState>(body, privateNameVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    ...handler,\n    noDocumentAll,\n    noUninitializedPrivateFieldAccess,\n    innerBinding,\n  });\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding,\n  });\n}\n\nfunction buildPrivateFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${t.cloneNode(id)}, {\n        // configurable is false by default\n        // enumerable is false by default\n        writable: true,\n        value: ${value}\n      });\n    ` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${t.cloneNode(id)}.set(${ref}, {\n          // configurable is always false for private elements\n          // enumerable is always false for private elements\n          writable: true,\n          value: ${value},\n        })` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    t.expressionStatement(\n      t.callExpression(helper, [\n        t.thisExpression(),\n        t.cloneNode(id),\n        process.env.BABEL_8_BREAKING || newHelpers(state)\n          ? value\n          : template.expression.ast`{ writable: true, value: ${value} }`,\n      ]),\n    ),\n    prop,\n  );\n}\n\nfunction buildPrivateStaticFieldInitSpec(\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  noUninitializedPrivateFieldAccess: boolean,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n\n  const value = noUninitializedPrivateFieldAccess\n    ? prop.node.value\n    : template.expression.ast`{\n        _: ${prop.node.value || t.buildUndefinedNode()}\n      }`;\n\n  return inheritPropComments(\n    t.variableDeclaration(\"var\", [\n      t.variableDeclarator(t.cloneNode(privateName.id), value),\n    ]),\n    prop,\n  );\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var buildPrivateStaticFieldInitSpecOld = function (\n    prop: NodePath<t.ClassPrivateProperty>,\n    privateNamesMap: PrivateNamesMap,\n  ) {\n    const privateName = privateNamesMap.get(prop.node.key.id.name);\n    const { id, getId, setId, initAdded } = privateName;\n    const isGetterOrSetter = getId || setId;\n\n    if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;\n\n    if (isGetterOrSetter) {\n      privateNamesMap.set(prop.node.key.id.name, {\n        ...privateName,\n        initAdded: true,\n      });\n\n      return inheritPropComments(\n        template.statement.ast`\n          var ${t.cloneNode(id)} = {\n            // configurable is false by default\n            // enumerable is false by default\n            // writable is false by default\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          }\n        `,\n        prop,\n      );\n    }\n\n    const value = prop.node.value || prop.scope.buildUndefinedNode();\n    return inheritPropComments(\n      template.statement.ast`\n        var ${t.cloneNode(id)} = {\n          // configurable is false by default\n          // enumerable is false by default\n          writable: true,\n          value: ${value}\n        };\n      `,\n      prop,\n    );\n  };\n}\n\nfunction buildPrivateMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { methodId, id, getId, setId, initAdded } = privateName;\n  if (initAdded) return;\n\n  if (methodId) {\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      ` as t.ExpressionStatement,\n      prop,\n    );\n  }\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        });\n      ` as t.ExpressionStatement,\n      prop,\n    );\n  }\n}\n\nfunction buildPrivateInstanceMethodInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n\n  if (privateName.initAdded) return;\n\n  if (!process.env.BABEL_8_BREAKING && !newHelpers(state)) {\n    const isGetterOrSetter = privateName.getId || privateName.setId;\n    if (isGetterOrSetter) {\n      return buildPrivateAccessorInitialization(\n        ref,\n        prop,\n        privateNamesMap,\n        state,\n      );\n    }\n  }\n\n  return buildPrivateInstanceMethodInitialization(\n    ref,\n    prop,\n    privateNamesMap,\n    state,\n  );\n}\n\nfunction buildPrivateAccessorInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId } = privateName;\n\n  privateNamesMap.set(prop.node.key.id.name, {\n    ...privateName,\n    initAdded: true,\n  });\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`\n          ${id}.set(${ref}, {\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          });\n        ` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)},\n      {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      },\n    )` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceMethodInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id } = privateName;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${id}.add(${ref})` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)}\n    )` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.memberExpression(ref, key, computed || t.isLiteral(key)),\n        value,\n      ),\n    ),\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n  state: File,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.callExpression(state.addHelper(\"defineProperty\"), [\n        ref,\n        computed || t.isLiteral(key)\n          ? key\n          : t.stringLiteral((key as t.Identifier).name),\n        value,\n      ]),\n    ),\n    prop,\n  );\n}\n\nfunction buildPrivateStaticMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  state: File,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, methodId, getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        })\n      `,\n      prop,\n    );\n  }\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        value: ${methodId.name}\n      });\n    `,\n    prop,\n  );\n}\n\nfunction buildPrivateMethodDeclaration(\n  file: File,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsSymbolsOrProperties = false,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic,\n  } = privateName;\n  const { params, body, generator, async } = prop.node;\n  const isGetter = getId && params.length === 0;\n  const isSetter = setId && params.length > 0;\n\n  if ((isGetter && getterDeclared) || (isSetter && setterDeclared)) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n    return null;\n  }\n\n  if (\n    (process.env.BABEL_8_BREAKING || newHelpers(file)) &&\n    (isGetter || isSetter) &&\n    !privateFieldsAsSymbolsOrProperties\n  ) {\n    const scope = prop.get(\"body\").scope;\n    const thisArg = scope.generateUidIdentifier(\"this\");\n    const state: ReplaceThisState = {\n      thisRef: thisArg,\n      argumentsPath: [],\n    };\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    prop.traverse(thisContextVisitor, state);\n    if (state.argumentsPath.length) {\n      const argumentsId = scope.generateUidIdentifier(\"arguments\");\n      scope.push({\n        id: argumentsId,\n        init: template.expression.ast`[].slice.call(arguments, 1)`,\n      });\n      for (const path of state.argumentsPath) {\n        path.replaceWith(t.cloneNode(argumentsId));\n      }\n    }\n\n    params.unshift(t.cloneNode(thisArg));\n  }\n\n  let declId = methodId;\n\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      getterDeclared: true,\n      initAdded: true,\n    });\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      setterDeclared: true,\n      initAdded: true,\n    });\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsSymbolsOrProperties) {\n    declId = id;\n  }\n\n  return inheritPropComments(\n    t.functionDeclaration(\n      t.cloneNode(declId),\n      // @ts-expect-error params for ClassMethod has TSParameterProperty\n      params,\n      body,\n      generator,\n      async,\n    ),\n    prop,\n  );\n}\n\ntype ReplaceThisState = {\n  thisRef: t.Identifier;\n  needsClassRef?: boolean;\n  innerBinding?: t.Identifier | null;\n  argumentsPath?: NodePath<t.Identifier>[];\n};\n\ntype ReplaceInnerBindingReferenceState = ReplaceThisState;\n\nconst thisContextVisitor = traverse.visitors.merge<ReplaceThisState>([\n  {\n    Identifier(path, state) {\n      if (state.argumentsPath && path.node.name === \"arguments\") {\n        state.argumentsPath.push(path);\n      }\n    },\n    UnaryExpression(path) {\n      // Replace `delete this` with `true`\n      const { node } = path;\n      if (node.operator === \"delete\") {\n        const argument = skipTransparentExprWrapperNodes(node.argument);\n        if (t.isThisExpression(argument)) {\n          path.replaceWith(t.booleanLiteral(true));\n        }\n      }\n    },\n    ThisExpression(path, state) {\n      state.needsClassRef = true;\n      path.replaceWith(t.cloneNode(state.thisRef));\n    },\n    MetaProperty(path) {\n      const { node, scope } = path;\n      // if there are `new.target` in static field\n      // we should replace it with `undefined`\n      if (node.meta.name === \"new\" && node.property.name === \"target\") {\n        path.replaceWith(scope.buildUndefinedNode());\n      }\n    },\n  },\n  environmentVisitor,\n]);\n\nconst innerReferencesVisitor: Visitor<ReplaceInnerBindingReferenceState> = {\n  ReferencedIdentifier(path, state) {\n    if (\n      path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)\n    ) {\n      state.needsClassRef = true;\n      path.node.name = state.thisRef.name;\n    }\n  },\n};\n\nfunction replaceThisContext(\n  path: PropPath,\n  ref: t.Identifier,\n  innerBindingRef: t.Identifier | null,\n) {\n  const state: ReplaceThisState = {\n    thisRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef,\n  };\n  if (!path.isMethod()) {\n    // replace `this` in property initializers and static blocks\n    path.traverse(thisContextVisitor, state);\n  }\n\n  // todo: use innerBinding.referencePaths to avoid full traversal\n  if (\n    innerBindingRef != null &&\n    state.thisRef?.name &&\n    state.thisRef.name !== innerBindingRef.name\n  ) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n\n  return state.needsClassRef;\n}\n\nexport type PropNode =\n  | t.ClassProperty\n  | t.ClassPrivateMethod\n  | t.ClassPrivateProperty\n  | t.StaticBlock;\nexport type PropPath = NodePath<PropNode>;\n\nfunction isNameOrLength({ key, computed }: t.ClassProperty) {\n  if (key.type === \"Identifier\") {\n    return !computed && (key.name === \"name\" || key.name === \"length\");\n  }\n  if (key.type === \"StringLiteral\") {\n    return key.value === \"name\" || key.value === \"length\";\n  }\n  return false;\n}\n\n/**\n * Inherit comments from class members. This is a reduced version of\n * t.inheritsComments: the trailing comments are not inherited because\n * for most class members except the last one, their trailing comments are\n * the next sibling's leading comments.\n *\n * @template T transformed class member type\n * @param {T} node transformed class member\n * @param {PropPath} prop class member\n * @returns transformed class member type with comments inherited\n */\nfunction inheritPropComments<T extends t.Node>(node: T, prop: PropPath) {\n  t.inheritLeadingComments(node, prop.node);\n  t.inheritInnerComments(node, prop.node);\n  return node;\n}\n\n/**\n * ClassRefFlag records the requirement of the class binding reference.\n *\n * @enum {number}\n */\nconst enum ClassRefFlag {\n  None,\n  /**\n   * When this flag is enabled, the binding reference can be the class id,\n   * if exists, or the uid identifier generated for class expression. The\n   * reference is safe to be consumed by [[Define]].\n   */\n  ForDefine = 1 << 0,\n  /**\n   * When this flag is enabled, the reference must be a uid, because the outer\n   * class binding can be mutated by user codes.\n   * E.g.\n   * class C { static p = C }; const oldC = C; C = null; oldC.p;\n   * we must memoize class `C` before defining the property `p`.\n   */\n  ForInnerBinding = 1 << 1,\n}\n\nexport function buildFieldsInitNodes(\n  ref: t.Identifier | null,\n  superRef: t.Expression | undefined,\n  props: PropPath[],\n  privateNamesMap: PrivateNamesMap,\n  file: File,\n  setPublicClassFields: boolean,\n  privateFieldsAsSymbolsOrProperties: boolean,\n  noUninitializedPrivateFieldAccess: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier | null,\n) {\n  let classRefFlags = ClassRefFlag.None;\n  let injectSuperRef: t.Identifier;\n  const staticNodes: t.Statement[] = [];\n  const instanceNodes: t.ExpressionStatement[] = [];\n  let lastInstanceNodeReturnsThis = false;\n  // These nodes are pure and can be moved to the closest statement position\n  const pureStaticNodes: t.FunctionDeclaration[] = [];\n  let classBindingNode: t.ExpressionStatement | null = null;\n\n  const getSuperRef = t.isIdentifier(superRef)\n    ? () => superRef\n    : () => {\n        injectSuperRef ??=\n          props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n        return injectSuperRef;\n      };\n\n  const classRefForInnerBinding =\n    ref ??\n    props[0].scope.generateUidIdentifier(innerBindingRef?.name || \"Class\");\n  ref ??= t.cloneNode(innerBindingRef);\n\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n\n    // @ts-expect-error: TS doesn't infer that prop.node is not a StaticBlock\n    const isStatic = !t.isStaticBlock?.(prop.node) && prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock?.();\n\n    if (isStatic) classRefFlags |= ClassRefFlag.ForDefine;\n\n    if (isStatic || (isMethod && isPrivate) || isStaticBlock) {\n      new ReplaceSupers({\n        methodPath: prop,\n        constantSuper,\n        file: file,\n        refToPreserve: innerBindingRef,\n        getSuperRef,\n        getObjectRef() {\n          classRefFlags |= ClassRefFlag.ForInnerBinding;\n          if (isStatic || isStaticBlock) {\n            return classRefForInnerBinding;\n          } else {\n            return t.memberExpression(\n              classRefForInnerBinding,\n              t.identifier(\"prototype\"),\n            );\n          }\n        },\n      }).replace();\n\n      const replaced = replaceThisContext(\n        prop,\n        classRefForInnerBinding,\n        innerBindingRef,\n      );\n      if (replaced) {\n        classRefFlags |= ClassRefFlag.ForInnerBinding;\n      }\n    }\n\n    lastInstanceNodeReturnsThis = false;\n\n    // TODO(ts): there are so many `ts-expect-error` inside cases since\n    // ts can not infer type from pre-computed values (or a case test)\n    // even change `isStaticBlock` to `t.isStaticBlock(prop)` will not make prop\n    // a `NodePath<t.StaticBlock>`\n    // this maybe a bug for ts\n    switch (true) {\n      case isStaticBlock: {\n        const blockBody = (prop.node as t.StaticBlock).body;\n        // We special-case the single expression case to avoid the iife, since\n        // it's common.\n        if (blockBody.length === 1 && t.isExpressionStatement(blockBody[0])) {\n          staticNodes.push(inheritPropComments(blockBody[0], prop));\n        } else {\n          staticNodes.push(\n            t.inheritsComments(\n              template.statement.ast`(() => { ${blockBody} })()`,\n              prop.node,\n            ),\n          );\n        }\n        break;\n      }\n      case isStatic &&\n        isPrivate &&\n        isField &&\n        privateFieldsAsSymbolsOrProperties:\n        staticNodes.push(\n          buildPrivateFieldInitLoose(t.cloneNode(ref), prop, privateNamesMap),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isField &&\n        !privateFieldsAsSymbolsOrProperties:\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          staticNodes.push(\n            buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap),\n          );\n        } else {\n          staticNodes.push(\n            buildPrivateStaticFieldInitSpec(\n              prop,\n              privateNamesMap,\n              noUninitializedPrivateFieldAccess,\n            ),\n          );\n        }\n        break;\n      case isStatic && isPublic && isField && setPublicClassFields:\n        // Functions always have non-writable .name and .length properties,\n        // so we must always use [[Define]] for them.\n        // It might still be possible to a computed static fields whose resulting\n        // key is \"name\" or \"length\", but the assumption is telling us that it's\n        // not going to happen.\n        // @ts-expect-error checked in switch\n        if (!isNameOrLength(prop.node)) {\n          // @ts-expect-error checked in switch\n          staticNodes.push(buildPublicFieldInitLoose(t.cloneNode(ref), prop));\n          break;\n        }\n      // falls through\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.cloneNode(ref), prop, file),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isField &&\n        privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(\n          buildPrivateFieldInitLoose(t.thisExpression(), prop, privateNamesMap),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isField &&\n        !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(\n          buildPrivateInstanceFieldInitSpec(\n            t.thisExpression(),\n            prop,\n            privateNamesMap,\n            file,\n          ),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isMethod &&\n        privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(\n          buildPrivateMethodInitLoose(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isMethod &&\n        !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(\n          buildPrivateInstanceMethodInitSpec(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            file,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isMethod &&\n        !privateFieldsAsSymbolsOrProperties:\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          staticNodes.unshift(\n            // @ts-expect-error checked in switch\n            buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap),\n          );\n        }\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isMethod &&\n        privateFieldsAsSymbolsOrProperties:\n        staticNodes.unshift(\n          buildPrivateStaticMethodInitLoose(\n            t.cloneNode(ref),\n            // @ts-expect-error checked in switch\n            prop,\n            file,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isInstance && isPublic && isField && setPublicClassFields:\n        // @ts-expect-error checked in switch\n        instanceNodes.push(buildPublicFieldInitLoose(t.thisExpression(), prop));\n        break;\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        lastInstanceNodeReturnsThis = true;\n        instanceNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.thisExpression(), prop, file),\n        );\n        break;\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n\n  if (classRefFlags & ClassRefFlag.ForInnerBinding && innerBindingRef != null) {\n    classBindingNode = t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.cloneNode(classRefForInnerBinding),\n        t.cloneNode(innerBindingRef),\n      ),\n    );\n  }\n\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    lastInstanceNodeReturnsThis,\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n    classBindingNode,\n    wrapClass(path: NodePath<t.Class>) {\n      for (const prop of props) {\n        // Delete leading comments so that they don't get attached as\n        // trailing comments of the previous sibling.\n        // When transforming props, we explicitly attach their leading\n        // comments to the transformed node with `inheritPropComments`\n        // above.\n        prop.node.leadingComments = null;\n        prop.remove();\n      }\n\n      if (injectSuperRef) {\n        path.scope.push({ id: t.cloneNode(injectSuperRef) });\n        path.set(\n          \"superClass\",\n          t.assignmentExpression(\"=\", injectSuperRef, path.node.superClass),\n        );\n      }\n\n      if (classRefFlags !== ClassRefFlag.None) {\n        if (path.isClassExpression()) {\n          path.scope.push({ id: ref });\n          path.replaceWith(\n            t.assignmentExpression(\"=\", t.cloneNode(ref), path.node),\n          );\n        } else {\n          if (innerBindingRef == null) {\n            // export anonymous class declaration\n            path.node.id = ref;\n          }\n          if (classBindingNode != null) {\n            path.scope.push({ id: classRefForInnerBinding });\n          }\n        }\n      }\n\n      return path;\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]}