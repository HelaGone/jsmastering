{"version":3,"file":"expressions.js","names":["_t","require","n","isCallExpression","isLiteral","isMemberExpression","isNewExpression","UnaryExpression","node","operator","word","space","token","print","argument","DoExpression","async","body","ParenthesizedExpression","tokenChar","expression","rightParens","UpdateExpression","prefix","printTerminatorless","ConditionalExpression","test","consequent","alternate","NewExpression","parent","callee","format","minified","arguments","length","optional","typeArguments","typeParameters","printList","SequenceExpression","expressions","ThisExpression","Super","isDecoratorMemberExpression","type","computed","property","object","shouldParenthesizeDecoratorExpression","_shouldPrintDecoratorsBeforeExport","decoratorsBeforeExport","start","declaration","Decorator","newline","OptionalMemberExpression","TypeError","value","OptionalCallExpression","CallExpression","Import","AwaitExpression","YieldExpression","delegate","EmptyStatement","semicolon","ExpressionStatement","AssignmentPattern","left","typeAnnotation","right","AssignmentExpression","parens","inForStatementInitCounter","needsParens","BindExpression","MemberExpression","MetaProperty","meta","PrivateName","id","V8IntrinsicIdentifier","name","ModuleExpression","indent","directives","dedent","rightBrace"],"sources":["../../src/generators/expressions.ts"],"sourcesContent":["import type Printer from \"../printer.ts\";\nimport {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as n from \"../node/index.ts\";\n\nexport function UnaryExpression(this: Printer, node: t.UnaryExpression) {\n  const { operator } = node;\n  if (\n    operator === \"void\" ||\n    operator === \"delete\" ||\n    operator === \"typeof\" ||\n    // throwExpressions\n    operator === \"throw\"\n  ) {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nexport function DoExpression(this: Printer, node: t.DoExpression) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ParenthesizedExpression(\n  this: Printer,\n  node: t.ParenthesizedExpression,\n) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.rightParens(node);\n}\n\nexport function UpdateExpression(this: Printer, node: t.UpdateExpression) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.printTerminatorless(node.argument, node, true);\n    this.token(node.operator);\n  }\n}\n\nexport function ConditionalExpression(\n  this: Printer,\n  node: t.ConditionalExpression,\n) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nexport function NewExpression(\n  this: Printer,\n  node: t.NewExpression,\n  parent: t.Node,\n) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n  if (\n    this.format.minified &&\n    node.arguments.length === 0 &&\n    !node.optional &&\n    !isCallExpression(parent, { callee: node }) &&\n    !isMemberExpression(parent) &&\n    !isNewExpression(parent)\n  ) {\n    return;\n  }\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    // TODO: This can never happen\n    this.token(\"?.\");\n  }\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function SequenceExpression(this: Printer, node: t.SequenceExpression) {\n  this.printList(node.expressions, node);\n}\n\nexport function ThisExpression(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function Super(this: Printer) {\n  this.word(\"super\");\n}\n\nfunction isDecoratorMemberExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n): boolean {\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return (\n        !node.computed &&\n        node.property.type === \"Identifier\" &&\n        isDecoratorMemberExpression(node.object)\n      );\n    default:\n      return false;\n  }\n}\nfunction shouldParenthesizeDecoratorExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n) {\n  if (node.type === \"ParenthesizedExpression\") {\n    // We didn't check extra?.parenthesized here because we don't track decorators in needsParen\n    return false;\n  }\n  return !isDecoratorMemberExpression(\n    node.type === \"CallExpression\" ? node.callee : node,\n  );\n}\n\nexport function _shouldPrintDecoratorsBeforeExport(\n  this: Printer,\n  node: t.ExportDeclaration & { declaration: t.ClassDeclaration },\n) {\n  if (typeof this.format.decoratorsBeforeExport === \"boolean\") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return (\n    typeof node.start === \"number\" && node.start === node.declaration.start\n  );\n}\n\nexport function Decorator(this: Printer, node: t.Decorator) {\n  this.token(\"@\");\n  const { expression } = node;\n  if (shouldParenthesizeDecoratorExpression(expression)) {\n    this.token(\"(\");\n    this.print(expression, node);\n    this.token(\")\");\n  } else {\n    this.print(expression, node);\n  }\n  this.newline();\n}\n\nexport function OptionalMemberExpression(\n  this: Printer,\n  node: t.OptionalMemberExpression,\n) {\n  let { computed } = node;\n  const { optional, property } = node;\n\n  this.print(node.object, node);\n\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  // @ts-expect-error todo(flow->ts) maybe instead of typeof check specific literal types?\n  if (isLiteral(property) && typeof property.value === \"number\") {\n    computed = true;\n  }\n  if (optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(property, node);\n    this.token(\"]\");\n  } else {\n    if (!optional) {\n      this.token(\".\");\n    }\n    this.print(property, node);\n  }\n}\n\nexport function OptionalCallExpression(\n  this: Printer,\n  node: t.OptionalCallExpression,\n) {\n  this.print(node.callee, node);\n\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.print(node.typeArguments, node); // Flow\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function CallExpression(this: Printer, node: t.CallExpression) {\n  this.print(node.callee, node);\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.rightParens(node);\n}\n\nexport function Import(this: Printer) {\n  this.word(\"import\");\n}\n\nexport function AwaitExpression(this: Printer, node: t.AwaitExpression) {\n  this.word(\"await\");\n\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument, node, false);\n  }\n}\n\nexport function YieldExpression(this: Printer, node: t.YieldExpression) {\n  this.word(\"yield\", true);\n\n  if (node.delegate) {\n    this.token(\"*\");\n    if (node.argument) {\n      this.space();\n      // line terminators are allowed after yield*\n      this.print(node.argument, node);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument, node, false);\n    }\n  }\n}\n\nexport function EmptyStatement(this: Printer) {\n  this.semicolon(true /* force */);\n}\n\nexport function ExpressionStatement(\n  this: Printer,\n  node: t.ExpressionStatement,\n) {\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nexport function AssignmentPattern(this: Printer, node: t.AssignmentPattern) {\n  this.print(node.left, node);\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  if (node.left.optional) this.token(\"?\");\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  this.print(node.left.typeAnnotation, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nexport function AssignmentExpression(\n  this: Printer,\n  node: t.AssignmentExpression,\n  parent: t.Node,\n) {\n  // Somewhere inside a for statement `init` node but doesn't usually\n  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`\n  const parens =\n    this.inForStatementInitCounter &&\n    node.operator === \"in\" &&\n    !n.needsParens(node, parent);\n\n  if (parens) {\n    this.token(\"(\");\n  }\n\n  this.print(node.left, node);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n  this.space();\n\n  this.print(node.right, node);\n\n  if (parens) {\n    this.token(\")\");\n  }\n}\n\nexport function BindExpression(this: Printer, node: t.BindExpression) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nexport {\n  AssignmentExpression as BinaryExpression,\n  AssignmentExpression as LogicalExpression,\n};\n\nexport function MemberExpression(this: Printer, node: t.MemberExpression) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe use specific literal types\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nexport function MetaProperty(this: Printer, node: t.MetaProperty) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function PrivateName(this: Printer, node: t.PrivateName) {\n  this.token(\"#\");\n  this.print(node.id, node);\n}\n\nexport function V8IntrinsicIdentifier(\n  this: Printer,\n  node: t.V8IntrinsicIdentifier,\n) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nexport function ModuleExpression(this: Printer, node: t.ModuleExpression) {\n  this.word(\"module\", true);\n  this.space();\n  this.token(\"{\");\n  this.indent();\n  const { body } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body, node);\n  this.dedent();\n  this.rightBrace(node);\n}\n"],"mappings":"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","ignoreList":[]}