{"version":3,"file":"typescript.js","names":["TSTypeAnnotation","node","tokenChar","space","optional","print","typeAnnotation","TSTypeParameterInstantiation","parent","printList","params","type","length","TSTypeParameter","word","out","name","constraint","TSParameterProperty","accessibility","readonly","_param","parameter","TSDeclareFunction","declare","_functionHead","TSDeclareMethod","_classMethodHead","TSQualifiedName","left","right","TSCallSignatureDeclaration","tsPrintSignatureDeclarationBase","TSConstructSignatureDeclaration","TSPropertySignature","tsPrintPropertyOrMethodName","computed","key","TSMethodSignature","kind","TSIndexSignature","isStatic","_parameters","parameters","TSAnyKeyword","TSBigIntKeyword","TSUnknownKeyword","TSNumberKeyword","TSObjectKeyword","TSBooleanKeyword","TSStringKeyword","TSSymbolKeyword","TSVoidKeyword","TSUndefinedKeyword","TSNullKeyword","TSNeverKeyword","TSIntrinsicKeyword","TSThisType","TSFunctionType","tsPrintFunctionOrConstructorType","TSConstructorType","typeParameters","token","returnType","TSTypeReference","typeName","TSTypePredicate","asserts","parameterName","TSTypeQuery","exprName","TSTypeLiteral","tsPrintTypeLiteralOrInterfaceBody","members","tsPrintBraced","printer","indent","newline","_iterator","_createForOfIteratorHelper","_step","s","n","done","member","value","err","e","f","dedent","rightBrace","TSArrayType","elementType","TSTupleType","elementTypes","TSOptionalType","TSRestType","TSNamedTupleMember","label","TSUnionType","tsPrintUnionOrIntersectionType","TSIntersectionType","sep","printJoin","types","separator","TSConditionalType","checkType","extendsType","trueType","falseType","TSInferType","typeParameter","TSParenthesizedType","TSTypeOperator","operator","TSIndexedAccessType","objectType","indexType","TSMappedType","nameType","tokenIfPlusMinus","self","tok","TSLiteralType","literal","TSExpressionWithTypeArguments","expression","TSInterfaceDeclaration","id","extendz","body","TSInterfaceBody","TSTypeAliasDeclaration","TSTypeExpression","_expression$trailingC","forceParens","trailingComments","undefined","TSTypeAssertion","TSInstantiationExpression","TSEnumDeclaration","isConst","TSEnumMember","initializer","TSModuleDeclaration","global","TSModuleBlock","TSImportType","argument","qualifier","TSImportEqualsDeclaration","isExport","moduleReference","TSExternalModuleReference","TSNonNullExpression","TSExportAssignment","TSNamespaceExportDeclaration","tsPrintClassMemberModifiers","isField","override"],"sources":["../../src/generators/typescript.ts"],"sourcesContent":["import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath } from \"@babel/traverse\";\n\nexport function TSTypeAnnotation(this: Printer, node: t.TSTypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSTypeParameterInstantiation(\n  this: Printer,\n  node: t.TSTypeParameterInstantiation,\n  parent: t.Node,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n  this.token(\">\");\n}\n\nexport { TSTypeParameterInstantiation as TSTypeParameterDeclaration };\n\nexport function TSTypeParameter(this: Printer, node: t.TSTypeParameter) {\n  if (node.in) {\n    this.word(\"in\");\n    this.space();\n  }\n\n  if (node.out) {\n    this.word(\"out\");\n    this.space();\n  }\n\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (node.name as unknown as string)\n      : (node.name as unknown as t.Identifier).name,\n  );\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function TSParameterProperty(\n  this: Printer,\n  node: t.TSParameterProperty,\n) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nexport function TSDeclareFunction(\n  this: Printer,\n  node: t.TSDeclareFunction,\n  parent: NodePath<t.TSDeclareFunction>[\"parent\"],\n) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this._functionHead(node, parent);\n  this.token(\";\");\n}\n\nexport function TSDeclareMethod(this: Printer, node: t.TSDeclareMethod) {\n  this._classMethodHead(node);\n  this.token(\";\");\n}\n\nexport function TSQualifiedName(this: Printer, node: t.TSQualifiedName) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nexport function TSCallSignatureDeclaration(\n  this: Printer,\n  node: t.TSCallSignatureDeclaration,\n) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSConstructSignatureDeclaration(\n  this: Printer,\n  node: t.TSConstructSignatureDeclaration,\n) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSPropertySignature(\n  this: Printer,\n  node: t.TSPropertySignature,\n) {\n  const { readonly } = node;\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function tsPrintPropertyOrMethodName(\n  this: Printer,\n  node: t.TSPropertySignature | t.TSMethodSignature,\n) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n  this.print(node.key, node);\n  if (node.computed) {\n    this.token(\"]\");\n  }\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nexport function TSMethodSignature(this: Printer, node: t.TSMethodSignature) {\n  const { kind } = node;\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSIndexSignature(this: Printer, node: t.TSIndexSignature) {\n  const { readonly, static: isStatic } = node;\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.token(\"[\");\n  this._parameters(node.parameters, node);\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function TSAnyKeyword(this: Printer) {\n  this.word(\"any\");\n}\nexport function TSBigIntKeyword(this: Printer) {\n  this.word(\"bigint\");\n}\nexport function TSUnknownKeyword(this: Printer) {\n  this.word(\"unknown\");\n}\nexport function TSNumberKeyword(this: Printer) {\n  this.word(\"number\");\n}\nexport function TSObjectKeyword(this: Printer) {\n  this.word(\"object\");\n}\nexport function TSBooleanKeyword(this: Printer) {\n  this.word(\"boolean\");\n}\nexport function TSStringKeyword(this: Printer) {\n  this.word(\"string\");\n}\nexport function TSSymbolKeyword(this: Printer) {\n  this.word(\"symbol\");\n}\nexport function TSVoidKeyword(this: Printer) {\n  this.word(\"void\");\n}\nexport function TSUndefinedKeyword(this: Printer) {\n  this.word(\"undefined\");\n}\nexport function TSNullKeyword(this: Printer) {\n  this.word(\"null\");\n}\nexport function TSNeverKeyword(this: Printer) {\n  this.word(\"never\");\n}\nexport function TSIntrinsicKeyword(this: Printer) {\n  this.word(\"intrinsic\");\n}\n\nexport function TSThisType(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TSFunctionType(this: Printer, node: t.TSFunctionType) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function TSConstructorType(this: Printer, node: t.TSConstructorType) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function tsPrintFunctionOrConstructorType(\n  this: Printer,\n  node: t.TSFunctionType | t.TSConstructorType,\n) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.params\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.returnType\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nexport function TSTypeReference(this: Printer, node: t.TSTypeReference) {\n  this.print(node.typeName, node, true);\n  this.print(node.typeParameters, node, true);\n}\n\nexport function TSTypePredicate(this: Printer, node: t.TSTypePredicate) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n  this.print(node.parameterName);\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nexport function TSTypeQuery(this: Printer, node: t.TSTypeQuery) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n\n  if (node.typeParameters) {\n    this.print(node.typeParameters, node);\n  }\n}\n\nexport function TSTypeLiteral(this: Printer, node: t.TSTypeLiteral) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nexport function tsPrintTypeLiteralOrInterfaceBody(\n  this: Printer,\n  members: t.TSTypeElement[],\n  node: t.TSType | t.TSInterfaceBody,\n) {\n  tsPrintBraced(this, members, node);\n}\n\nfunction tsPrintBraced(printer: Printer, members: t.Node[], node: t.Node) {\n  printer.token(\"{\");\n  if (members.length) {\n    printer.indent();\n    printer.newline();\n    for (const member of members) {\n      printer.print(member, node);\n      //this.token(sep);\n      printer.newline();\n    }\n    printer.dedent();\n  }\n\n  printer.rightBrace(node);\n}\n\nexport function TSArrayType(this: Printer, node: t.TSArrayType) {\n  this.print(node.elementType, node, true);\n\n  this.token(\"[]\");\n}\n\nexport function TSTupleType(this: Printer, node: t.TSTupleType) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nexport function TSOptionalType(this: Printer, node: t.TSOptionalType) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nexport function TSRestType(this: Printer, node: t.TSRestType) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSNamedTupleMember(this: Printer, node: t.TSNamedTupleMember) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nexport function TSUnionType(this: Printer, node: t.TSUnionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"|\");\n}\n\nexport function TSIntersectionType(this: Printer, node: t.TSIntersectionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(\n  printer: Printer,\n  node: t.TSUnionType | t.TSIntersectionType,\n  sep: \"|\" | \"&\",\n) {\n  printer.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    },\n  });\n}\n\nexport function TSConditionalType(this: Printer, node: t.TSConditionalType) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nexport function TSInferType(this: Printer, node: t.TSInferType) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nexport function TSParenthesizedType(\n  this: Printer,\n  node: t.TSParenthesizedType,\n) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function TSTypeOperator(this: Printer, node: t.TSTypeOperator) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSIndexedAccessType(\n  this: Printer,\n  node: t.TSIndexedAccessType,\n) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function TSMappedType(this: Printer, node: t.TSMappedType) {\n  const { nameType, optional, readonly, typeParameter } = node;\n  this.token(\"{\");\n  this.space();\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (typeParameter.name as unknown as string)\n      : (typeParameter.name as unknown as t.Identifier).name,\n  );\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self: Printer, tok: true | \"+\" | \"-\") {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nexport function TSLiteralType(this: Printer, node: t.TSLiteralType) {\n  this.print(node.literal, node);\n}\n\nexport function TSExpressionWithTypeArguments(\n  this: Printer,\n  node: t.TSExpressionWithTypeArguments,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSInterfaceDeclaration(\n  this: Printer,\n  node: t.TSInterfaceDeclaration,\n) {\n  const { declare, id, typeParameters, extends: extendz, body } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  if (extendz?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSInterfaceBody(this: Printer, node: t.TSInterfaceBody) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nexport function TSTypeAliasDeclaration(\n  this: Printer,\n  node: t.TSTypeAliasDeclaration,\n) {\n  const { declare, id, typeParameters, typeAnnotation } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSTypeExpression(\n  this: Printer,\n  node: t.TSAsExpression | t.TSSatisfiesExpression,\n) {\n  const { type, expression, typeAnnotation } = node;\n  const forceParens = !!expression.trailingComments?.length;\n  this.print(expression, node, true, undefined, forceParens);\n  this.space();\n  this.word(type === \"TSAsExpression\" ? \"as\" : \"satisfies\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nexport {\n  TSTypeExpression as TSAsExpression,\n  TSTypeExpression as TSSatisfiesExpression,\n};\n\nexport function TSTypeAssertion(this: Printer, node: t.TSTypeAssertion) {\n  const { typeAnnotation, expression } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nexport function TSInstantiationExpression(\n  this: Printer,\n  node: t.TSInstantiationExpression,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSEnumDeclaration(this: Printer, node: t.TSEnumDeclaration) {\n  const { declare, const: isConst, id, members } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  tsPrintBraced(this, members, node);\n}\n\nexport function TSEnumMember(this: Printer, node: t.TSEnumMember) {\n  const { id, initializer } = node;\n  this.print(id, node);\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n  this.token(\",\");\n}\n\nexport function TSModuleDeclaration(\n  this: Printer,\n  node: t.TSModuleDeclaration,\n) {\n  const { declare, id } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSModuleBlock(this: Printer, node: t.TSModuleBlock) {\n  tsPrintBraced(this, node.body, node);\n}\n\nexport function TSImportType(this: Printer, node: t.TSImportType) {\n  const { argument, qualifier, typeParameters } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nexport function TSImportEqualsDeclaration(\n  this: Printer,\n  node: t.TSImportEqualsDeclaration,\n) {\n  const { isExport, id, moduleReference } = node;\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nexport function TSExternalModuleReference(\n  this: Printer,\n  node: t.TSExternalModuleReference,\n) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nexport function TSNonNullExpression(\n  this: Printer,\n  node: t.TSNonNullExpression,\n) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nexport function TSExportAssignment(this: Printer, node: t.TSExportAssignment) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nexport function TSNamespaceExportDeclaration(\n  this: Printer,\n  node: t.TSNamespaceExportDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nexport function tsPrintSignatureDeclarationBase(this: Printer, node: any) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? node.params\n    : node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  const returnType = process.env.BABEL_8_BREAKING\n    ? node.returnType\n    : node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nexport function tsPrintClassMemberModifiers(\n  this: Printer,\n  node:\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.TSDeclareMethod,\n) {\n  const isField =\n    node.type === \"ClassAccessorProperty\" || node.type === \"ClassProperty\";\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}\n"],"mappings":"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","ignoreList":[]}