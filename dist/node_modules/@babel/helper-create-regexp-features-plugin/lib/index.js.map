{"version":3,"file":"index.js","names":["_regexpuCore","require","_core","_helperAnnotateAsPure","_semver","_features","_util","versionKey","createRegExpFeaturePlugin","_ref","name","feature","_ref$options","options","_ref$manipulateOption","manipulateOptions","pre","_file$get","file","features","get","featuresKey","newFeatures","enableFeature","FEATURES","useUnicodeFlag","runtime","unicodeFlag","set","undefined","has","runtimeKey","hasFeature","duplicateNamedCaptureGroups","Error","lt","visitor","RegExpLiteral","path","_file$get2","_newFlags","node","regexpuOptions","generateRegexpuOptions","pattern","canSkipRegexpu","namedCaptureGroups","__proto__","namedGroups","onNamedGroup","index","prev","Array","isArray","push","newFlags","modifiers","onNewFlags","flags","Object","keys","length","isRegExpTest","call","types","callExpression","addHelper","valueToNode","replaceWith","transformFlags","parentPath","isMemberExpression","object","computed","isIdentifier"],"sources":["../src/index.ts"],"sourcesContent":["import rewritePattern from \"regexpu-core\";\nimport type { NodePath } from \"@babel/traverse\";\nimport { types as t, type PluginObject } from \"@babel/core\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\n\nimport semver from \"semver\";\n\nimport {\n  featuresKey,\n  FEATURES,\n  enableFeature,\n  runtimeKey,\n  hasFeature,\n} from \"./features.ts\";\nimport {\n  generateRegexpuOptions,\n  canSkipRegexpu,\n  transformFlags,\n} from \"./util.ts\";\n\nconst versionKey = \"@babel/plugin-regexp-features/version\";\n\nexport interface Options {\n  name: string;\n  feature: keyof typeof FEATURES;\n  options?: {\n    useUnicodeFlag?: boolean;\n    runtime?: boolean;\n  };\n  manipulateOptions?: PluginObject[\"manipulateOptions\"];\n}\n\nexport function createRegExpFeaturePlugin({\n  name,\n  feature,\n  options = {},\n  manipulateOptions = () => {},\n}: Options): PluginObject {\n  return {\n    name,\n\n    manipulateOptions,\n\n    pre() {\n      const { file } = this;\n      const features = file.get(featuresKey) ?? 0;\n      let newFeatures = enableFeature(features, FEATURES[feature]);\n\n      const { useUnicodeFlag, runtime } = options;\n      if (useUnicodeFlag === false) {\n        newFeatures = enableFeature(newFeatures, FEATURES.unicodeFlag);\n      }\n      if (newFeatures !== features) {\n        file.set(featuresKey, newFeatures);\n      }\n\n      if (runtime !== undefined) {\n        if (\n          file.has(runtimeKey) &&\n          file.get(runtimeKey) !== runtime &&\n          (process.env.BABEL_8_BREAKING ||\n            // This check. Is necessary because in Babel 7 we allow multiple\n            // copies of transform-named-capturing-groups-regex with\n            // conflicting 'runtime' options.\n            hasFeature(newFeatures, FEATURES.duplicateNamedCaptureGroups))\n        ) {\n          throw new Error(\n            `The 'runtime' option must be the same for ` +\n              `'@babel/plugin-transform-named-capturing-groups-regex' and ` +\n              `'@babel/plugin-proposal-duplicate-named-capturing-groups-regex'.`,\n          );\n        }\n\n        if (process.env.BABEL_8_BREAKING) {\n          file.set(runtimeKey, runtime);\n        } else if (\n          // This check. Is necessary because in Babel 7 we allow multiple\n          // copies of transform-named-capturing-groups-regex with\n          // conflicting 'runtime' options.\n          feature === \"namedCaptureGroups\"\n        ) {\n          if (!runtime || !file.has(runtimeKey)) file.set(runtimeKey, runtime);\n        } else {\n          file.set(runtimeKey, runtime);\n        }\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // Until 7.21.4, we used to encode the version as a number.\n        // If file.get(versionKey) is a number, it has thus been\n        // set by an older version of this plugin.\n        if (typeof file.get(versionKey) === \"number\") {\n          file.set(versionKey, PACKAGE_JSON.version);\n          return;\n        }\n      }\n      if (\n        !file.get(versionKey) ||\n        semver.lt(file.get(versionKey), PACKAGE_JSON.version)\n      ) {\n        file.set(versionKey, PACKAGE_JSON.version);\n      }\n    },\n\n    visitor: {\n      RegExpLiteral(path) {\n        const { node } = path;\n        const { file } = this;\n        const features = file.get(featuresKey);\n        const runtime = file.get(runtimeKey) ?? true;\n\n        const regexpuOptions = generateRegexpuOptions(node.pattern, features);\n        if (canSkipRegexpu(node, regexpuOptions)) {\n          return;\n        }\n\n        const namedCaptureGroups: Record<string, number | number[]> = {\n          __proto__: null,\n        };\n        if (regexpuOptions.namedGroups === \"transform\") {\n          regexpuOptions.onNamedGroup = (name, index) => {\n            const prev = namedCaptureGroups[name];\n            if (typeof prev === \"number\") {\n              namedCaptureGroups[name] = [prev, index];\n            } else if (Array.isArray(prev)) {\n              prev.push(index);\n            } else {\n              namedCaptureGroups[name] = index;\n            }\n          };\n        }\n\n        let newFlags;\n        if (regexpuOptions.modifiers === \"transform\") {\n          regexpuOptions.onNewFlags = flags => {\n            newFlags = flags;\n          };\n        }\n\n        node.pattern = rewritePattern(node.pattern, node.flags, regexpuOptions);\n\n        if (\n          regexpuOptions.namedGroups === \"transform\" &&\n          Object.keys(namedCaptureGroups).length > 0 &&\n          runtime &&\n          !isRegExpTest(path)\n        ) {\n          const call = t.callExpression(this.addHelper(\"wrapRegExp\"), [\n            node,\n            t.valueToNode(namedCaptureGroups),\n          ]);\n          annotateAsPure(call);\n\n          path.replaceWith(call);\n        }\n\n        node.flags = transformFlags(regexpuOptions, newFlags ?? node.flags);\n      },\n    },\n  };\n}\n\nfunction isRegExpTest(path: NodePath<t.RegExpLiteral>) {\n  return (\n    path.parentPath.isMemberExpression({\n      object: path.node,\n      computed: false,\n    }) && path.parentPath.get(\"property\").isIdentifier({ name: \"test\" })\n  );\n}\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,qBAAA,GAAAF,OAAA;AAEA,IAAAG,OAAA,GAAAH,OAAA;AAEA,IAAAI,SAAA,GAAAJ,OAAA;AAOA,IAAAK,KAAA,GAAAL,OAAA;AAMA,IAAMM,UAAU,GAAG,uCAAuC;AAYnD,SAASC,yBAAyBA,CAAAC,IAAA,EAKf;EAAA,IAJxBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IAAAC,YAAA,GAAAH,IAAA,CACPI,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,CAAC,CAAC,GAAAA,YAAA;IAAAE,qBAAA,GAAAL,IAAA,CACZM,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,cAAG,YAAM,CAAC,IAAAA,qBAAA;EAE3B,OAAO;IACLJ,IAAI,EAAJA,IAAI;IAEJK,iBAAiB,EAAjBA,iBAAiB;IAEjBC,GAAG,WAAAA,IAAA,EAAG;MAAA,IAAAC,SAAA;MACJ,IAAQC,IAAA,GAAS,IAAI,CAAbA,IAAA;MACR,IAAMC,QAAQ,IAAAF,SAAA,GAAGC,IAAI,CAACE,GAAG,CAACf,SAAA,CAAAgB,WAAW,CAAC,YAAAJ,SAAA,GAAI,CAAC;MAC3C,IAAIK,WAAW,GAAG,IAAAjB,SAAA,CAAAkB,aAAa,EAACJ,QAAQ,EAAEd,SAAA,CAAAmB,QAAQ,CAACb,OAAO,CAAC,CAAC;MAE5D,IAAQc,cAAc,GAAcZ,OAAO,CAAnCY,cAAc;QAAEC,OAAA,GAAYb,OAAO,CAAnBa,OAAA;MACxB,IAAID,cAAc,KAAK,KAAK,EAAE;QAC5BH,WAAW,GAAG,IAAAjB,SAAA,CAAAkB,aAAa,EAACD,WAAW,EAAEjB,SAAA,CAAAmB,QAAQ,CAACG,WAAW,CAAC;MAChE;MACA,IAAIL,WAAW,KAAKH,QAAQ,EAAE;QAC5BD,IAAI,CAACU,GAAG,CAACvB,SAAA,CAAAgB,WAAW,EAAEC,WAAW,CAAC;MACpC;MAEA,IAAII,OAAO,KAAKG,SAAS,EAAE;QACzB,IACEX,IAAI,CAACY,GAAG,CAACzB,SAAA,CAAA0B,UAAU,CAAC,IACpBb,IAAI,CAACE,GAAG,CAACf,SAAA,CAAA0B,UAAU,CAAC,KAAKL,OAAO,IAK9B,IAAArB,SAAA,CAAA2B,UAAU,EAACV,WAAW,EAAEjB,SAAA,CAAAmB,QAAQ,CAACS,2BAA2B,CAAE,EAChE;UACA,MAAM,IAAIC,KAAK,CACZ,4GAC8D,qEAEjE,CAAC;QACH;QAIO,IAILvB,OAAO,KAAK,oBAAoB,EAChC;UACA,IAAI,CAACe,OAAO,IAAI,CAACR,IAAI,CAACY,GAAG,CAACzB,SAAA,CAAA0B,UAAU,CAAC,EAAEb,IAAI,CAACU,GAAG,CAACvB,SAAA,CAAA0B,UAAU,EAAEL,OAAO,CAAC;QACtE,CAAC,MAAM;UACLR,IAAI,CAACU,GAAG,CAACvB,SAAA,CAAA0B,UAAU,EAAEL,OAAO,CAAC;QAC/B;MACF;MAEmC;QAIjC,IAAI,OAAOR,IAAI,CAACE,GAAG,CAACb,UAAU,CAAC,KAAK,QAAQ,EAAE;UAC5CW,IAAI,CAACU,GAAG,CAACrB,UAAU,WAAsB,CAAC;UAC1C;QACF;MACF;MACA,IACE,CAACW,IAAI,CAACE,GAAG,CAACb,UAAU,CAAC,IACrBH,OAAM,CAAC+B,EAAE,CAACjB,IAAI,CAACE,GAAG,CAACb,UAAU,CAAC,WAAsB,CAAC,EACrD;QACAW,IAAI,CAACU,GAAG,CAACrB,UAAU,WAAsB,CAAC;MAC5C;IACF,CAAC;IAED6B,OAAO,EAAE;MACPC,aAAa,WAAAA,cAACC,IAAI,EAAE;QAAA,IAAAC,UAAA,EAAAC,SAAA;QAClB,IAAQC,IAAA,GAASH,IAAI,CAAbG,IAAA;QACR,IAAQvB,IAAA,GAAS,IAAI,CAAbA,IAAA;QACR,IAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAG,CAACf,SAAA,CAAAgB,WAAW,CAAC;QACtC,IAAMK,OAAO,IAAAa,UAAA,GAAGrB,IAAI,CAACE,GAAG,CAACf,SAAA,CAAA0B,UAAU,CAAC,YAAAQ,UAAA,GAAI,IAAI;QAE5C,IAAMG,cAAc,GAAG,IAAApC,KAAA,CAAAqC,sBAAsB,EAACF,IAAI,CAACG,OAAO,EAAEzB,QAAQ,CAAC;QACrE,IAAI,IAAAb,KAAA,CAAAuC,cAAc,EAACJ,IAAI,EAAEC,cAAc,CAAC,EAAE;UACxC;QACF;QAEA,IAAMI,kBAAqD,GAAG;UAC5DC,SAAS,EAAE;QACb,CAAC;QACD,IAAIL,cAAc,CAACM,WAAW,KAAK,WAAW,EAAE;UAC9CN,cAAc,CAACO,YAAY,GAAG,UAACvC,IAAI,EAAEwC,KAAK,EAAK;YAC7C,IAAMC,IAAI,GAAGL,kBAAkB,CAACpC,IAAI,CAAC;YACrC,IAAI,OAAOyC,IAAI,KAAK,QAAQ,EAAE;cAC5BL,kBAAkB,CAACpC,IAAI,CAAC,GAAG,CAACyC,IAAI,EAAED,KAAK,CAAC;YAC1C,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;cAC9BA,IAAI,CAACG,IAAI,CAACJ,KAAK,CAAC;YAClB,CAAC,MAAM;cACLJ,kBAAkB,CAACpC,IAAI,CAAC,GAAGwC,KAAK;YAClC;UACF,CAAC;QACH;QAEA,IAAIK,QAAQ;QACZ,IAAIb,cAAc,CAACc,SAAS,KAAK,WAAW,EAAE;UAC5Cd,cAAc,CAACe,UAAU,GAAG,UAAAC,KAAK,EAAI;YACnCH,QAAQ,GAAGG,KAAK;UAClB,CAAC;QACH;QAEAjB,IAAI,CAACG,OAAO,GAAG5C,YAAc,CAACyC,IAAI,CAACG,OAAO,EAAEH,IAAI,CAACiB,KAAK,EAAEhB,cAAc,CAAC;QAEvE,IACEA,cAAc,CAACM,WAAW,KAAK,WAAW,IAC1CW,MAAM,CAACC,IAAI,CAACd,kBAAkB,CAAC,CAACe,MAAM,GAAG,CAAC,IAC1CnC,OAAO,IACP,CAACoC,YAAY,CAACxB,IAAI,CAAC,EACnB;UACA,IAAMyB,IAAI,GAAG7D,KAAA,CAAA8D,KAAC,CAACC,cAAc,CAAC,IAAI,CAACC,SAAS,CAAC,YAAY,CAAC,EAAE,CAC1DzB,IAAI,EACJvC,KAAA,CAAA8D,KAAC,CAACG,WAAW,CAACrB,kBAAkB,CAAC,CAClC,CAAC;UACF,IAAA3C,qBAAA,WAAc,EAAC4D,IAAI,CAAC;UAEpBzB,IAAI,CAAC8B,WAAW,CAACL,IAAI,CAAC;QACxB;QAEAtB,IAAI,CAACiB,KAAK,GAAG,IAAApD,KAAA,CAAA+D,cAAc,EAAC3B,cAAc,GAAAF,SAAA,GAAEe,QAAQ,YAAAf,SAAA,GAAIC,IAAI,CAACiB,KAAK,CAAC;MACrE;IACF;EACF,CAAC;AACH;AAEA,SAASI,YAAYA,CAACxB,IAA+B,EAAE;EACrD,OACEA,IAAI,CAACgC,UAAU,CAACC,kBAAkB,CAAC;IACjCC,MAAM,EAAElC,IAAI,CAACG,IAAI;IACjBgC,QAAQ,EAAE;EACZ,CAAC,CAAC,IAAInC,IAAI,CAACgC,UAAU,CAAClD,GAAG,CAAC,UAAU,CAAC,CAACsD,YAAY,CAAC;IAAEhE,IAAI,EAAE;EAAO,CAAC,CAAC;AAExE","ignoreList":[]}