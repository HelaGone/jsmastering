{"version":3,"file":"remapping.umd.js","names":["SOURCELESS_MAPPING","SegmentObject","EMPTY_SOURCES","source","line","column","name","content","ignore","Source","map","sources","MapSource","OriginalSource","traceMappings","tree","gen","genMapping","GenMapping","file","rootSources","rootNames","names","rootMappings","traceMapping","decodedMappings","i","length","segments","j","segment","genCol","traced","originalPositionFor","_traced","maybeAddSegment","setSourceContent","setIgnore","traceSegment","asArray","value","Array","isArray","buildSourceMapTree","input","loader","maps","m","TraceMap","pop","Error","concat","build","importer","importerDepth","resolvedSources","sourcesContent","ignoreList","depth","children","sourceFile","ctx","undefined","sourceMap","sourceContent","ignored","includes","SourceMap","options","_classCallCheck","out","toDecodedMap","toEncodedMap","version","mappings","sourceRoot","excludeContent","_createClass","key","toString","JSON","stringify","remapping","opts","_typeof"],"sources":["../src/source-map-tree.ts","../src/build-source-map-tree.ts","../src/source-map.ts","../src/remapping.ts"],"sourcesContent":["import { GenMapping, maybeAddSegment, setIgnore, setSourceContent } from '@jridgewell/gen-mapping';\nimport { traceSegment, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport type { TraceMap } from '@jridgewell/trace-mapping';\n\nexport type SourceMapSegmentObject = {\n  column: number;\n  line: number;\n  name: string;\n  source: string;\n  content: string | null;\n  ignore: boolean;\n};\n\nexport type OriginalSource = {\n  map: null;\n  sources: Sources[];\n  source: string;\n  content: string | null;\n  ignore: boolean;\n};\n\nexport type MapSource = {\n  map: TraceMap;\n  sources: Sources[];\n  source: string;\n  content: null;\n  ignore: false;\n};\n\nexport type Sources = OriginalSource | MapSource;\n\nconst SOURCELESS_MAPPING = /* #__PURE__ */ SegmentObject('', -1, -1, '', null, false);\nconst EMPTY_SOURCES: Sources[] = [];\n\nfunction SegmentObject(\n  source: string,\n  line: number,\n  column: number,\n  name: string,\n  content: string | null,\n  ignore: boolean\n): SourceMapSegmentObject {\n  return { source, line, column, name, content, ignore };\n}\n\nfunction Source(\n  map: TraceMap,\n  sources: Sources[],\n  source: '',\n  content: null,\n  ignore: false\n): MapSource;\nfunction Source(\n  map: null,\n  sources: Sources[],\n  source: string,\n  content: string | null,\n  ignore: boolean\n): OriginalSource;\nfunction Source(\n  map: TraceMap | null,\n  sources: Sources[],\n  source: string | '',\n  content: string | null,\n  ignore: boolean\n): Sources {\n  return {\n    map,\n    sources,\n    source,\n    content,\n    ignore,\n  } as any;\n}\n\n/**\n * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes\n * (which may themselves be SourceMapTrees).\n */\nexport function MapSource(map: TraceMap, sources: Sources[]): MapSource {\n  return Source(map, sources, '', null, false);\n}\n\n/**\n * A \"leaf\" node in the sourcemap tree, representing an original, unmodified source file. Recursive\n * segment tracing ends at the `OriginalSource`.\n */\nexport function OriginalSource(\n  source: string,\n  content: string | null,\n  ignore: boolean\n): OriginalSource {\n  return Source(null, EMPTY_SOURCES, source, content, ignore);\n}\n\n/**\n * traceMappings is only called on the root level SourceMapTree, and begins the process of\n * resolving each mapping in terms of the original source files.\n */\nexport function traceMappings(tree: MapSource): GenMapping {\n  // TODO: Eventually support sourceRoot, which has to be removed because the sources are already\n  // fully resolved. We'll need to make sources relative to the sourceRoot before adding them.\n  const gen = new GenMapping({ file: tree.map.file });\n  const { sources: rootSources, map } = tree;\n  const rootNames = map.names;\n  const rootMappings = decodedMappings(map);\n\n  for (let i = 0; i < rootMappings.length; i++) {\n    const segments = rootMappings[i];\n\n    for (let j = 0; j < segments.length; j++) {\n      const segment = segments[j];\n      const genCol = segment[0];\n      let traced: SourceMapSegmentObject | null = SOURCELESS_MAPPING;\n\n      // 1-length segments only move the current generated column, there's no source information\n      // to gather from it.\n      if (segment.length !== 1) {\n        const source = rootSources[segment[1]];\n        traced = originalPositionFor(\n          source,\n          segment[2],\n          segment[3],\n          segment.length === 5 ? rootNames[segment[4]] : ''\n        );\n\n        // If the trace is invalid, then the trace ran into a sourcemap that doesn't contain a\n        // respective segment into an original source.\n        if (traced == null) continue;\n      }\n\n      const { column, line, name, content, source, ignore } = traced;\n\n      maybeAddSegment(gen, i, genCol, source, line, column, name);\n      if (source && content != null) setSourceContent(gen, source, content);\n      if (ignore) setIgnore(gen, source, true);\n    }\n  }\n\n  return gen;\n}\n\n/**\n * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own\n * child SourceMapTrees, until we find the original source map.\n */\nexport function originalPositionFor(\n  source: Sources,\n  line: number,\n  column: number,\n  name: string\n): SourceMapSegmentObject | null {\n  if (!source.map) {\n    return SegmentObject(source.source, line, column, name, source.content, source.ignore);\n  }\n\n  const segment = traceSegment(source.map, line, column);\n\n  // If we couldn't find a segment, then this doesn't exist in the sourcemap.\n  if (segment == null) return null;\n  // 1-length segments only move the current generated column, there's no source information\n  // to gather from it.\n  if (segment.length === 1) return SOURCELESS_MAPPING;\n\n  return originalPositionFor(\n    source.sources[segment[1]],\n    segment[2],\n    segment[3],\n    segment.length === 5 ? source.map.names[segment[4]] : name\n  );\n}\n","import { TraceMap } from '@jridgewell/trace-mapping';\n\nimport { OriginalSource, MapSource } from './source-map-tree';\n\nimport type { Sources, MapSource as MapSourceType } from './source-map-tree';\nimport type { SourceMapInput, SourceMapLoader, LoaderContext } from './types';\n\nfunction asArray<T>(value: T | T[]): T[] {\n  if (Array.isArray(value)) return value;\n  return [value];\n}\n\n/**\n * Recursively builds a tree structure out of sourcemap files, with each node\n * being either an `OriginalSource` \"leaf\" or a `SourceMapTree` composed of\n * `OriginalSource`s and `SourceMapTree`s.\n *\n * Every sourcemap is composed of a collection of source files and mappings\n * into locations of those source files. When we generate a `SourceMapTree` for\n * the sourcemap, we attempt to load each source file's own sourcemap. If it\n * does not have an associated sourcemap, it is considered an original,\n * unmodified source file.\n */\nexport default function buildSourceMapTree(\n  input: SourceMapInput | SourceMapInput[],\n  loader: SourceMapLoader\n): MapSourceType {\n  const maps = asArray(input).map((m) => new TraceMap(m, ''));\n  const map = maps.pop()!;\n\n  for (let i = 0; i < maps.length; i++) {\n    if (maps[i].sources.length > 1) {\n      throw new Error(\n        `Transformation map ${i} must have exactly one source file.\\n` +\n          'Did you specify these with the most recent transformation maps first?'\n      );\n    }\n  }\n\n  let tree = build(map, loader, '', 0);\n  for (let i = maps.length - 1; i >= 0; i--) {\n    tree = MapSource(maps[i], [tree]);\n  }\n  return tree;\n}\n\nfunction build(\n  map: TraceMap,\n  loader: SourceMapLoader,\n  importer: string,\n  importerDepth: number\n): MapSourceType {\n  const { resolvedSources, sourcesContent, ignoreList } = map;\n\n  const depth = importerDepth + 1;\n  const children = resolvedSources.map((sourceFile: string | null, i: number): Sources => {\n    // The loading context gives the loader more information about why this file is being loaded\n    // (eg, from which importer). It also allows the loader to override the location of the loaded\n    // sourcemap/original source, or to override the content in the sourcesContent field if it's\n    // an unmodified source file.\n    const ctx: LoaderContext = {\n      importer,\n      depth,\n      source: sourceFile || '',\n      content: undefined,\n      ignore: undefined,\n    };\n\n    // Use the provided loader callback to retrieve the file's sourcemap.\n    // TODO: We should eventually support async loading of sourcemap files.\n    const sourceMap = loader(ctx.source, ctx);\n\n    const { source, content, ignore } = ctx;\n\n    // If there is a sourcemap, then we need to recurse into it to load its source files.\n    if (sourceMap) return build(new TraceMap(sourceMap, source), loader, source, depth);\n\n    // Else, it's an unmodified source file.\n    // The contents of this unmodified source file can be overridden via the loader context,\n    // allowing it to be explicitly null or a string. If it remains undefined, we fall back to\n    // the importing sourcemap's `sourcesContent` field.\n    const sourceContent =\n      content !== undefined ? content : sourcesContent ? sourcesContent[i] : null;\n    const ignored = ignore !== undefined ? ignore : ignoreList ? ignoreList.includes(i) : false;\n    return OriginalSource(source, sourceContent, ignored);\n  });\n\n  return MapSource(map, children);\n}\n","import { toDecodedMap, toEncodedMap } from '@jridgewell/gen-mapping';\n\nimport type { GenMapping } from '@jridgewell/gen-mapping';\nimport type { DecodedSourceMap, EncodedSourceMap, Options } from './types';\n\n/**\n * A SourceMap v3 compatible sourcemap, which only includes fields that were\n * provided to it.\n */\nexport default class SourceMap {\n  declare file?: string | null;\n  declare mappings: EncodedSourceMap['mappings'] | DecodedSourceMap['mappings'];\n  declare sourceRoot?: string;\n  declare names: string[];\n  declare sources: (string | null)[];\n  declare sourcesContent?: (string | null)[];\n  declare version: 3;\n  declare ignoreList: number[] | undefined;\n\n  constructor(map: GenMapping, options: Options) {\n    const out = options.decodedMappings ? toDecodedMap(map) : toEncodedMap(map);\n    this.version = out.version; // SourceMap spec says this should be first.\n    this.file = out.file;\n    this.mappings = out.mappings as SourceMap['mappings'];\n    this.names = out.names as SourceMap['names'];\n    this.ignoreList = out.ignoreList as SourceMap['ignoreList'];\n    this.sourceRoot = out.sourceRoot;\n\n    this.sources = out.sources as SourceMap['sources'];\n    if (!options.excludeContent) {\n      this.sourcesContent = out.sourcesContent as SourceMap['sourcesContent'];\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n","import buildSourceMapTree from './build-source-map-tree';\nimport { traceMappings } from './source-map-tree';\nimport SourceMap from './source-map';\n\nimport type { SourceMapInput, SourceMapLoader, Options } from './types';\nexport type {\n  SourceMapSegment,\n  EncodedSourceMap,\n  EncodedSourceMap as RawSourceMap,\n  DecodedSourceMap,\n  SourceMapInput,\n  SourceMapLoader,\n  LoaderContext,\n  Options,\n} from './types';\nexport type { SourceMap };\n\n/**\n * Traces through all the mappings in the root sourcemap, through the sources\n * (and their sourcemaps), all the way back to the original source location.\n *\n * `loader` will be called every time we encounter a source file. If it returns\n * a sourcemap, we will recurse into that sourcemap to continue the trace. If\n * it returns a falsey value, that source file is treated as an original,\n * unmodified source file.\n *\n * Pass `excludeContent` to exclude any self-containing source file content\n * from the output sourcemap.\n *\n * Pass `decodedMappings` to receive a SourceMap with decoded (instead of\n * VLQ encoded) mappings.\n */\nexport default function remapping(\n  input: SourceMapInput | SourceMapInput[],\n  loader: SourceMapLoader,\n  options?: boolean | Options\n): SourceMap {\n  const opts =\n    typeof options === 'object' ? options : { excludeContent: !!options, decodedMappings: false };\n  const tree = buildSourceMapTree(input, loader);\n  return new SourceMap(traceMappings(tree), opts);\n}\n"],"mappings":";;;;;;;;;;;;;EAgCA,IAAMA,kBAAkB,kBAAmBC,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;EACrF,IAAMC,aAAa,GAAc,EAAE;EAEnC,SAASD,aAAaA,CACpBE,MAAc,EACdC,IAAY,EACZC,MAAc,EACdC,IAAY,EACZC,OAAsB,EACtBC,MAAe;IAEf,OAAO;MAAEL,MAAM,EAANA,MAAM;MAAEC,IAAI,EAAJA,IAAI;MAAEC,MAAM,EAANA,MAAM;MAAEC,IAAI,EAAJA,IAAI;MAAEC,OAAO,EAAPA,OAAO;MAAEC,MAAM,EAANA;IAAM,CAAE;EACxD;EAgBA,SAASC,MAAMA,CACbC,GAAoB,EACpBC,OAAkB,EAClBR,MAAmB,EACnBI,OAAsB,EACtBC,MAAe;IAEf,OAAO;MACLE,GAAG,EAAHA,GAAG;MACHC,OAAO,EAAPA,OAAO;MACPR,MAAM,EAANA,MAAM;MACNI,OAAO,EAAPA,OAAO;MACPC,MAAM,EAANA;KACM;EACV;EAEA;;;;EAIgB,SAAAI,SAASA,CAACF,GAAa,EAAEC,OAAkB;IACzD,OAAOF,MAAM,CAACC,GAAG,EAAEC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;EAC9C;EAEA;;;;WAIgBE,cAAcA,CAC5BV,MAAc,EACdI,OAAsB,EACtBC,MAAe;IAEf,OAAOC,MAAM,CAAC,IAAI,EAAEP,aAAa,EAAEC,MAAM,EAAEI,OAAO,EAAEC,MAAM,CAAC;EAC7D;EAEA;;;;EAIM,SAAUM,aAAaA,CAACC,IAAe;;;IAG3C,IAAMC,GAAG,GAAG,IAAIC,UAAA,CAAAC,UAAU,CAAC;MAAEC,IAAI,EAAEJ,IAAI,CAACL,GAAG,CAACS;IAAI,CAAE,CAAC;IACnD,IAAiBC,WAAW,GAAUL,IAAI,CAAlCJ,OAAO;MAAeD,GAAG,GAAKK,IAAI,CAAZL,GAAG;IACjC,IAAMW,SAAS,GAAGX,GAAG,CAACY,KAAK;IAC3B,IAAMC,YAAY,GAAGC,YAAA,CAAAC,eAAe,CAACf,GAAG,CAAC;IAEzC,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAME,QAAQ,GAAGL,YAAY,CAACG,CAAC,CAAC;MAEhC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;QACxC,IAAMC,OAAO,GAAGF,QAAQ,CAACC,CAAC,CAAC;QAC3B,IAAME,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC;QACzB,IAAIE,MAAM,GAAkChC,kBAAkB;;;QAI9D,IAAI8B,OAAO,CAACH,MAAM,KAAK,CAAC,EAAE;UACxB,IAAMxB,OAAM,GAAGiB,WAAW,CAACU,OAAO,CAAC,CAAC,CAAC,CAAC;UACtCE,MAAM,GAAGC,mBAAmB,CAC1B9B,OAAM,EACN2B,OAAO,CAAC,CAAC,CAAC,EACVA,OAAO,CAAC,CAAC,CAAC,EACVA,OAAO,CAACH,MAAM,KAAK,CAAC,GAAGN,SAAS,CAACS,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAClD;;;UAID,IAAIE,MAAM,IAAI,IAAI,EAAE;QACrB;QAED,IAAAE,OAAA,GAAwDF,MAAM;UAAtD3B,MAAM,GAAA6B,OAAA,CAAN7B,MAAM;UAAED,IAAI,GAAA8B,OAAA,CAAJ9B,IAAI;UAAEE,IAAI,GAAA4B,OAAA,CAAJ5B,IAAI;UAAEC,OAAO,GAAA2B,OAAA,CAAP3B,OAAO;UAAEJ,MAAM,GAAA+B,OAAA,CAAN/B,MAAM;UAAEK,MAAM,GAAA0B,OAAA,CAAN1B,MAAM;QAEnDS,UAAA,CAAAkB,eAAe,CAACnB,GAAG,EAAEU,CAAC,EAAEK,MAAM,EAAE5B,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,CAAC;QAC3D,IAAIH,MAAM,IAAII,OAAO,IAAI,IAAI,EAAEU,UAAA,CAAAmB,gBAAgB,CAACpB,GAAG,EAAEb,MAAM,EAAEI,OAAO,CAAC;QACrE,IAAIC,MAAM,EAAES,UAAA,CAAAoB,SAAS,CAACrB,GAAG,EAAEb,MAAM,EAAE,IAAI,CAAC;MACzC;IACF;IAED,OAAOa,GAAG;EACZ;EAEA;;;;EAIM,SAAUiB,mBAAmBA,CACjC9B,MAAe,EACfC,IAAY,EACZC,MAAc,EACdC,IAAY;IAEZ,IAAI,CAACH,MAAM,CAACO,GAAG,EAAE;MACf,OAAOT,aAAa,CAACE,MAAM,CAACA,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEH,MAAM,CAACI,OAAO,EAAEJ,MAAM,CAACK,MAAM,CAAC;IACvF;IAED,IAAMsB,OAAO,GAAGN,YAAA,CAAAc,YAAY,CAACnC,MAAM,CAACO,GAAG,EAAEN,IAAI,EAAEC,MAAM,CAAC;;IAGtD,IAAIyB,OAAO,IAAI,IAAI,EAAE,OAAO,IAAI;;;IAGhC,IAAIA,OAAO,CAACH,MAAM,KAAK,CAAC,EAAE,OAAO3B,kBAAkB;IAEnD,OAAOiC,mBAAmB,CACxB9B,MAAM,CAACQ,OAAO,CAACmB,OAAO,CAAC,CAAC,CAAC,CAAC,EAC1BA,OAAO,CAAC,CAAC,CAAC,EACVA,OAAO,CAAC,CAAC,CAAC,EACVA,OAAO,CAACH,MAAM,KAAK,CAAC,GAAGxB,MAAM,CAACO,GAAG,CAACY,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGxB,IAAI,CAC3D;EACH;ECpKA,SAASiC,OAAOA,CAAIC,KAAc;IAChC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE,OAAOA,KAAK;IACtC,OAAO,CAACA,KAAK,CAAC;EAChB;EAEA;;;;;;;;;;;EAWc,SAAUG,kBAAkBA,CACxCC,KAAwC,EACxCC,MAAuB;IAEvB,IAAMC,IAAI,GAAGP,OAAO,CAACK,KAAK,CAAC,CAAClC,GAAG,CAAC,UAACqC,CAAC;MAAA,OAAK,IAAIvB,YAAA,CAAAwB,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC;IAAA,EAAC;IAC3D,IAAMrC,GAAG,GAAGoC,IAAI,CAACG,GAAG,EAAG;IAEvB,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,IAAI,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIoB,IAAI,CAACpB,CAAC,CAAC,CAACf,OAAO,CAACgB,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAIuB,KAAK,CACb,sBAAAC,MAAA,CAAsBzB,CAAC,6CACrB,uEAAuE,CAC1E;MACF;IACF;IAED,IAAIX,IAAI,GAAGqC,KAAK,CAAC1C,GAAG,EAAEmC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;IACpC,KAAK,IAAInB,EAAC,GAAGoB,IAAI,CAACnB,MAAM,GAAG,CAAC,EAAED,EAAC,IAAI,CAAC,EAAEA,EAAC,EAAE,EAAE;MACzCX,IAAI,GAAGH,SAAS,CAACkC,IAAI,CAACpB,EAAC,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;IAClC;IACD,OAAOA,IAAI;EACb;EAEA,SAASqC,KAAKA,CACZ1C,GAAa,EACbmC,MAAuB,EACvBQ,QAAgB,EAChBC,aAAqB;IAErB,IAAQC,eAAe,GAAiC7C,GAAG,CAAnD6C,eAAe;MAAEC,cAAc,GAAiB9C,GAAG,CAAlC8C,cAAc;MAAEC,UAAU,GAAK/C,GAAG,CAAlB+C,UAAU;IAEnD,IAAMC,KAAK,GAAGJ,aAAa,GAAG,CAAC;IAC/B,IAAMK,QAAQ,GAAGJ,eAAe,CAAC7C,GAAG,CAAC,UAACkD,UAAyB,EAAElC,CAAS,EAAa;;;;;MAKrF,IAAMmC,GAAG,GAAkB;QACzBR,QAAQ,EAARA,QAAQ;QACRK,KAAK,EAALA,KAAK;QACLvD,MAAM,EAAEyD,UAAU,IAAI,EAAE;QACxBrD,OAAO,EAAEuD,SAAS;QAClBtD,MAAM,EAAEsD;OACT;;;MAID,IAAMC,SAAS,GAAGlB,MAAM,CAACgB,GAAG,CAAC1D,MAAM,EAAE0D,GAAG,CAAC;MAEzC,IAAQ1D,MAAM,GAAsB0D,GAAG,CAA/B1D,MAAM;QAAEI,OAAO,GAAasD,GAAG,CAAvBtD,OAAO;QAAEC,MAAM,GAAKqD,GAAG,CAAdrD,MAAM;;MAG/B,IAAIuD,SAAS,EAAE,OAAOX,KAAK,CAAC,IAAI5B,YAAA,CAAAwB,QAAQ,CAACe,SAAS,EAAE5D,MAAM,CAAC,EAAE0C,MAAM,EAAE1C,MAAM,EAAEuD,KAAK,CAAC;;;;;MAMnF,IAAMM,aAAa,GACjBzD,OAAO,KAAKuD,SAAS,GAAGvD,OAAO,GAAGiD,cAAc,GAAGA,cAAc,CAAC9B,CAAC,CAAC,GAAG,IAAI;MAC7E,IAAMuC,OAAO,GAAGzD,MAAM,KAAKsD,SAAS,GAAGtD,MAAM,GAAGiD,UAAU,GAAGA,UAAU,CAACS,QAAQ,CAACxC,CAAC,CAAC,GAAG,KAAK;MAC3F,OAAOb,cAAc,CAACV,MAAM,EAAE6D,aAAa,EAAEC,OAAO,CAAC;IACvD,CAAC,CAAC;IAEF,OAAOrD,SAAS,CAACF,GAAG,EAAEiD,QAAQ,CAAC;EACjC;;ECnFA;;;;EAAA,IAIqBQ,SAAS;IAU5B,SAAAA,UAAYzD,GAAe,EAAE0D,OAAgB;MAAAC,eAAA,OAAAF,SAAA;MAC3C,IAAMG,GAAG,GAAGF,OAAO,CAAC3C,eAAe,GAAGR,UAAA,CAAAsD,YAAY,CAAC7D,GAAG,CAAC,GAAGO,UAAA,CAAAuD,YAAY,CAAC9D,GAAG,CAAC;MAC3E,IAAI,CAAC+D,OAAO,GAAGH,GAAG,CAACG,OAAO,CAAC;MAC3B,IAAI,CAACtD,IAAI,GAAGmD,GAAG,CAACnD,IAAI;MACpB,IAAI,CAACuD,QAAQ,GAAGJ,GAAG,CAACI,QAAiC;MACrD,IAAI,CAACpD,KAAK,GAAGgD,GAAG,CAAChD,KAA2B;MAC5C,IAAI,CAACmC,UAAU,GAAGa,GAAG,CAACb,UAAqC;MAC3D,IAAI,CAACkB,UAAU,GAAGL,GAAG,CAACK,UAAU;MAEhC,IAAI,CAAChE,OAAO,GAAG2D,GAAG,CAAC3D,OAA+B;MAClD,IAAI,CAACyD,OAAO,CAACQ,cAAc,EAAE;QAC3B,IAAI,CAACpB,cAAc,GAAGc,GAAG,CAACd,cAA6C;MACxE;;IACF,OAAAqB,YAAA,CAAAV,SAAA;MAAAW,GAAA;MAAAtC,KAAA,EAED,SAAAuC,SAAA,EAAQ;QACN,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;;IAC5B;EAAA;ECnBH;;;;;;;;;;;;;;;EAewB,SAAAC,SAASA,CAC/BtC,KAAwC,EACxCC,MAAuB,EACvBuB,OAA2B;IAE3B,IAAMe,IAAI,GACRC,OAAA,CAAOhB,OAAO,MAAK,QAAQ,GAAGA,OAAO,GAAG;MAAEQ,cAAc,EAAE,CAAC,CAACR,OAAO;MAAE3C,eAAe,EAAE;IAAK,CAAE;IAC/F,IAAMV,IAAI,GAAG4B,kBAAkB,CAACC,KAAK,EAAEC,MAAM,CAAC;IAC9C,OAAO,IAAIsB,SAAS,CAACrD,aAAa,CAACC,IAAI,CAAC,EAAEoE,IAAI,CAAC;EACjD","ignoreList":[]}